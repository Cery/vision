<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>完整内容管理中心 - VisNDT</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Quill富文本编辑器 -->
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <style>
        .sidebar {
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .sidebar .nav-link {
            color: rgba(255,255,255,0.8);
            padding: 12px 20px;
            margin: 2px 0;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        .sidebar .nav-link:hover, .sidebar .nav-link.active {
            color: white;
            background: rgba(255,255,255,0.1);
            transform: translateX(5px);
        }
        .main-content {
            background: #f8f9fa;
            min-height: 100vh;
        }
        .stats-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            border: none;
            transition: transform 0.3s ease;
        }
        .stats-card:hover {
            transform: translateY(-5px);
        }
        .stats-icon {
            width: 60px;
            height: 60px;
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
        }
        .content-section {
            display: none;
        }
        .content-section.active {
            display: block;
        }
        .table-container {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }
        .btn-action {
            padding: 8px 16px;
            border-radius: 8px;
            font-size: 14px;
            margin: 2px;
        }
        .search-box {
            border-radius: 25px;
            border: 2px solid #e9ecef;
            padding: 12px 20px;
            transition: all 0.3s ease;
        }
        .search-box:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
        }
        .status-published { background: #d4edda; color: #155724; }
        .status-draft { background: #fff3cd; color: #856404; }
        .status-active { background: #d1ecf1; color: #0c5460; }
        .status-inactive { background: #f8d7da; color: #721c24; }
        .loading-spinner {
            display: none;
            text-align: center;
            padding: 50px;
        }
        .error-message {
            display: none;
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
        }
        .success-message {
            display: none;
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
        }

        /* 响应式设计 */
        @media (max-width: 1200px) {
            .sidebar {
                width: 250px;
            }

            .main-content {
                margin-left: 250px;
            }
        }

        @media (max-width: 992px) {
            .sidebar {
                position: fixed;
                left: -280px;
                transition: left 0.3s ease;
                z-index: 1050;
                height: 100vh;
                overflow-y: auto;
            }

            .sidebar.show {
                left: 0;
            }

            .main-content {
                margin-left: 0;
                width: 100%;
            }

            .mobile-menu-toggle {
                display: block !important;
            }

            .table-responsive {
                font-size: 0.875rem;
            }

            .btn-action {
                padding: 0.25rem 0.5rem;
                font-size: 0.75rem;
            }

            .card-body {
                padding: 1rem;
            }
        }

        @media (max-width: 768px) {
            .dashboard-stats .col-md-3 {
                margin-bottom: 1rem;
            }

            .stat-card {
                padding: 1rem;
            }

            .stat-card h3 {
                font-size: 1.5rem;
            }

            .table th, .table td {
                padding: 0.5rem 0.25rem;
                font-size: 0.8rem;
            }

            .btn-group .btn {
                padding: 0.25rem 0.5rem;
                font-size: 0.75rem;
            }

            .modal-dialog {
                margin: 0.5rem;
            }

            .modal-xl {
                max-width: calc(100vw - 1rem);
            }
        }

        @media (max-width: 576px) {
            .main-content {
                padding: 0.5rem;
            }

            .card {
                margin-bottom: 1rem;
            }

            .card-header {
                padding: 0.75rem;
            }

            .card-body {
                padding: 0.75rem;
            }

            .btn {
                font-size: 0.8rem;
                padding: 0.375rem 0.75rem;
            }

            .table-responsive {
                border: none;
            }

            .table th, .table td {
                padding: 0.5rem 0.25rem;
                font-size: 0.75rem;
                white-space: nowrap;
            }

            .btn-action {
                padding: 0.2rem 0.4rem;
                font-size: 0.7rem;
            }

            .form-control, .form-select {
                font-size: 0.875rem;
            }

            .modal-body {
                padding: 1rem;
            }

            .modal-footer {
                padding: 0.75rem;
            }

            .modal-footer .btn {
                font-size: 0.75rem;
                padding: 0.25rem 0.5rem;
                margin: 0.125rem;
            }
        }

        /* 移动端菜单切换按钮 */
        .mobile-menu-toggle {
            display: none;
            position: fixed;
            top: 1rem;
            left: 1rem;
            z-index: 1060;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 0.375rem;
            padding: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        /* 遮罩层 */
        .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1040;
        }

        .sidebar-overlay.show {
            display: block;
        }

        /* 高级产品编辑模态框样式 */
        .form-section {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border: 1px solid #e9ecef;
        }

        .section-title {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #3498db;
            font-size: 1.1rem;
        }

        .parameter-row {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid #3498db;
            transition: all 0.3s ease;
        }

        .parameter-row:hover {
            background: #e9ecef;
            transform: translateX(2px);
        }

        .gallery-item {
            position: relative;
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .gallery-item:hover {
            border-color: #3498db;
            background: #f8f9fa;
        }

        .gallery-preview {
            max-width: 100%;
            max-height: 200px;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .btn-remove {
            position: absolute;
            top: 5px;
            right: 5px;
            background: #e74c3c;
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-remove:hover {
            background: #c0392b;
            transform: scale(1.1);
        }

        .editor-container {
            min-height: 300px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
        }

        .supplier-series-container {
            background: #e8f4fd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid #bee5eb;
        }

        .category-hierarchy {
            background: #fff3cd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid #ffeaa7;
        }

        .modal-fullscreen .modal-body {
            padding: 2rem;
        }

        .modal-fullscreen .form-section {
            margin-bottom: 2rem;
        }

        /* 参数模板按钮样式 */
        .parameter-template-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            color: white;
            transition: all 0.3s ease;
        }

        .parameter-template-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
    </style>
</head>
<body>
    <!-- 移动端菜单切换按钮 -->
    <button class="mobile-menu-toggle" onclick="toggleSidebar()">
        <i class="fas fa-bars"></i>
    </button>

    <!-- 遮罩层 -->
    <div class="sidebar-overlay" onclick="closeSidebar()"></div>

    <div class="container-fluid">
        <div class="row">
            <!-- 侧边栏 -->
            <div class="col-md-3 col-lg-2 sidebar p-0">
                <div class="p-4">
                    <h4 class="text-white mb-4">
                        <i class="fas fa-cogs me-2"></i>
                        内容管理
                    </h4>
                    <nav class="nav flex-column">
                        <a class="nav-link active" href="#" onclick="showSection('dashboard', event)">
                            <i class="fas fa-tachometer-alt me-2"></i>仪表板
                        </a>
                        <a class="nav-link" href="#" onclick="showSection('products', event)">
                            <i class="fas fa-box me-2"></i>产品管理
                        </a>
                        <a class="nav-link" href="#" onclick="showSection('suppliers', event)">
                            <i class="fas fa-truck me-2"></i>供应商管理
                        </a>
                        <a class="nav-link" href="#" onclick="showSection('categories', event)">
                            <i class="fas fa-tags me-2"></i>产品分类
                        </a>
                        <a class="nav-link" href="#" onclick="showSection('news', event)">
                            <i class="fas fa-newspaper me-2"></i>资讯管理
                        </a>
                        <a class="nav-link" href="#" onclick="showSection('cases', event)">
                            <i class="fas fa-briefcase me-2"></i>案例管理
                        </a>
                        <a class="nav-link" href="#" onclick="showSection('applications', event)">
                            <i class="fas fa-puzzle-piece me-2"></i>应用领域
                        </a>
                        <a class="nav-link" href="#" onclick="showSection('media', event)">
                            <i class="fas fa-images me-2"></i>媒体库
                        </a>
                        <a class="nav-link" href="#" onclick="showSection('settings', event)">
                            <i class="fas fa-cog me-2"></i>系统设置
                        </a>
                    </nav>
                </div>
            </div>

            <!-- 主内容区 -->
            <div class="col-md-9 col-lg-10 main-content p-0">
                <div class="p-4">
                    <!-- 页面标题 -->
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div>
                            <h2 id="pageTitle">仪表板</h2>
                            <div id="syncStatus" class="mt-1">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    访问后台即可同步前台数据
                                </small>
                            </div>
                        </div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-primary" onclick="refreshData()">
                                <i class="fas fa-sync-alt me-1"></i>刷新数据
                            </button>
                            <button class="btn btn-success" onclick="syncToFrontend()">
                                <i class="fas fa-cloud-upload-alt me-1"></i>同步到前台
                            </button>
                        </div>
                    </div>

                    <!-- 加载状态 -->
                    <div class="loading-spinner" id="loadingSpinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">加载中...</span>
                        </div>
                        <p class="mt-3">正在加载数据...</p>
                    </div>

                    <!-- 错误消息 -->
                    <div class="error-message" id="errorMessage">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <span id="errorText"></span>
                    </div>

                    <!-- 成功消息 -->
                    <div class="success-message" id="successMessage">
                        <i class="fas fa-check-circle me-2"></i>
                        <span id="successText"></span>
                    </div>

                    <!-- 仪表板 -->
                    <div id="dashboard" class="content-section active">
                        <div class="row mb-4">
                            <div class="col-md-3 mb-3">
                                <div class="stats-card">
                                    <div class="d-flex align-items-center">
                                        <div class="stats-icon" style="background: linear-gradient(135deg, #667eea, #764ba2);">
                                            <i class="fas fa-box"></i>
                                        </div>
                                        <div class="ms-3">
                                            <h6 class="text-muted mb-1">产品总数</h6>
                                            <h4 class="mb-0" id="productCount">0</h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <div class="stats-card">
                                    <div class="d-flex align-items-center">
                                        <div class="stats-icon" style="background: linear-gradient(135deg, #f093fb, #f5576c);">
                                            <i class="fas fa-truck"></i>
                                        </div>
                                        <div class="ms-3">
                                            <h6 class="text-muted mb-1">供应商</h6>
                                            <h4 class="mb-0" id="supplierCount">0</h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <div class="stats-card">
                                    <div class="d-flex align-items-center">
                                        <div class="stats-icon" style="background: linear-gradient(135deg, #4facfe, #00f2fe);">
                                            <i class="fas fa-newspaper"></i>
                                        </div>
                                        <div class="ms-3">
                                            <h6 class="text-muted mb-1">资讯文章</h6>
                                            <h4 class="mb-0" id="newsCount">0</h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <div class="stats-card">
                                    <div class="d-flex align-items-center">
                                        <div class="stats-icon" style="background: linear-gradient(135deg, #fa709a, #fee140);">
                                            <i class="fas fa-briefcase"></i>
                                        </div>
                                        <div class="ms-3">
                                            <h6 class="text-muted mb-1">应用案例</h6>
                                            <h4 class="mb-0" id="caseCount">0</h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 最近活动 -->
                        <div class="table-container">
                            <h5 class="mb-3">
                                <i class="fas fa-clock me-2"></i>最近活动
                            </h5>
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>时间</th>
                                            <th>类型</th>
                                            <th>标题</th>
                                            <th>状态</th>
                                            <th>操作</th>
                                        </tr>
                                    </thead>
                                    <tbody id="recentActivities">
                                        <tr>
                                            <td colspan="5" class="text-center text-muted">暂无数据</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <!-- 产品管理 -->
                    <div id="products" class="content-section">
                        <div class="table-container">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5>
                                    <i class="fas fa-box me-2"></i>产品列表
                                </h5>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-warning" onclick="forceReloadProductData()" title="强制重新加载产品数据">
                                        <i class="fas fa-exclamation-triangle me-1"></i>强制重载
                                    </button>
                                    <button class="btn btn-outline-info" onclick="loadProjectData()" title="重新加载数据">
                                        <i class="fas fa-refresh me-1"></i>刷新数据
                                    </button>
                                    <button class="btn btn-success" onclick="addProduct()">
                                        <i class="fas fa-plus me-1"></i>添加产品
                                    </button>
                                </div>
                            </div>

                            <!-- 高级过滤器 -->
                            <div class="row mb-3">
                                <div class="col-md-3">
                                    <input type="text" class="form-control search-box" placeholder="搜索产品名称、型号..." id="productSearch" onkeyup="filterProducts()">
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="supplierFilter" onchange="filterProducts()">
                                        <option value="">所有供应商</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="categoryFilter" onchange="filterProducts()">
                                        <option value="">所有分类</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="seriesFilter" onchange="filterProducts()">
                                        <option value="">所有系列</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="statusFilter" onchange="filterProducts()">
                                        <option value="">所有状态</option>
                                        <option value="published">已发布</option>
                                        <option value="draft">草稿</option>
                                    </select>
                                </div>
                                <div class="col-md-1">
                                    <button class="btn btn-outline-secondary" onclick="clearFilters()" title="清除筛选">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>产品名称</th>
                                            <th>型号</th>
                                            <th>分类</th>
                                            <th>供应商</th>
                                            <th>状态</th>
                                            <th>日期</th>
                                            <th>操作</th>
                                        </tr>
                                    </thead>
                                    <tbody id="productList">
                                        <tr>
                                            <td colspan="7" class="text-center text-muted">正在加载数据...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <!-- 产品分页 -->
                            <nav aria-label="产品分页" class="mt-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted" id="productPaginationInfo">显示 0 个产品</small>
                                    <ul class="pagination pagination-sm mb-0" id="productPagination">
                                        <!-- 分页按钮将由JavaScript生成 -->
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </div>

                    <!-- 供应商管理 -->
                    <div id="suppliers" class="content-section">
                        <div class="table-container">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5>
                                    <i class="fas fa-truck me-2"></i>供应商管理
                                </h5>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-info" onclick="refreshData('suppliers')">
                                        <i class="fas fa-refresh me-1"></i>刷新数据
                                    </button>
                                    <button class="btn btn-success" onclick="showSupplierModal()">
                                        <i class="fas fa-plus me-1"></i>添加供应商
                                    </button>
                                </div>
                            </div>

                            <!-- 搜索和过滤 -->
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <input type="text" class="form-control" placeholder="搜索供应商名称..." id="supplierSearch" onkeyup="filterSuppliers()">
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="supplierStatusFilter" onchange="filterSuppliers()">
                                        <option value="">所有状态</option>
                                        <option value="active">活跃</option>
                                        <option value="inactive">停用</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <button class="btn btn-outline-secondary w-100" onclick="clearSupplierFilters()">
                                        <i class="fas fa-times me-1"></i>清除
                                    </button>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>供应商名称</th>
                                            <th>联系人</th>
                                            <th>联系电话</th>
                                            <th>邮箱</th>
                                            <th>地址</th>
                                            <th>产品数量</th>
                                            <th>状态</th>
                                            <th>创建日期</th>
                                            <th>操作</th>
                                        </tr>
                                    </thead>
                                    <tbody id="supplierList">
                                        <tr>
                                            <td colspan="9" class="text-center text-muted">正在加载数据...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <!-- 供应商分页 -->
                            <nav aria-label="供应商分页" class="mt-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted" id="supplierPaginationInfo">显示 0 个供应商</small>
                                    <ul class="pagination pagination-sm mb-0" id="supplierPagination">
                                        <!-- 分页按钮将由JavaScript生成 -->
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </div>

                    <!-- 产品分类管理 -->
                    <div id="categories" class="content-section">
                        <div class="table-container">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5>
                                    <i class="fas fa-tags me-2"></i>产品分类
                                </h5>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-info" onclick="refreshData('categories')">
                                        <i class="fas fa-refresh me-1"></i>刷新数据
                                    </button>
                                    <button class="btn btn-success" onclick="showCategoryModal()">
                                        <i class="fas fa-plus me-1"></i>添加分类
                                    </button>
                                </div>
                            </div>

                            <!-- 搜索和过滤 -->
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <input type="text" class="form-control" placeholder="搜索分类名称..." id="categorySearch" onkeyup="filterCategories()">
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="categoryTypeFilter" onchange="filterCategories()">
                                        <option value="">所有类型</option>
                                        <option value="primary">主要分类</option>
                                        <option value="secondary">次要分类</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <button class="btn btn-outline-secondary w-100" onclick="clearCategoryFilters()">
                                        <i class="fas fa-times me-1"></i>清除
                                    </button>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>分类名称</th>
                                            <th>分类类型</th>
                                            <th>父级分类</th>
                                            <th>产品数量</th>
                                            <th>描述</th>
                                            <th>状态</th>
                                            <th>创建日期</th>
                                            <th>操作</th>
                                        </tr>
                                    </thead>
                                    <tbody id="categoryList">
                                        <tr>
                                            <td colspan="8" class="text-center text-muted">正在加载数据...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <!-- 分类分页 -->
                            <nav aria-label="分类分页" class="mt-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted" id="categoryPaginationInfo">显示 0 个分类</small>
                                    <ul class="pagination pagination-sm mb-0" id="categoryPagination">
                                        <!-- 分页按钮将由JavaScript生成 -->
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </div>

                    <!-- 资讯管理 -->
                    <div id="news" class="content-section">
                        <div class="table-container">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5>
                                    <i class="fas fa-newspaper me-2"></i>资讯管理
                                </h5>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-info" onclick="refreshData('news')">
                                        <i class="fas fa-refresh me-1"></i>刷新数据
                                    </button>
                                    <button class="btn btn-success" onclick="showNewsModal()">
                                        <i class="fas fa-plus me-1"></i>添加资讯
                                    </button>
                                </div>
                            </div>

                            <!-- 搜索和过滤 -->
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <input type="text" class="form-control" placeholder="搜索资讯标题、内容..." id="newsSearch" onkeyup="filterNews()">
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="newsCategoryFilter" onchange="filterNews()">
                                        <option value="">所有分类</option>
                                        <option value="行业动态">行业动态</option>
                                        <option value="技术资讯">技术资讯</option>
                                        <option value="产品发布">产品发布</option>
                                        <option value="展会信息">展会信息</option>
                                        <option value="其他">其他</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="newsStatusFilter" onchange="filterNews()">
                                        <option value="">所有状态</option>
                                        <option value="published">已发布</option>
                                        <option value="draft">草稿</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <button class="btn btn-outline-secondary w-100" onclick="clearNewsFilters()">
                                        <i class="fas fa-times me-1"></i>清除
                                    </button>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>标题</th>
                                            <th>分类</th>
                                            <th>作者</th>
                                            <th>摘要</th>
                                            <th>特色图片</th>
                                            <th>浏览量</th>
                                            <th>状态</th>
                                            <th>发布日期</th>
                                            <th>操作</th>
                                        </tr>
                                    </thead>
                                    <tbody id="newsList">
                                        <tr>
                                            <td colspan="9" class="text-center text-muted">正在加载数据...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <!-- 资讯分页 -->
                            <nav aria-label="资讯分页" class="mt-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted" id="newsPaginationInfo">显示 0 篇资讯</small>
                                    <ul class="pagination pagination-sm mb-0" id="newsPagination">
                                        <!-- 分页按钮将由JavaScript生成 -->
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </div>

                    <!-- 案例管理 -->
                    <div id="cases" class="content-section">
                        <div class="table-container">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5>
                                    <i class="fas fa-briefcase me-2"></i>案例管理
                                </h5>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-info" onclick="refreshData('cases')">
                                        <i class="fas fa-refresh me-1"></i>刷新数据
                                    </button>
                                    <button class="btn btn-success" onclick="showCaseModal()">
                                        <i class="fas fa-plus me-1"></i>添加案例
                                    </button>
                                </div>
                            </div>

                            <!-- 搜索和过滤 -->
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <input type="text" class="form-control" placeholder="搜索案例标题、客户..." id="caseSearch" onkeyup="filterCases()">
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="caseIndustryFilter" onchange="filterCases()">
                                        <option value="">所有行业</option>
                                        <option value="汽车制造">汽车制造</option>
                                        <option value="航空航天">航空航天</option>
                                        <option value="电力能源">电力能源</option>
                                        <option value="石油化工">石油化工</option>
                                        <option value="机械制造">机械制造</option>
                                        <option value="其他">其他</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="caseStatusFilter" onchange="filterCases()">
                                        <option value="">所有状态</option>
                                        <option value="published">已发布</option>
                                        <option value="draft">草稿</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <button class="btn btn-outline-secondary w-100" onclick="clearCaseFilters()">
                                        <i class="fas fa-times me-1"></i>清除
                                    </button>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>案例标题</th>
                                            <th>客户</th>
                                            <th>行业</th>
                                            <th>应用领域</th>
                                            <th>检测对象</th>
                                            <th>使用设备</th>
                                            <th>状态</th>
                                            <th>创建日期</th>
                                            <th>操作</th>
                                        </tr>
                                    </thead>
                                    <tbody id="caseList">
                                        <tr>
                                            <td colspan="9" class="text-center text-muted">正在加载数据...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <!-- 案例分页 -->
                            <nav aria-label="案例分页" class="mt-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted" id="casePaginationInfo">显示 0 个案例</small>
                                    <ul class="pagination pagination-sm mb-0" id="casePagination">
                                        <!-- 分页按钮将由JavaScript生成 -->
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </div>

                    <!-- 应用领域管理 -->
                    <div id="applications" class="content-section">
                        <div class="table-container">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5>
                                    <i class="fas fa-puzzle-piece me-2"></i>应用领域管理
                                </h5>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-outline-info" onclick="refreshData('applications')">
                                        <i class="fas fa-refresh me-1"></i>刷新数据
                                    </button>
                                    <button class="btn btn-success" onclick="showApplicationModal()">
                                        <i class="fas fa-plus me-1"></i>添加应用领域
                                    </button>
                                </div>
                            </div>

                            <!-- 搜索和过滤 -->
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <input type="text" class="form-control" placeholder="搜索应用领域名称..." id="applicationSearch" onkeyup="filterApplications()">
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="applicationCategoryFilter" onchange="filterApplications()">
                                        <option value="">所有分类</option>
                                        <option value="工业检测">工业检测</option>
                                        <option value="医疗诊断">医疗诊断</option>
                                        <option value="安全检查">安全检查</option>
                                        <option value="科研教育">科研教育</option>
                                        <option value="其他">其他</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <select class="form-select" id="applicationStatusFilter" onchange="filterApplications()">
                                        <option value="">所有状态</option>
                                        <option value="published">已发布</option>
                                        <option value="draft">草稿</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <button class="btn btn-outline-secondary w-100" onclick="clearApplicationFilters()">
                                        <i class="fas fa-times me-1"></i>清除
                                    </button>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>应用领域</th>
                                            <th>分类</th>
                                            <th>描述</th>
                                            <th>特点数量</th>
                                            <th>技术数量</th>
                                            <th>权重</th>
                                            <th>状态</th>
                                            <th>创建日期</th>
                                            <th>操作</th>
                                        </tr>
                                    </thead>
                                    <tbody id="applicationList">
                                        <tr>
                                            <td colspan="9" class="text-center text-muted">正在加载数据...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <!-- 应用领域分页 -->
                            <nav aria-label="应用领域分页" class="mt-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted" id="applicationPaginationInfo">显示 0 个应用领域</small>
                                    <ul class="pagination pagination-sm mb-0" id="applicationPagination">
                                        <!-- 分页按钮将由JavaScript生成 -->
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </div>

                    <!-- 媒体库管理 -->
                    <div id="media" class="content-section">
                        <div class="table-container">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5>
                                    <i class="fas fa-images me-2"></i>媒体库
                                </h5>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-primary" onclick="uploadMedia()">
                                        <i class="fas fa-upload me-1"></i>上传文件
                                    </button>
                                    <button class="btn btn-outline-secondary" onclick="createFolder()">
                                        <i class="fas fa-folder-plus me-1"></i>新建文件夹
                                    </button>
                                </div>
                            </div>

                            <!-- 媒体库工具栏 -->
                            <div class="row mb-3">
                                <div class="col-md-3">
                                    <select class="form-select" id="mediaFolderFilter" onchange="filterMedia()">
                                        <option value="">所有文件夹</option>
                                        <option value="products">产品图片</option>
                                        <option value="news">资讯图片</option>
                                        <option value="cases">案例图片</option>
                                        <option value="documents">文档资料</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <select class="form-select" id="mediaTypeFilter" onchange="filterMedia()">
                                        <option value="">所有类型</option>
                                        <option value="image">图片</option>
                                        <option value="document">文档</option>
                                        <option value="video">视频</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <input type="text" class="form-control search-box" placeholder="搜索文件名..." id="mediaSearch" onkeyup="filterMedia()">
                                </div>
                                <div class="col-md-2">
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-outline-secondary active" onclick="setMediaView('grid')" title="网格视图">
                                            <i class="fas fa-th"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary" onclick="setMediaView('list')" title="列表视图">
                                            <i class="fas fa-list"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- 媒体文件网格 -->
                            <div id="mediaGrid" class="row">
                                <div class="col-12 text-center text-muted py-5">
                                    <i class="fas fa-images fa-3x mb-3"></i>
                                    <p>暂无媒体文件</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 系统设置 -->
                    <div id="settings" class="content-section">
                        <div class="table-container">
                            <h5>
                                <i class="fas fa-cog me-2"></i>系统设置
                            </h5>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h6 class="mb-0">数据管理</h6>
                                        </div>
                                        <div class="card-body">
                                            <button class="btn btn-primary mb-2 w-100" onclick="exportData()">
                                                <i class="fas fa-download me-1"></i>导出数据
                                            </button>
                                            <button class="btn btn-warning mb-2 w-100" onclick="importData()">
                                                <i class="fas fa-upload me-1"></i>导入数据
                                            </button>
                                            <button class="btn btn-info w-100" onclick="refreshData()">
                                                <i class="fas fa-sync-alt me-1"></i>刷新缓存
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h6 class="mb-0">系统信息</h6>
                                        </div>
                                        <div class="card-body">
                                            <p><strong>版本:</strong> v1.0.0</p>
                                            <p><strong>最后更新:</strong> <span id="lastUpdate">-</span></p>
                                            <p><strong>数据状态:</strong> <span id="dataStatus" class="badge bg-success">正常</span></p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 资讯编辑模态框 -->
    <div class="modal fade" id="newsModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newsModalTitle">添加资讯</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="newsForm">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label class="form-label">资讯标题 *</label>
                                    <input type="text" class="form-control" id="newsTitle" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">资讯摘要 *</label>
                                    <textarea class="form-control" id="newsSummary" rows="3" required></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">资讯内容 *</label>
                                    <textarea class="form-control" id="newsContent" rows="15" required></textarea>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">分类</label>
                                    <select class="form-select" id="newsCategory">
                                        <option value="行业动态">行业动态</option>
                                        <option value="技术资讯">技术资讯</option>
                                        <option value="产品发布">产品发布</option>
                                        <option value="展会信息">展会信息</option>
                                        <option value="其他">其他</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">作者</label>
                                    <input type="text" class="form-control" id="newsAuthor" value="编辑部">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">发布日期</label>
                                    <input type="date" class="form-control" id="newsDate">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">状态</label>
                                    <select class="form-select" id="newsStatus">
                                        <option value="draft">草稿</option>
                                        <option value="published">已发布</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">标签</label>
                                    <input type="text" class="form-control" id="newsTags" placeholder="用逗号分隔多个标签">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">特色图片URL</label>
                                    <input type="url" class="form-control" id="newsFeaturedImage" placeholder="图片链接">
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-info" onclick="previewNews()">预览</button>
                    <button type="button" class="btn btn-warning" onclick="exportNewsMarkdown()">导出MD</button>
                    <button type="button" class="btn btn-primary" onclick="saveNews()">保存资讯</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 案例编辑模态框 -->
    <div class="modal fade" id="caseModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="caseModalTitle">添加案例</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="caseForm">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label class="form-label">案例标题 *</label>
                                    <input type="text" class="form-control" id="caseTitle" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">案例摘要 *</label>
                                    <textarea class="form-control" id="caseSummary" rows="3" required></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">案例内容 *</label>
                                    <textarea class="form-control" id="caseContent" rows="15" required></textarea>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">主要分类</label>
                                    <input type="text" class="form-control" id="casePrimaryCategory" placeholder="如：电子视频内窥镜">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">应用领域</label>
                                    <input type="text" class="form-control" id="caseApplicationField" placeholder="如：汽车制造">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">应用场景</label>
                                    <input type="text" class="form-control" id="caseApplicationScenario" placeholder="如：发动机检测">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">客户</label>
                                    <input type="text" class="form-control" id="caseClient" placeholder="客户名称">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">行业</label>
                                    <input type="text" class="form-control" id="caseIndustry" placeholder="所属行业">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">检测对象</label>
                                    <input type="text" class="form-control" id="caseDetectionObject" placeholder="检测的具体对象">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">使用设备</label>
                                    <input type="text" class="form-control" id="caseEquipmentUsed" placeholder="使用的设备型号">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">特色图片URL</label>
                                    <input type="url" class="form-control" id="caseFeaturedImage" placeholder="图片链接">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">状态</label>
                                    <select class="form-select" id="caseStatus">
                                        <option value="draft">草稿</option>
                                        <option value="published">已发布</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-info" onclick="previewCase()">预览</button>
                    <button type="button" class="btn btn-warning" onclick="exportCaseMarkdown()">导出MD</button>
                    <button type="button" class="btn btn-primary" onclick="saveCase()">保存案例</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 应用领域编辑模态框 -->
    <div class="modal fade" id="applicationModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="applicationModalTitle">添加应用领域</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="applicationForm">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label class="form-label">应用领域标题 *</label>
                                    <input type="text" class="form-control" id="applicationTitle" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">应用摘要 *</label>
                                    <textarea class="form-control" id="applicationSummary" rows="3" required></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">应用内容 *</label>
                                    <textarea class="form-control" id="applicationContent" rows="15" required></textarea>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">图标</label>
                                    <input type="text" class="form-control" id="applicationIcon" placeholder="如：fas fa-plane">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">应用特点</label>
                                    <textarea class="form-control" id="applicationFeatures" rows="4" placeholder="每行一个特点"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">关键技术</label>
                                    <textarea class="form-control" id="applicationKeyTechnologies" rows="4" placeholder="每行一个技术"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">权重</label>
                                    <input type="number" class="form-control" id="applicationWeight" value="1" min="1">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">应用图片URL</label>
                                    <input type="url" class="form-control" id="applicationImage" placeholder="图片链接">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">状态</label>
                                    <select class="form-select" id="applicationStatus">
                                        <option value="draft">草稿</option>
                                        <option value="published">已发布</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-info" onclick="previewApplication()">预览</button>
                    <button type="button" class="btn btn-warning" onclick="exportApplicationMarkdown()">导出MD</button>
                    <button type="button" class="btn btn-primary" onclick="saveApplication()">保存应用领域</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 高级产品编辑模态框 -->
    <div class="modal fade" id="productModal" tabindex="-1">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalTitle">
                        <i class="fas fa-box me-2"></i>添加产品
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" style="max-height: 80vh; overflow-y: auto;">
                    <form id="productForm">
                        <!-- 基本信息 -->
                        <div class="form-section">
                            <h3 class="section-title">基本信息</h3>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">产品标题 *</label>
                                        <input type="text" class="form-control" id="productTitle" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">产品型号 *</label>
                                        <input type="text" class="form-control" id="productModel" required>
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">产品摘要 *</label>
                                <textarea class="form-control" id="productSummary" rows="3" required placeholder="简要描述产品特点和用途"></textarea>
                            </div>
                        </div>

                        <!-- 分类和供应商关联 -->
                        <div class="form-section">
                            <h3 class="section-title">分类与供应商</h3>

                            <!-- 分类层级选择 -->
                            <div class="category-hierarchy">
                                <div class="row">
                                    <div class="col-md-6">
                                        <label class="form-label">主要分类 *</label>
                                        <select class="form-select" id="productPrimaryCategory" onchange="updateSecondaryCategories()">
                                            <option value="">选择主要分类</option>
                                            <!-- 动态加载的分类选项 -->
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">次要分类</label>
                                        <select class="form-select" id="productSecondaryCategory">
                                            <option value="">选择次要分类</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <!-- 供应商选择 -->
                            <div class="supplier-series-container">
                                <div class="row">
                                    <div class="col-md-6">
                                        <label class="form-label">供应商 *</label>
                                        <select class="form-select" id="productSupplier" onchange="updateSeriesOptions()">
                                            <option value="">选择供应商</option>
                                            <!-- 动态加载的供应商选项 -->
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">产品系列</label>
                                        <select class="form-select" id="productSeries">
                                            <option value="">选择产品系列</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 产品参数 -->
                        <div class="form-section">
                            <h3 class="section-title">产品参数</h3>
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <p class="text-muted mb-0">配置产品的技术参数</p>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="loadDefaultParameters()">
                                        <i class="fas fa-magic me-1"></i>加载默认模板
                                    </button>
                                    <button type="button" class="btn btn-outline-success btn-sm" onclick="addParameter()">
                                        <i class="fas fa-plus me-1"></i>添加参数
                                    </button>
                                </div>
                            </div>
                            <div id="parametersContainer">
                                <!-- 参数将在这里动态生成 -->
                            </div>
                        </div>

                        <!-- 产品图片库 -->
                        <div class="form-section">
                            <h3 class="section-title">产品图片</h3>
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <p class="text-muted mb-0">管理产品图片，第一张将作为主图</p>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="uploadLocalImage()">
                                        <i class="fas fa-upload me-1"></i>上传本地图片
                                    </button>
                                    <button type="button" class="btn btn-outline-info btn-sm" onclick="selectFromMediaLibrary()">
                                        <i class="fas fa-images me-1"></i>从媒体库选择
                                    </button>
                                </div>
                            </div>
                            <div id="galleryContainer" class="row">
                                <!-- 图片将在这里动态生成 -->
                            </div>
                        </div>

                        <!-- 产品详细描述 -->
                        <div class="form-section">
                            <h3 class="section-title">产品详细描述</h3>
                            <div class="editor-container">
                                <div id="productContentEditor" style="min-height: 300px;"></div>
                            </div>
                        </div>

                        <!-- 应用场景 -->
                        <div class="form-section">
                            <h3 class="section-title">应用场景</h3>
                            <div class="editor-container">
                                <div id="applicationScenariosEditor" style="min-height: 300px;"></div>
                            </div>
                        </div>

                        <!-- 相关产品 -->
                        <div class="form-section">
                            <h3 class="section-title">相关产品</h3>
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <p class="text-muted mb-0">选择与当前产品相关的其他产品</p>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-outline-success btn-sm" onclick="forceRefreshRelatedProducts()">
                                        <i class="fas fa-refresh me-1"></i>刷新
                                    </button>
                                    <button type="button" class="btn btn-outline-info btn-sm" onclick="debugRelatedProducts()">
                                        <i class="fas fa-bug me-1"></i>调试
                                    </button>
                                </div>
                            </div>
                            <div class="related-products-container">
                                <div class="row">
                                    <div class="col-md-6">
                                        <label class="form-label">供应商</label>
                                        <select class="form-select" id="relatedSupplier" onchange="updateRelatedProducts()">
                                            <option value="">选择供应商</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">相关产品</label>
                                        <select class="form-select" id="relatedProduct" onchange="addRelatedProduct()">
                                            <option value="">选择产品</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <div id="selectedRelatedProducts">
                                        <!-- 已选择的相关产品将在这里显示 -->
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 数据下载 -->
                        <div class="form-section">
                            <h3 class="section-title">数据下载</h3>
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <p class="text-muted mb-0">添加产品相关的下载文件</p>
                                <button type="button" class="btn btn-outline-success btn-sm" onclick="addDownloadFile()">
                                    <i class="fas fa-plus me-1"></i>添加下载文件
                                </button>
                            </div>
                            <div id="downloadFilesContainer">
                                <!-- 下载文件将在这里动态生成 -->
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i>取消
                    </button>
                    <button type="button" class="btn btn-info" onclick="previewProduct()">
                        <i class="fas fa-eye me-1"></i>预览
                    </button>
                    <button type="button" class="btn btn-warning" onclick="exportProductMarkdown()">
                        <i class="fas fa-download me-1"></i>导出MD
                    </button>
                    <button type="button" class="btn btn-primary" onclick="saveProduct()">
                        <i class="fas fa-save me-1"></i>保存产品
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- 供应商编辑模态框 -->
    <div class="modal fade" id="supplierModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="supplierModalTitle">
                        <i class="fas fa-truck me-2"></i>添加供应商
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="supplierForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">供应商名称 *</label>
                                    <input type="text" class="form-control" id="supplierName" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">联系人 *</label>
                                    <input type="text" class="form-control" id="supplierContact" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">联系电话 *</label>
                                    <input type="tel" class="form-control" id="supplierPhone" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">邮箱</label>
                                    <input type="email" class="form-control" id="supplierEmail">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">公司地址</label>
                                    <textarea class="form-control" id="supplierAddress" rows="3"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">公司网站</label>
                                    <input type="url" class="form-control" id="supplierWebsite">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">状态</label>
                                    <select class="form-select" id="supplierStatus">
                                        <option value="active">活跃</option>
                                        <option value="inactive">停用</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">公司简介</label>
                            <textarea class="form-control" id="supplierDescription" rows="4"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-primary" onclick="saveSupplier()">保存供应商</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 分类编辑模态框 -->
    <div class="modal fade" id="categoryModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="categoryModalTitle">
                        <i class="fas fa-tags me-2"></i>添加分类
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="categoryForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">分类名称 *</label>
                                    <input type="text" class="form-control" id="categoryName" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">分类类型 *</label>
                                    <select class="form-select" id="categoryType" onchange="updateParentCategoryOptions()" required>
                                        <option value="">选择分类类型</option>
                                        <option value="primary">主要分类</option>
                                        <option value="secondary">次要分类</option>
                                    </select>
                                </div>
                                <div class="mb-3" id="parentCategoryGroup" style="display: none;">
                                    <label class="form-label">父级分类</label>
                                    <select class="form-select" id="categoryParent">
                                        <option value="">选择父级分类</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">分类图标</label>
                                    <input type="text" class="form-control" id="categoryIcon" placeholder="如：fas fa-box">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">排序权重</label>
                                    <input type="number" class="form-control" id="categoryWeight" value="1" min="1">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">状态</label>
                                    <select class="form-select" id="categoryStatus">
                                        <option value="active">启用</option>
                                        <option value="inactive">禁用</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">分类描述</label>
                            <textarea class="form-control" id="categoryDescription" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-primary" onclick="saveCategory()">保存分类</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 资讯编辑模态框 -->
    <div class="modal fade" id="newsModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newsModalTitle">
                        <i class="fas fa-newspaper me-2"></i>添加资讯
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="newsForm">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label class="form-label">资讯标题 *</label>
                                    <input type="text" class="form-control" id="newsTitle" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">资讯摘要 *</label>
                                    <textarea class="form-control" id="newsSummary" rows="3" required></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">资讯内容 *</label>
                                    <div id="newsContentEditor" style="min-height: 300px;"></div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">分类 *</label>
                                    <select class="form-select" id="newsCategory" required>
                                        <option value="">选择分类</option>
                                        <option value="行业动态">行业动态</option>
                                        <option value="技术资讯">技术资讯</option>
                                        <option value="产品发布">产品发布</option>
                                        <option value="展会信息">展会信息</option>
                                        <option value="其他">其他</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">作者</label>
                                    <input type="text" class="form-control" id="newsAuthor" value="编辑部">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">特色图片</label>
                                    <div class="input-group">
                                        <input type="url" class="form-control" id="newsFeaturedImage" placeholder="图片URL">
                                        <button type="button" class="btn btn-outline-primary" onclick="selectNewsImage()">
                                            <i class="fas fa-images"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">标签</label>
                                    <input type="text" class="form-control" id="newsTags" placeholder="用逗号分隔多个标签">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">状态</label>
                                    <select class="form-select" id="newsStatus">
                                        <option value="draft">草稿</option>
                                        <option value="published">已发布</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">发布日期</label>
                                    <input type="date" class="form-control" id="newsDate">
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-info" onclick="previewNews()">预览</button>
                    <button type="button" class="btn btn-warning" onclick="exportNewsMarkdown()">导出MD</button>
                    <button type="button" class="btn btn-primary" onclick="saveNews()">保存资讯</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 案例编辑模态框 -->
    <div class="modal fade" id="caseModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="caseModalTitle">
                        <i class="fas fa-briefcase me-2"></i>添加案例
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="caseForm">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label class="form-label">案例标题 *</label>
                                    <input type="text" class="form-control" id="caseTitle" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">案例摘要 *</label>
                                    <textarea class="form-control" id="caseSummary" rows="3" required></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">案例详情 *</label>
                                    <div id="caseContentEditor" style="min-height: 300px;"></div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">主要分类</label>
                                    <select class="form-select" id="casePrimaryCategory">
                                        <option value="">选择主要分类</option>
                                        <option value="电子内窥镜">电子内窥镜</option>
                                        <option value="光纤内窥镜">光纤内窥镜</option>
                                        <option value="其他">其他</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">应用领域</label>
                                    <input type="text" class="form-control" id="caseApplicationField" placeholder="如：汽车制造">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">应用场景</label>
                                    <input type="text" class="form-control" id="caseApplicationScenario" placeholder="如：发动机检测">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">客户</label>
                                    <input type="text" class="form-control" id="caseClient" placeholder="客户名称">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">行业</label>
                                    <select class="form-select" id="caseIndustry">
                                        <option value="">选择行业</option>
                                        <option value="汽车制造">汽车制造</option>
                                        <option value="航空航天">航空航天</option>
                                        <option value="电力能源">电力能源</option>
                                        <option value="石油化工">石油化工</option>
                                        <option value="机械制造">机械制造</option>
                                        <option value="其他">其他</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">检测对象</label>
                                    <input type="text" class="form-control" id="caseDetectionObject" placeholder="如：发动机缸体">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">使用设备</label>
                                    <input type="text" class="form-control" id="caseEquipmentUsed" placeholder="如：WS-K1210">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">案例图片</label>
                                    <div class="input-group">
                                        <input type="url" class="form-control" id="caseFeaturedImage" placeholder="图片URL">
                                        <button type="button" class="btn btn-outline-primary" onclick="selectCaseImage()">
                                            <i class="fas fa-images"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">状态</label>
                                    <select class="form-select" id="caseStatus">
                                        <option value="draft">草稿</option>
                                        <option value="published">已发布</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-info" onclick="previewCase()">预览</button>
                    <button type="button" class="btn btn-warning" onclick="exportCaseMarkdown()">导出MD</button>
                    <button type="button" class="btn btn-primary" onclick="saveCase()">保存案例</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 应用领域编辑模态框 -->
    <div class="modal fade" id="applicationModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="applicationModalTitle">
                        <i class="fas fa-puzzle-piece me-2"></i>添加应用领域
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="applicationForm">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label class="form-label">应用领域名称 *</label>
                                    <input type="text" class="form-control" id="applicationName" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">领域描述 *</label>
                                    <textarea class="form-control" id="applicationDescription" rows="3" required></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">详细内容 *</label>
                                    <div id="applicationContentEditor" style="min-height: 300px;"></div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">分类 *</label>
                                    <select class="form-select" id="applicationCategory" required>
                                        <option value="">选择分类</option>
                                        <option value="工业检测">工业检测</option>
                                        <option value="医疗诊断">医疗诊断</option>
                                        <option value="安全检查">安全检查</option>
                                        <option value="科研教育">科研教育</option>
                                        <option value="其他">其他</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">应用特点</label>
                                    <textarea class="form-control" id="applicationFeatures" rows="4" placeholder="每行一个特点"></textarea>
                                    <small class="text-muted">每行输入一个特点，系统会自动分割</small>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">关键技术</label>
                                    <textarea class="form-control" id="applicationKeyTechnologies" rows="4" placeholder="每行一个技术"></textarea>
                                    <small class="text-muted">每行输入一个技术，系统会自动分割</small>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">权重</label>
                                    <input type="number" class="form-control" id="applicationWeight" value="1" min="1" max="100">
                                    <small class="text-muted">数值越小，排序越靠前</small>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">应用图片</label>
                                    <div class="input-group">
                                        <input type="url" class="form-control" id="applicationImage" placeholder="图片URL">
                                        <button type="button" class="btn btn-outline-primary" onclick="selectApplicationImage()">
                                            <i class="fas fa-images"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">状态</label>
                                    <select class="form-select" id="applicationStatus">
                                        <option value="draft">草稿</option>
                                        <option value="published">已发布</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="button" class="btn btn-info" onclick="previewApplication()">预览</button>
                    <button type="button" class="btn btn-warning" onclick="exportApplicationMarkdown()">导出MD</button>
                    <button type="button" class="btn btn-primary" onclick="saveApplication()">保存应用领域</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Quill富文本编辑器 -->
    <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
    <script>
        // 全局错误处理器
        window.addEventListener('error', function(e) {
            console.error('🚨 全局JavaScript错误:', e.error);
            console.error('📍 错误位置:', e.filename, '行:', e.lineno, '列:', e.colno);
            console.error('📝 错误消息:', e.message);
            console.error('📚 错误堆栈:', e.error ? e.error.stack : '无堆栈信息');
        });

        // 未处理的Promise错误
        window.addEventListener('unhandledrejection', function(e) {
            console.error('🚨 未处理的Promise错误:', e.reason);
        });

        // 测试函数
        function testMenuFunctions() {
            console.log('🧪 测试菜单功能...');

            // 测试showSection函数
            if (typeof showSection === 'function') {
                console.log('✅ showSection 函数存在');
                try {
                    showSection('dashboard');
                    console.log('✅ showSection 调用成功');
                } catch (error) {
                    console.error('❌ showSection 调用失败:', error);
                }
            } else {
                console.error('❌ showSection 函数不存在');
            }

            // 测试其他关键函数
            const functionsToTest = [
                'addProduct', 'refreshData', 'loadProjectData',
                'updateProductList', 'showSupplierModal', 'showCategoryModal',
                'editProduct', 'viewProduct', 'deleteProduct', 'clearProductForm',
                'initializeEditors', 'saveProduct'
            ];

            functionsToTest.forEach(funcName => {
                if (typeof window[funcName] === 'function') {
                    console.log(`✅ ${funcName} 函数存在`);
                } else {
                    console.error(`❌ ${funcName} 函数不存在`);
                }
            });

            // 测试菜单点击事件
            console.log('🧪 测试菜单点击事件...');
            const navLinks = document.querySelectorAll('.nav-link');
            navLinks.forEach((link, index) => {
                console.log(`菜单项 ${index}:`, link.textContent.trim(), 'onclick:', link.getAttribute('onclick'));
            });

            // 测试数据状态
            console.log('🧪 测试数据状态...');
            console.log('projectData:', projectData);
            console.log('projectData.products:', projectData.products);
            console.log('产品数量:', projectData.products ? projectData.products.length : 0);
            console.log('dataSyncManager:', typeof dataSyncManager);

            // 测试DOM元素
            console.log('🧪 测试关键DOM元素...');
            console.log('productModal:', document.getElementById('productModal'));
            console.log('productList:', document.getElementById('productList'));
            console.log('addProductBtn:', document.querySelector('[onclick*="addProduct"]'));
        }

        // 手动修复菜单点击事件
        function fixMenuEvents() {
            console.log('🔧 修复菜单点击事件...');

            const menuItems = [
                { selector: '[onclick*="dashboard"]', section: 'dashboard' },
                { selector: '[onclick*="products"]', section: 'products' },
                { selector: '[onclick*="suppliers"]', section: 'suppliers' },
                { selector: '[onclick*="categories"]', section: 'categories' },
                { selector: '[onclick*="news"]', section: 'news' },
                { selector: '[onclick*="cases"]', section: 'cases' },
                { selector: '[onclick*="applications"]', section: 'applications' },
                { selector: '[onclick*="media"]', section: 'media' },
                { selector: '[onclick*="settings"]', section: 'settings' }
            ];

            menuItems.forEach(item => {
                const element = document.querySelector(item.selector);
                if (element) {
                    // 移除原有的onclick属性
                    element.removeAttribute('onclick');

                    // 添加新的事件监听器
                    element.addEventListener('click', function(e) {
                        e.preventDefault();
                        console.log(`🖱️ 点击菜单: ${item.section}`);
                        showSection(item.section, e);
                    });

                    console.log(`✅ 修复菜单项: ${item.section}`);
                } else {
                    console.warn(`⚠️ 未找到菜单项: ${item.section}`);
                }
            });
        }

        // 修复所有按钮点击事件
        function fixAllButtonEvents() {
            console.log('🔧 修复所有按钮点击事件...');

            // 定义按钮修复映射
            const buttonFixes = [
                { selector: '[onclick*="addProduct()"]', func: 'addProduct', args: [] },
                { selector: '[onclick*="saveProduct()"]', func: 'saveProduct', args: [] },
                { selector: '[onclick*="refreshData()"]', func: 'refreshData', args: [] },
                { selector: '[onclick*="refreshData(\'products\')"]', func: 'refreshData', args: ['products'] },
                { selector: '[onclick*="refreshData(\'suppliers\')"]', func: 'refreshData', args: ['suppliers'] },
                { selector: '[onclick*="refreshData(\'categories\')"]', func: 'refreshData', args: ['categories'] },
                { selector: '[onclick*="refreshData(\'news\')"]', func: 'refreshData', args: ['news'] },
                { selector: '[onclick*="refreshData(\'cases\')"]', func: 'refreshData', args: ['cases'] },
                { selector: '[onclick*="refreshData(\'applications\')"]', func: 'refreshData', args: ['applications'] },
                { selector: '[onclick*="showSupplierModal()"]', func: 'showSupplierModal', args: [] },
                { selector: '[onclick*="showCategoryModal()"]', func: 'showCategoryModal', args: [] },
                { selector: '[onclick*="showNewsModal()"]', func: 'showNewsModal', args: [] },
                { selector: '[onclick*="showCaseModal()"]', func: 'showCaseModal', args: [] },
                { selector: '[onclick*="showApplicationModal()"]', func: 'showApplicationModal', args: [] },
                { selector: '[onclick*="loadProjectData()"]', func: 'loadProjectData', args: [] },
                { selector: '[onclick*="syncToFrontend()"]', func: 'syncToFrontend', args: [] },
                { selector: '[onclick*="exportData()"]', func: 'exportData', args: [] },
                { selector: '[onclick*="importData()"]', func: 'importData', args: [] },
                { selector: '[onclick*="uploadMedia()"]', func: 'uploadMedia', args: [] },
                { selector: '[onclick*="createFolder()"]', func: 'createFolder', args: [] }
            ];

            // 处理带参数的按钮（如editProduct, viewProduct, deleteProduct）
            const parameterizedButtons = document.querySelectorAll('[onclick*="editProduct("], [onclick*="viewProduct("], [onclick*="deleteProduct("]');
            parameterizedButtons.forEach(button => {
                const onclickAttr = button.getAttribute('onclick');
                if (onclickAttr) {
                    // 提取函数名和参数
                    const match = onclickAttr.match(/(\w+)\('([^']+)'\)/);
                    if (match) {
                        const funcName = match[1];
                        const param = match[2];

                        if (typeof window[funcName] === 'function') {
                            button.removeAttribute('onclick');
                            button.addEventListener('click', function(e) {
                                e.preventDefault();
                                console.log(`🖱️ 点击按钮: ${funcName}(${param})`);
                                try {
                                    window[funcName](param);
                                } catch (error) {
                                    console.error(`❌ 执行 ${funcName} 失败:`, error);
                                }
                            });
                            console.log(`✅ 修复参数化按钮: ${funcName}(${param})`);
                        }
                    }
                }
            });

            buttonFixes.forEach(fix => {
                const elements = document.querySelectorAll(fix.selector);
                elements.forEach(element => {
                    if (element && typeof window[fix.func] === 'function') {
                        // 移除原有的onclick属性
                        element.removeAttribute('onclick');

                        // 添加新的事件监听器
                        element.addEventListener('click', function(e) {
                            e.preventDefault();
                            console.log(`🖱️ 点击按钮: ${fix.func}`);
                            try {
                                window[fix.func].apply(null, fix.args);
                            } catch (error) {
                                console.error(`❌ 执行 ${fix.func} 失败:`, error);
                            }
                        });

                        console.log(`✅ 修复按钮: ${fix.func}`);
                    }
                });
            });
        }

        // 专门测试产品功能
        function testProductFunctions() {
            console.log('🧪 测试产品管理功能...');

            // 测试产品数据加载
            console.log('📦 产品数据状态:');
            console.log('- projectData:', projectData);
            console.log('- projectData.products:', projectData.products);
            console.log('- 产品数量:', projectData.products ? projectData.products.length : 0);

            // 测试产品相关DOM元素
            console.log('🔍 产品相关DOM元素:');
            const productElements = {
                'productModal': document.getElementById('productModal'),
                'productList': document.getElementById('productList'),
                'productTitle': document.getElementById('productTitle'),
                'productModel': document.getElementById('productModel'),
                'productSummary': document.getElementById('productSummary'),
                'addProductBtn': document.querySelector('[onclick*="addProduct"]')
            };

            Object.entries(productElements).forEach(([name, element]) => {
                if (element) {
                    console.log(`✅ ${name} 元素存在`);
                } else {
                    console.error(`❌ ${name} 元素不存在`);
                }
            });

            // 测试产品相关函数
            const productFunctions = [
                'addProduct', 'editProduct', 'viewProduct', 'deleteProduct',
                'saveProduct', 'clearProductForm', 'updateProductList',
                'initializeEditors'
            ];

            productFunctions.forEach(funcName => {
                if (typeof window[funcName] === 'function') {
                    console.log(`✅ ${funcName} 函数存在`);
                } else {
                    console.error(`❌ ${funcName} 函数不存在`);
                }
            });

            // 测试数据同步管理器
            if (typeof dataSyncManager !== 'undefined') {
                console.log('✅ dataSyncManager 存在');
                console.log('- loadFromFrontend:', typeof dataSyncManager.loadFromFrontend);
                console.log('- loadDataFromBackend:', typeof dataSyncManager.loadDataFromBackend);
            } else {
                console.error('❌ dataSyncManager 不存在');
            }

            // 如果产品数据为空，尝试重新加载
            if (!projectData.products || projectData.products.length === 0) {
                console.log('🔄 产品数据为空，尝试重新加载...');
                setTimeout(() => {
                    if (typeof loadProjectData === 'function') {
                        loadProjectData();
                    }
                }, 1000);
            }
        }

        // 数据同步函数 - 确保projectData和各个数据变量保持同步
        function syncDataVariables() {
            console.log('🔄 同步数据变量...');

            // 同步各个数据变量到projectData
            projectData.suppliers = suppliersData;
            projectData.categories = categoriesData;
            projectData.news = newsData;
            projectData.cases = casesData;
            projectData.applications = applicationsData;

            console.log('✅ 数据变量同步完成');
            console.log('📊 同步后的数据统计:');
            console.log(`- 产品: ${projectData.products.length} 个`);
            console.log(`- 供应商: ${suppliersData.length} 个`);
            console.log(`- 分类: ${categoriesData.length} 个`);
            console.log(`- 资讯: ${newsData.length} 篇`);
            console.log(`- 案例: ${casesData.length} 个`);
            console.log(`- 应用领域: ${applicationsData.length} 个`);
        }
    </script>
    <script>
        // 全局数据存储（包含实际产品数据）
        let projectData = {
            products: [
                {
                    id: 'WS-K08510-a',
                    title: 'WS-K08510超细工业电子内窥镜',
                    model: 'WS-K08510',
                    summary: '0.85mm超小直径，高清成像，适用于极小空间检测',
                    primary_category: '电子内窥镜',
                    secondary_category: '工业视频内窥镜',
                    supplier: '深圳市微视光电科技有限公司',
                    series: 'K系列',
                    uri: '/products/WS-K08510-a/',
                    status: 'published',
                    date: '2025-01-01'
                },
                {
                    id: 'product-p08510',
                    title: 'P08510便携式工业内窥镜',
                    model: 'P08510',
                    summary: '便携式设计，适合现场检测',
                    primary_category: '电子内窥镜',
                    secondary_category: '便携式内窥镜',
                    supplier: '深圳市微视光电科技有限公司',
                    series: 'P系列',
                    uri: '/products/product-p08510/',
                    status: 'published',
                    date: '2025-01-01'
                },
                {
                    id: 'product-p09510',
                    title: 'P09510工业内窥镜',
                    model: 'P09510',
                    summary: '高性能工业检测设备',
                    primary_category: '电子内窥镜',
                    secondary_category: '工业视频内窥镜',
                    supplier: '深圳市微视光电科技有限公司',
                    series: 'P系列',
                    uri: '/products/product-p09510/',
                    status: 'published',
                    date: '2025-01-01'
                },
                {
                    id: 'ZB-K3920',
                    title: 'ZB-K3920高清工业内窥镜',
                    model: 'ZB-K3920',
                    summary: '高清成像，专业工业检测',
                    primary_category: '电子内窥镜',
                    secondary_category: '高清内窥镜',
                    supplier: '北京智博检测设备有限公司',
                    series: 'ZB-K系列',
                    uri: '/products/ZB-K3920/',
                    status: 'published',
                    date: '2025-01-01'
                },
                {
                    id: 'vis-product-1',
                    title: 'VIS-P系列便携内窥镜',
                    model: 'VIS-P1000',
                    summary: '维森科技便携式检测设备',
                    primary_category: '电子内窥镜',
                    secondary_category: '便携式内窥镜',
                    supplier: '天津维森科技有限公司',
                    series: 'VIS-P系列',
                    uri: '/products/vis-product-1/',
                    status: 'published',
                    date: '2025-01-01'
                },
                {
                    id: 'vis-product-2',
                    title: 'VIS-T系列工业内窥镜',
                    model: 'VIS-T2000',
                    summary: '维森科技工业级检测设备',
                    primary_category: '电子内窥镜',
                    secondary_category: '工业视频内窥镜',
                    supplier: '天津维森科技有限公司',
                    series: 'VIS-T系列',
                    uri: '/products/vis-product-2/',
                    status: 'published',
                    date: '2025-01-01'
                }
            ],
            suppliers: [
                {
                    id: 'vis',
                    title: '天津维森科技有限公司',
                    type: '贸易商',
                    series: ['VIS-P系列', 'VIS-T系列']
                },
                {
                    id: 'microvis',
                    title: '深圳市微视光电科技有限公司',
                    type: '制造商',
                    series: ['K系列', 'P系列', 'DZ系列']
                },
                {
                    id: 'zhibo',
                    title: '北京智博检测设备有限公司',
                    type: '制造商',
                    series: ['ZB-K系列']
                }
            ],
            news: [],
            cases: [],
            applications: [],
            categories: []
        };

        // 分页配置
        const ITEMS_PER_PAGE = 10;
        let currentPages = {
            products: 1,
            suppliers: 1,
            categories: 1,
            news: 1,
            cases: 1,
            applications: 1
        }

        // 通用分页函数
        function createPagination(type, totalItems, currentPage) {
            const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
            const paginationContainer = document.getElementById(`${type}Pagination`);
            const paginationInfo = document.getElementById(`${type}PaginationInfo`);

            // 更新分页信息
            const startItem = totalItems > 0 ? (currentPage - 1) * ITEMS_PER_PAGE + 1 : 0;
            const endItem = Math.min(currentPage * ITEMS_PER_PAGE, totalItems);
            const typeNames = {
                'products': '个产品',
                'suppliers': '个供应商',
                'categories': '个分类',
                'news': '篇资讯',
                'cases': '个案例',
                'applications': '个应用领域'
            };
            paginationInfo.textContent = `显示第 ${startItem}-${endItem} 项，共 ${totalItems} ${typeNames[type]}`;

            // 如果只有一页或没有数据，隐藏分页
            if (totalPages <= 1) {
                paginationContainer.style.display = 'none';
                return;
            } else {
                paginationContainer.style.display = 'flex';
            }

            // 生成分页按钮
            let paginationHTML = '';

            // 上一页
            if (currentPage > 1) {
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="javascript:void(0)" onclick="goToPage('${type}', ${currentPage - 1})">上一页</a>
                </li>`;
            } else {
                paginationHTML += `<li class="page-item disabled">
                    <span class="page-link">上一页</span>
                </li>`;
            }

            // 页码按钮（最多显示5页）
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            // 调整起始页
            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            // 第一页
            if (startPage > 1) {
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="javascript:void(0)" onclick="goToPage('${type}', 1)">1</a>
                </li>`;
                if (startPage > 2) {
                    paginationHTML += `<li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>`;
                }
            }

            // 页码
            for (let i = startPage; i <= endPage; i++) {
                if (i === currentPage) {
                    paginationHTML += `<li class="page-item active">
                        <span class="page-link">${i}</span>
                    </li>`;
                } else {
                    paginationHTML += `<li class="page-item">
                        <a class="page-link" href="javascript:void(0)" onclick="goToPage('${type}', ${i})">${i}</a>
                    </li>`;
                }
            }

            // 最后一页
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHTML += `<li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>`;
                }
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="javascript:void(0)" onclick="goToPage('${type}', ${totalPages})">${totalPages}</a>
                </li>`;
            }

            // 下一页
            if (currentPage < totalPages) {
                paginationHTML += `<li class="page-item">
                    <a class="page-link" href="javascript:void(0)" onclick="goToPage('${type}', ${currentPage + 1})">下一页</a>
                </li>`;
            } else {
                paginationHTML += `<li class="page-item disabled">
                    <span class="page-link">下一页</span>
                </li>`;
            }

            paginationContainer.innerHTML = paginationHTML;
        }

        // 跳转到指定页面
        function goToPage(type, page) {
            currentPages[type] = page;

            // 根据类型调用相应的更新函数
            switch(type) {
                case 'products':
                    updateProductList();
                    break;
                case 'suppliers':
                    updateSupplierList();
                    break;
                case 'categories':
                    updateCategoryList();
                    break;
                case 'news':
                    updateNewsList();
                    break;
                case 'cases':
                    updateCaseList();
                    break;
                case 'applications':
                    updateApplicationList();
                    break;
            }
        }

        // 获取分页数据
        function getPaginatedData(data, page) {
            const startIndex = (page - 1) * ITEMS_PER_PAGE;
            const endIndex = startIndex + ITEMS_PER_PAGE;
            return data.slice(startIndex, endIndex);
        };

        // 移动端菜单切换
        function toggleSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const overlay = document.querySelector('.sidebar-overlay');

            sidebar.classList.toggle('show');
            overlay.classList.toggle('show');
        }

        function closeSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const overlay = document.querySelector('.sidebar-overlay');

            sidebar.classList.remove('show');
            overlay.classList.remove('show');
        }

        // 页面初始化
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 内容管理中心初始化...');

            try {
                // 测试基本函数是否存在
                console.log('🔍 检查关键函数...');
                console.log('showSection函数:', typeof showSection);
                console.log('loadProjectData函数:', typeof loadProjectData);
                console.log('startDataChangeMonitoring函数:', typeof startDataChangeMonitoring);
                console.log('updateMediaList函数:', typeof updateMediaList);

                // 测试DOM元素是否存在
                console.log('🔍 检查关键DOM元素...');
                console.log('pageTitle元素:', document.getElementById('pageTitle'));
                console.log('nav-link元素数量:', document.querySelectorAll('.nav-link').length);
                console.log('content-section元素数量:', document.querySelectorAll('.content-section').length);

                // 加载项目数据
                loadProjectData();

                // 启动数据变更监控
                startDataChangeMonitoring();

                // 初始化媒体库
                updateMediaList();

                // 监听窗口大小变化
                window.addEventListener('resize', function() {
                    if (window.innerWidth > 992) {
                        closeSidebar();
                    }
                });

                // 显示初始化完成状态
                setTimeout(() => {
                    updateSyncStatus();
                }, 3000);

                // 添加菜单点击事件监听器（备用方案）
                console.log('🔧 添加备用菜单事件监听器...');
                document.querySelectorAll('.nav-link').forEach((link, index) => {
                    link.addEventListener('click', function(e) {
                        console.log(`🖱️ 菜单项 ${index} 被点击:`, e.target);

                        // 从onclick属性中提取section名称
                        const onclickAttr = e.target.getAttribute('onclick');
                        if (onclickAttr) {
                            const match = onclickAttr.match(/showSection\('([^']+)'/);
                            if (match) {
                                const sectionName = match[1];
                                console.log('🎯 提取的section名称:', sectionName);
                                showSection(sectionName, e);
                            }
                        }
                    });
                });

                console.log('✅ 初始化完成');

                // 延迟测试和修复菜单功能
                setTimeout(() => {
                    testMenuFunctions();
                    fixMenuEvents();
                    fixAllButtonEvents();
                    testProductFunctions();
                }, 2000);

            } catch (error) {
                console.error('❌ 初始化过程中发生错误:', error);
                alert('初始化失败: ' + error.message);
            }
        });

        // 显示加载状态
        function showLoading() {
            document.getElementById('loadingSpinner').style.display = 'block';
        }

        // 隐藏加载状态
        function hideLoading() {
            document.getElementById('loadingSpinner').style.display = 'none';
        }

        // 显示错误消息
        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            const errorText = document.getElementById('errorText');
            errorText.textContent = message;
            errorDiv.style.display = 'block';
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 5000);
        }

        // 显示成功消息
        function showSuccess(message) {
            const successDiv = document.getElementById('successMessage');
            const successText = document.getElementById('successText');
            successText.textContent = message;
            successDiv.style.display = 'block';
            setTimeout(() => {
                successDiv.style.display = 'none';
            }, 3000);
        }

        // 数据同步管理器
        class DataSyncManager {
            constructor() {
                this.baseUrl = window.location.origin;
                this.syncEndpoint = '/admin/api/sync';
                this.lastSyncTime = null;
            }

            // 同步所有数据到前台
            async syncToFrontend() {
                try {
                    console.log('🔄 开始同步数据到前台...');
                    showLoading();

                    const syncData = {
                        products: projectData.products || [],
                        suppliers: suppliersData || [],
                        categories: categoriesData || [],
                        news: newsData || [],
                        cases: casesData || [],
                        applications: applicationsData || [],
                        timestamp: new Date().toISOString()
                    };

                    console.log('📊 准备同步的数据:', {
                        products: syncData.products.length,
                        suppliers: syncData.suppliers.length,
                        categories: syncData.categories.length,
                        news: syncData.news.length,
                        cases: syncData.cases.length,
                        applications: syncData.applications.length
                    });

                    // 执行真正的数据同步
                    await this.syncToFrontendReal();

                    // 生成Hugo内容文件（可选）
                    await this.generateHugoContentFiles(syncData);

                    // 触发前台重新构建（如果有构建钩子）
                    await this.triggerFrontendRebuild();

                    hideLoading();
                    showSuccess('✅ 数据同步到前台成功！数据已保存并将在下次访问时更新。');

                    return true;
                } catch (error) {
                    console.error('同步失败:', error);
                    hideLoading();
                    showError('❌ 数据同步失败: ' + error.message);
                    return false;
                }
            }

            // 生成Hugo内容文件
            async generateHugoContentFiles(syncData) {
                console.log('📝 生成Hugo内容文件...');

                // 生成产品文件
                for (const product of syncData.products) {
                    await this.generateProductFile(product);
                }

                // 生成供应商文件
                for (const supplier of syncData.suppliers) {
                    await this.generateSupplierFile(supplier);
                }

                // 生成分类文件
                for (const category of syncData.categories) {
                    await this.generateCategoryFile(category);
                }

                // 生成资讯文件
                for (const news of syncData.news) {
                    await this.generateNewsFile(news);
                }

                // 生成案例文件
                for (const caseItem of syncData.cases) {
                    await this.generateCaseFile(caseItem);
                }

                // 生成应用领域文件
                for (const application of syncData.applications) {
                    await this.generateApplicationFile(application);
                }

                console.log('✅ Hugo内容文件生成完成');
            }

            // 生成产品文件
            async generateProductFile(product) {
                const frontMatter = {
                    title: product.title || product.name,
                    model: product.model,
                    series: product.series,
                    primary_category: product.primary_category,
                    secondary_category: product.secondary_category,
                    supplier: product.supplier,
                    status: product.status || 'published',
                    date: product.created_date || new Date().toISOString().split('T')[0],
                    summary: product.summary || product.description,
                    featured: product.featured || false,
                    weight: product.weight || 100
                };

                if (product.parameters && product.parameters.length > 0) {
                    frontMatter.parameters = product.parameters;
                }

                if (product.gallery && product.gallery.length > 0) {
                    frontMatter.gallery = product.gallery;
                }

                if (product.downloads && product.downloads.length > 0) {
                    frontMatter.downloads = product.downloads;
                }

                const content = product.content || product.description || '';

                console.log(`📝 生成产品文件: ${product.model || product.id}`);
                // 这里应该调用后端API来实际写入文件
                // 目前只是模拟
                return this.simulateFileWrite(`content/products/${product.id}.md`, frontMatter, content);
            }

            // 生成资讯文件
            async generateNewsFile(news) {
                const frontMatter = {
                    title: news.title,
                    date: news.date || new Date().toISOString().split('T')[0],
                    categories: [news.category || '行业资讯'],
                    tags: news.tags || [],
                    summary: news.summary,
                    featured_image: news.featured_image,
                    author: news.author || '编辑部',
                    views: news.views || 0,
                    status: news.status || 'published'
                };

                const content = news.content || '';

                console.log(`📝 生成资讯文件: ${news.title}`);
                return this.simulateFileWrite(`content/news/${news.id}.md`, frontMatter, content);
            }

            // 生成案例文件
            async generateCaseFile(caseItem) {
                const frontMatter = {
                    title: caseItem.title,
                    date: caseItem.created_date || new Date().toISOString().split('T')[0],
                    primary_category: caseItem.primary_category,
                    application_field: caseItem.application_field,
                    application_scenario: caseItem.application_scenario,
                    client: caseItem.client,
                    industry: caseItem.industry,
                    detection_object: caseItem.detection_object,
                    equipment_used: caseItem.equipment_used,
                    featured_image: caseItem.featured_image,
                    summary: caseItem.summary,
                    status: caseItem.status || 'published'
                };

                const content = caseItem.content || '';

                console.log(`📝 生成案例文件: ${caseItem.title}`);
                return this.simulateFileWrite(`content/cases/${caseItem.id}.md`, frontMatter, content);
            }

            // 模拟文件写入
            async simulateFileWrite(filePath, frontMatter, content) {
                // 在实际实现中，这里应该调用后端API来写入文件
                console.log(`📄 模拟写入文件: ${filePath}`);
                console.log('📋 Front Matter:', frontMatter);
                console.log('📝 Content length:', content.length);

                // 模拟延迟
                await new Promise(resolve => setTimeout(resolve, 100));
                return true;
            }

            // 触发前台重新构建
            async triggerFrontendRebuild() {
                console.log('🔄 触发前台重新构建...');
                // 在实际实现中，这里可以调用Hugo构建命令或Webhook
                // 目前只是模拟
                await new Promise(resolve => setTimeout(resolve, 500));
                console.log('✅ 前台重新构建触发完成');
            }

            // 从前台加载数据
            async loadFromFrontend() {
                try {
                    console.log('🔄 从前台加载数据...');

                    // 从搜索索引加载数据
                    const searchData = await this.loadSearchIndex();
                    if (searchData && Array.isArray(searchData)) {
                        console.log(`📊 搜索索引加载成功，共 ${searchData.length} 个页面`);

                        // 解析并同步数据到全局变量
                        this.parseAndSyncData(searchData);

                        console.log('✅ 前台数据加载和同步完成');
                        return true;
                    } else {
                        console.warn('⚠️ 搜索索引数据为空或格式错误');
                        return false;
                    }
                } catch (error) {
                    console.error('❌ 从前台加载数据失败:', error);
                    throw error;
                }
            }

            // 解析并同步数据到全局变量
            parseAndSyncData(searchData) {
                console.log('🔍 开始解析搜索索引数据...');
                console.log('📊 搜索索引数据总数:', searchData.length);

                // 统计各类型数据数量
                const typeStats = {};
                searchData.forEach(item => {
                    typeStats[item.type] = (typeStats[item.type] || 0) + 1;
                });
                console.log('📊 数据类型统计:', typeStats);

                // 重置全局数据
                projectData.products = [];
                newsData = [];
                casesData = [];
                applicationsData = [];

                // 临时存储供应商和分类数据
                const tempSuppliers = new Set();
                const tempCategories = new Set();

                // 解析各类型数据
                searchData.forEach((item, index) => {
                    try {
                        console.log(`🔄 处理第 ${index + 1} 项:`, item.type, item.title);

                        switch(item.type) {
                            case 'products':
                                const product = this.parseProductData(item);
                                if (product) {
                                    projectData.products.push(product);
                                    // 收集供应商和分类信息
                                    if (product.supplier) tempSuppliers.add(product.supplier);
                                    if (product.primary_category) tempCategories.add(product.primary_category);
                                    if (product.secondary_category) tempCategories.add(product.secondary_category);
                                }
                                break;
                            case 'news':
                                const news = this.parseNewsData(item);
                                if (news) newsData.push(news);
                                break;
                            case 'cases':
                                const caseItem = this.parseCaseData(item);
                                if (caseItem) casesData.push(caseItem);
                                break;
                            case 'applications':
                                const application = this.parseApplicationData(item);
                                if (application) applicationsData.push(application);
                                break;
                            default:
                                console.log(`⚠️ 未知数据类型: ${item.type}`);
                        }
                    } catch (error) {
                        console.error(`❌ 解析 ${item.type} 数据失败:`, error, item);
                    }
                });

                // 生成供应商和分类数据
                this.generateSuppliersData(tempSuppliers);
                this.generateCategoriesData(tempCategories);

                console.log('📊 数据解析完成统计:');
                console.log(`- 产品: ${projectData.products.length} 个`);
                console.log(`- 供应商: ${suppliersData.length} 个`);
                console.log(`- 分类: ${categoriesData.length} 个`);
                console.log(`- 资讯: ${newsData.length} 篇`);
                console.log(`- 案例: ${casesData.length} 个`);
                console.log(`- 应用领域: ${applicationsData.length} 个`);
            }

            // 生成供应商数据
            generateSuppliersData(supplierNames) {
                suppliersData = Array.from(supplierNames).map(name => {
                    const productCount = projectData.products.filter(p => p.supplier === name).length;
                    return {
                        id: this.generateIdFromName(name),
                        name: name,
                        description: `专业的${name.includes('微视') ? '内窥镜' : '检测设备'}制造商`,
                        contact_person: '销售部',
                        phone: '400-000-0000',
                        email: 'sales@company.com',
                        address: '深圳市南山区',
                        website: 'https://www.company.com',
                        products_count: productCount,
                        status: 'active',
                        created_date: new Date().toISOString().split('T')[0]
                    };
                });
            }

            // 生成分类数据
            generateCategoriesData(categoryNames) {
                categoriesData = Array.from(categoryNames).map((name, index) => {
                    const productCount = projectData.products.filter(p =>
                        p.primary_category === name || p.secondary_category === name
                    ).length;

                    return {
                        id: this.generateIdFromName(name),
                        name: name,
                        description: `${name}相关产品分类`,
                        parent_category: this.getParentCategory(name),
                        icon: this.getCategoryIcon(name),
                        weight: index + 1,
                        products_count: productCount,
                        status: 'active',
                        created_date: new Date().toISOString().split('T')[0]
                    };
                });
            }

            // 加载搜索索引
            async loadSearchIndex() {
                try {
                    console.log('📡 正在获取搜索索引: /search-index.json');
                    const response = await fetch('/search-index.json');
                    if (response.ok) {
                        const data = await response.json();
                        console.log('📊 搜索索引加载成功，共', data.length, '个页面');
                        return data;
                    } else {
                        console.warn('搜索索引响应失败:', response.status, response.statusText);
                        return null;
                    }
                } catch (e) {
                    console.warn('搜索索引加载失败:', e);
                    return null;
                }
            }

            // 解析搜索索引数据
            parseSearchIndexData(searchData) {
                console.log('🔍 解析搜索索引数据...');

                // 重置数据
                projectData.products = [];
                newsData = [];
                casesData = [];
                applicationsData = [];

                searchData.forEach(item => {
                    switch(item.type) {
                        case 'products':
                            this.parseProductData(item);
                            break;
                        case 'news':
                            this.parseNewsData(item);
                            break;
                        case 'cases':
                            this.parseCaseData(item);
                            break;
                        case 'applications':
                            this.parseApplicationData(item);
                            break;
                    }
                });

                console.log('📊 数据解析完成:');
                console.log(`- 产品: ${projectData.products.length} 个`);
                console.log(`- 资讯: ${newsData.length} 篇`);
                console.log(`- 案例: ${casesData.length} 个`);
                console.log(`- 应用领域: ${applicationsData.length} 个`);
            }

            // 解析产品数据
            parseProductData(item) {
                console.log('🔍 解析产品数据:', item.title, item.type, item.uri);

                if (!item.title || item.title.trim() === '' ||
                    item.uri.includes('_index') || item.uri.includes('model.md') ||
                    item.uri === '/products/model/') {
                    console.log('❌ 跳过产品:', item.title, '原因: 不符合条件');
                    return null;
                }

                const productId = this.extractIdFromUri(item.uri);
                const params = item.params || {};

                // 提取产品信息
                const model = params.model || this.extractModelFromTitle(item.title);
                const supplier = params.supplier || this.extractSupplierFromContent(item.content) || this.extractSupplierFromTitle(item.title);
                const series = params.series || this.extractSeriesFromTitle(item.title);
                const primaryCategory = params.primary_category || '电子内窥镜';
                const secondaryCategory = params.secondary_category || this.extractSecondaryCategory(item.title);

                const product = {
                    id: productId,
                    title: item.title,
                    model: model,
                    summary: item.summary || this.extractSummaryFromTitle(item.title),
                    primary_category: primaryCategory,
                    secondary_category: secondaryCategory,
                    supplier: supplier,
                    series: series,
                    uri: item.uri,
                    content: item.content || '',
                    status: params.status || 'published',
                    statusName: (params.status || 'published') === 'published' ? '已发布' : '草稿',
                    published: item.date || new Date().toISOString().split('T')[0],
                    thumbnail: params.featured_image || params.thumbnail || '/images/placeholder.svg',
                    featured: params.featured || false,
                    parameters: params.parameters || [],
                    gallery: params.gallery || [],
                    downloads: params.downloads || [],
                    weight: params.weight || 100,
                    created_date: item.date || new Date().toISOString().split('T')[0],
                    updated_date: new Date().toISOString().split('T')[0]
                };

                console.log('✅ 成功解析产品:', product.title, product.model, product.supplier);
                return product;
            }

            // 提取辅助方法
            extractSupplierFromContent(content) {
                if (!content) return '深圳市微视光电科技有限公司';

                if (content.includes('微视光电') || content.includes('微视')) {
                    return '深圳市微视光电科技有限公司';
                } else if (content.includes('圳本') || content.includes('ZB')) {
                    return '深圳市圳本科技有限公司';
                } else if (content.includes('视觉检测') || content.includes('VSNDT')) {
                    return '维森视觉检测技术有限公司';
                }

                return '深圳市微视光电科技有限公司';
            }

            extractSupplierFromTitle(title) {
                if (!title) return '深圳市微视光电科技有限公司';

                if (title.includes('微视') || title.includes('WS-')) {
                    return '深圳市微视光电科技有限公司';
                } else if (title.includes('圳本') || title.includes('ZB-')) {
                    return '深圳市圳本科技有限公司';
                } else if (title.includes('DZ-') || title.includes('P-')) {
                    return '维森视觉检测技术有限公司';
                }

                return '深圳市微视光电科技有限公司';
            }

            extractSeriesFromTitle(title) {
                if (!title) return '';

                if (title.includes('WS-K') || title.includes('K系列')) return 'K系列';
                if (title.includes('WS-P') || title.includes('P系列')) return 'P系列';
                if (title.includes('ZB-') || title.includes('圳本')) return 'ZB系列';
                if (title.includes('DZ-')) return 'DZ系列';

                return '';
            }

            extractSecondaryCategory(title) {
                if (!title) return '工业视频内窥镜';

                if (title.includes('光纤') || title.includes('纤维')) return '光纤内窥镜';
                if (title.includes('硬性') || title.includes('直视')) return '硬性内窥镜';
                if (title.includes('软性') || title.includes('弯曲')) return '软性内窥镜';

                return '工业视频内窥镜';
            }

            extractSummaryFromTitle(title) {
                if (!title) return '';

                // 从标题中提取关键特征作为摘要
                const features = [];
                if (title.includes('超细')) features.push('超细直径');
                if (title.includes('高清')) features.push('高清成像');
                if (title.includes('便携')) features.push('便携设计');
                if (title.includes('工业')) features.push('工业级');

                const match = title.match(/(\d+\.?\d*)mm/);
                if (match) features.push(`${match[1]}mm探头`);

                return features.length > 0 ? features.join('，') + '，适用于专业检测' : '专业检测设备';
            }

            // 解析资讯数据
            parseNewsData(item) {
                console.log('📰 解析资讯数据:', item.title);

                const news = {
                    id: this.extractIdFromUri(item.uri),
                    title: item.title,
                    summary: item.summary || '',
                    content: item.content || '',
                    category: item.params?.categories?.[0] || '行业资讯',
                    author: item.params?.author || '编辑部',
                    featured_image: item.params?.featured_image || '',
                    tags: item.params?.tags || [],
                    status: item.params?.status || 'published',
                    date: item.date,
                    views: item.params?.views || 0,
                    created_date: item.date,
                    updated_date: item.date
                };

                console.log('✅ 成功解析资讯:', news.title);
                return news;
            }

            // 解析案例数据
            parseCaseData(item) {
                console.log('💼 解析案例数据:', item.title);

                const caseItem = {
                    id: this.extractIdFromUri(item.uri),
                    title: item.title,
                    summary: item.summary || '',
                    content: item.content || '',
                    primary_category: Array.isArray(item.params?.primary_category) ?
                        item.params.primary_category[0] : item.params?.primary_category || '',
                    application_field: Array.isArray(item.params?.application_field) ?
                        item.params.application_field.join(', ') : item.params?.application_field || '',
                    application_scenario: Array.isArray(item.params?.application_scenario) ?
                        item.params.application_scenario.join(', ') : item.params?.application_scenario || '',
                    client: item.params?.client || '',
                    industry: item.params?.industry || '',
                    detection_object: item.params?.detection_object || '',
                    equipment_used: item.params?.equipment_used || '',
                    featured_image: item.params?.featured_image || '',
                    status: item.params?.status || 'published',
                    created_date: item.date,
                    updated_date: item.date
                };

                console.log('✅ 成功解析案例:', caseItem.title);
                return caseItem;
            }

            // 解析应用领域数据
            parseApplicationData(item) {
                console.log('🧩 解析应用领域数据:', item.title);

                const application = {
                    id: this.extractIdFromUri(item.uri),
                    name: item.title,
                    description: item.summary || '',
                    content: item.content || '',
                    category: item.params?.category || '工业检测',
                    features: item.params?.features || [],
                    key_technologies: item.params?.key_technologies || [],
                    weight: item.params?.weight || 1,
                    image: item.params?.featured_image || item.params?.image || '',
                    status: item.params?.status || 'published',
                    created_date: item.date,
                    updated_date: item.date
                };

                console.log('✅ 成功解析应用领域:', application.name);
                return application;
            }

            // 辅助函数
            extractIdFromUri(uri) {
                return uri.split('/').filter(part => part).pop() || 'unknown';
            }

            extractModelFromTitle(title) {
                const match = title.match(/([A-Z]{2,}-[A-Z0-9]+)/);
                return match ? match[1] : '';
            }

            extractSeriesFromModel(model) {
                if (!model) return '';
                if (model.includes('K')) return 'K系列';
                if (model.includes('P')) return 'P系列';
                if (model.includes('DZ')) return 'DZ系列';
                return '';
            }

            // 生成ID的辅助方法
            generateIdFromName(name) {
                return name.toLowerCase()
                    .replace(/[^\w\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/深圳市|科技有限公司|有限公司/g, '')
                    .replace(/^-+|-+$/g, '');
            }

            // 获取父级分类
            getParentCategory(categoryName) {
                const parentMap = {
                    '工业视频内窥镜': '电子内窥镜',
                    '光纤内窥镜': '电子内窥镜',
                    '硬性内窥镜': '光学内窥镜',
                    '软性内窥镜': '光学内窥镜'
                };
                return parentMap[categoryName] || '';
            }

            // 获取分类图标
            getCategoryIcon(categoryName) {
                const iconMap = {
                    '电子内窥镜': 'fas fa-video',
                    '光学内窥镜': 'fas fa-eye',
                    '工业视频内窥镜': 'fas fa-industry',
                    '光纤内窥镜': 'fas fa-network-wired',
                    '硬性内窥镜': 'fas fa-ruler',
                    '软性内窥镜': 'fas fa-wave-square'
                };
                return iconMap[categoryName] || 'fas fa-cog';
            }

            // 实际的数据持久化方法
            async saveDataToBackend(data, type) {
                try {
                    console.log(`💾 保存${type}数据到后端...`);

                    // 这里应该调用实际的后端API
                    // 目前使用localStorage作为临时存储
                    const storageKey = `cms_${type}_data`;
                    localStorage.setItem(storageKey, JSON.stringify(data));

                    console.log(`✅ ${type}数据保存成功`);
                    return true;
                } catch (error) {
                    console.error(`❌ 保存${type}数据失败:`, error);
                    return false;
                }
            }

            // 从后端加载数据
            async loadDataFromBackend(type) {
                try {
                    console.log(`📥 从后端加载${type}数据...`);

                    // 这里应该调用实际的后端API
                    // 目前使用localStorage作为临时存储
                    const storageKey = `cms_${type}_data`;
                    const data = localStorage.getItem(storageKey);

                    if (data) {
                        const parsedData = JSON.parse(data);
                        console.log(`✅ ${type}数据加载成功，共${parsedData.length}条`);
                        return parsedData;
                    } else {
                        console.log(`ℹ️ 没有找到${type}数据`);
                        return [];
                    }
                } catch (error) {
                    console.error(`❌ 加载${type}数据失败:`, error);
                    return [];
                }
            }

            // 真正的同步到前台方法
            async syncToFrontendReal() {
                try {
                    console.log('🔄 开始真正的数据同步...');

                    // 保存所有数据到后端存储
                    const savePromises = [
                        this.saveDataToBackend(projectData.products, 'products'),
                        this.saveDataToBackend(suppliersData, 'suppliers'),
                        this.saveDataToBackend(categoriesData, 'categories'),
                        this.saveDataToBackend(newsData, 'news'),
                        this.saveDataToBackend(casesData, 'cases'),
                        this.saveDataToBackend(applicationsData, 'applications')
                    ];

                    const results = await Promise.all(savePromises);
                    const allSuccess = results.every(result => result === true);

                    if (allSuccess) {
                        // 更新最后同步时间
                        this.lastSyncTime = new Date().toISOString();
                        localStorage.setItem('cms_last_sync_time', this.lastSyncTime);

                        console.log('✅ 所有数据同步成功');
                        return true;
                    } else {
                        throw new Error('部分数据同步失败');
                    }
                } catch (error) {
                    console.error('❌ 数据同步失败:', error);
                    throw error;
                }
            }
        }

        // 创建数据同步管理器实例
        const dataSyncManager = new DataSyncManager();

        // 加载项目数据
        async function loadProjectData() {
            try {
                showLoading();
                console.log('📡 开始加载项目数据...');

                // 首先尝试从后端加载已保存的数据
                const savedProducts = await dataSyncManager.loadDataFromBackend('products');
                const savedSuppliers = await dataSyncManager.loadDataFromBackend('suppliers');
                const savedCategories = await dataSyncManager.loadDataFromBackend('categories');
                const savedNews = await dataSyncManager.loadDataFromBackend('news');
                const savedCases = await dataSyncManager.loadDataFromBackend('cases');
                const savedApplications = await dataSyncManager.loadDataFromBackend('applications');

                // 如果有保存的数据，优先使用保存的数据
                if (savedProducts.length > 0) {
                    console.log('📥 使用后端保存的数据');
                    projectData.products = savedProducts;
                    suppliersData = savedSuppliers;
                    categoriesData = savedCategories;
                    newsData = savedNews;
                    casesData = savedCases;
                    applicationsData = savedApplications;
                } else {
                    console.log('📡 从前台搜索索引加载数据');
                    // 使用数据同步管理器从前台加载数据
                    await dataSyncManager.loadFromFrontend();
                }

                console.log('📊 数据加载完成统计:');
                console.log(`- 产品: ${projectData.products.length} 个`);
                console.log(`- 供应商: ${suppliersData.length} 个`);
                console.log(`- 分类: ${categoriesData.length} 个`);
                console.log(`- 资讯: ${newsData.length} 篇`);
                console.log(`- 案例: ${casesData.length} 个`);
                console.log(`- 应用领域: ${applicationsData.length} 个`);

                console.log('✅ 项目数据加载完成');

                // 更新界面
                updateDashboard();
                updateProductList();
                updateSupplierList();
                updateCategoryList();
                updateNewsList();
                updateCaseList();
                updateApplicationList();

                // 初始化产品表单的分类和供应商选项
                initializeProductFormOptions();

                hideLoading();
                showSuccess('数据加载完成！');

            } catch (error) {
                console.error('❌ 加载项目数据失败:', error);
                hideLoading();
                showError('数据加载失败: ' + error.message);

                // 返回空数据
                projectData = {
                    products: [],
                    suppliers: [],
                    news: [],
                    cases: [],
                    applications: [],
                    categories: []
                };
            }
        }

        // 数据提取辅助函数
        function extractModelFromTitle(title) {
            if (!title) return '';
            const match = title.match(/([A-Z]{1,3}-?[A-Z]?\d{4,5}[A-Z]?)/);
            return match ? match[1] : '';
        }

        function extractCategoryFromContent(content) {
            if (!content) return '其他';
            if (content.includes('电子内窥镜') || content.includes('高清') || content.includes('LED')) return '电子内窥镜';
            if (content.includes('光纤内窥镜') || content.includes('光纤传输')) return '光纤内窥镜';
            if (content.includes('便携式') || content.includes('轻量化')) return '便携式内窥镜';
            if (content.includes('管道') || content.includes('防水防尘')) return '管道内窥镜';
            if (content.includes('工业级') || content.includes('专业软件')) return '工业级系统';
            return '其他';
        }

        function extractSupplierFromContent(content) {
            if (!content) return '未知供应商';
            if (content.includes('深圳') || content.includes('微视') || content.includes('光电')) return '深圳市微视光电科技有限公司';
            if (content.includes('天津') || content.includes('维森')) return '天津维森科技有限公司';
            if (content.includes('北京') || content.includes('智博')) return '北京智博检测设备有限公司';
            return '其他供应商';
        }

        function extractNewsCategoryFromContent(content) {
            if (!content) return '其他';
            if (content.includes('汽车') || content.includes('制造业')) return '行业动态';
            if (content.includes('展会') || content.includes('展览')) return '展会信息';
            if (content.includes('产品') || content.includes('发布')) return '产品发布';
            if (content.includes('技术') || content.includes('突破')) return '技术资讯';
            return '其他';
        }

        function extractCaseCategoryFromContent(content) {
            if (!content) return '其他';
            if (content.includes('汽车') || content.includes('发动机')) return '汽车制造';
            if (content.includes('航空') || content.includes('叶片')) return '航空航天';
            if (content.includes('石油') || content.includes('管道')) return '石油化工';
            return '其他';
        }

        function extractIndustryFromContent(content) {
            if (!content) return '其他行业';
            if (content.includes('汽车')) return '汽车工业';
            if (content.includes('航空')) return '航空工业';
            if (content.includes('石油')) return '石油工业';
            return '其他行业';
        }

        // 更新仪表板
        function updateDashboard() {
            document.getElementById('productCount').textContent = projectData.products.length;
            document.getElementById('supplierCount').textContent = projectData.suppliers.length;
            document.getElementById('newsCount').textContent = projectData.news.length;
            document.getElementById('caseCount').textContent = projectData.cases.length;

            // 更新最近活动
            updateRecentActivities();
        }

        // 更新最近活动
        function updateRecentActivities() {
            const tbody = document.getElementById('recentActivities');
            const allItems = [
                ...projectData.products.map(item => ({...item, type: '产品'})),
                ...projectData.news.map(item => ({...item, type: '资讯'})),
                ...projectData.cases.map(item => ({...item, type: '案例'})),
                ...projectData.applications.map(item => ({...item, type: '应用'}))
            ];

            // 按日期排序，取最新的10条
            allItems.sort((a, b) => new Date(b.date) - new Date(a.date));
            const recentItems = allItems.slice(0, 10);

            if (recentItems.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">暂无数据</td></tr>';
                return;
            }

            tbody.innerHTML = recentItems.map(item => `
                <tr>
                    <td>${item.date}</td>
                    <td><span class="badge bg-primary">${item.type}</span></td>
                    <td>${item.title}</td>
                    <td><span class="status-badge status-${item.status}">${item.status === 'published' ? '已发布' : '草稿'}</span></td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary btn-action" onclick="editItem('${item.type.toLowerCase()}', '${item.id}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger btn-action" onclick="deleteItem('${item.type.toLowerCase()}', '${item.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        // 更新产品列表
        function updateProductList() {
            const tbody = document.getElementById('productList');

            console.log('🔍 更新产品列表');
            console.log('📦 projectData:', projectData);
            console.log('📦 projectData.products:', projectData.products);
            console.log('📦 产品数量:', projectData.products ? projectData.products.length : 0);

            if (!projectData.products || projectData.products.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">暂无产品数据 - 正在从搜索索引加载...</td></tr>';
                createPagination('products', 0, 1);

                // 如果没有数据，尝试重新加载
                setTimeout(() => {
                    if (!projectData.products || projectData.products.length === 0) {
                        console.log('🔄 产品数据为空，尝试重新加载...');
                        loadProjectData();
                    }
                }, 2000);
                return;
            }

            // 获取当前页的数据
            const paginatedProducts = getPaginatedData(projectData.products, currentPages.products);

            tbody.innerHTML = paginatedProducts.map(product => `
                <tr data-product-id="${product.id}">
                    <td>
                        <strong>${product.title}</strong>
                        <br><small class="text-muted">${product.summary}</small>
                    </td>
                    <td><code>${product.model || product.id}</code></td>
                    <td><span class="badge bg-info">${product.primary_category || '电子内窥镜'}</span></td>
                    <td>${product.supplier || '未知供应商'}</td>
                    <td><span class="status-badge status-${product.status}">${product.status === 'published' ? '已发布' : '草稿'}</span></td>
                    <td>${product.date}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary btn-action" onclick="editProduct('${product.id}')" title="编辑">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success btn-action" onclick="viewProduct('${product.id}')" title="查看">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger btn-action" onclick="deleteProduct('${product.id}')" title="删除">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');

            // 创建分页
            createPagination('products', projectData.products.length, currentPages.products);

            // 更新过滤器选项
            updateFilterOptions();
        }

        // 更新过滤器选项
        function updateFilterOptions() {
            // 更新供应商过滤器
            const supplierFilter = document.getElementById('supplierFilter');
            const suppliers = [...new Set(projectData.products.map(p => p.supplier))];
            supplierFilter.innerHTML = '<option value="">所有供应商</option>' +
                suppliers.map(supplier => `<option value="${supplier}">${supplier}</option>`).join('');

            // 更新分类过滤器
            const categoryFilter = document.getElementById('categoryFilter');
            const categories = [...new Set(projectData.products.map(p => p.category))];
            categoryFilter.innerHTML = '<option value="">所有分类</option>' +
                categories.map(category => `<option value="${category}">${category}</option>`).join('');

            // 更新系列过滤器
            const seriesFilter = document.getElementById('seriesFilter');
            const series = [...new Set(projectData.products.map(p => p.series || '未分类').filter(s => s))];
            seriesFilter.innerHTML = '<option value="">所有系列</option>' +
                series.map(s => `<option value="${s}">${s}</option>`).join('');
        }

        // 页面切换
        function showSection(sectionName, event) {
            console.log('🔄 切换到页面:', sectionName);

            // 隐藏所有内容区域
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });

            // 移除所有导航链接的活跃状态
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });

            // 显示选中的内容区域
            const targetSection = document.getElementById(sectionName);
            if (targetSection) {
                targetSection.classList.add('active');
                console.log('✅ 显示页面:', sectionName);
            } else {
                console.error('❌ 找不到页面:', sectionName);
            }

            // 设置对应导航链接为活跃状态
            if (event && event.target) {
                event.target.classList.add('active');
            } else {
                // 如果没有event，通过sectionName查找对应的导航链接
                const navLink = document.querySelector(`[onclick*="showSection('${sectionName}')"]`);
                if (navLink) {
                    navLink.classList.add('active');
                }
            }

            // 更新页面标题
            const titles = {
                'dashboard': '仪表板',
                'products': '产品管理',
                'suppliers': '供应商管理',
                'categories': '产品分类',
                'news': '资讯管理',
                'cases': '案例管理',
                'applications': '应用领域',
                'media': '媒体库',
                'settings': '系统设置'
            };

            document.getElementById('pageTitle').textContent = titles[sectionName] || '内容管理';

            // 根据不同页面加载相应数据
            switch(sectionName) {
                case 'products':
                    updateProductList();
                    break;
                case 'suppliers':
                    updateSupplierList();
                    break;
                case 'categories':
                    updateCategoryList();
                    break;
                case 'news':
                    updateNewsList();
                    break;
                case 'cases':
                    updateCaseList();
                    break;
                case 'applications':
                    updateApplicationList();
                    break;
            }
        }

        // 刷新数据
        function refreshData(section = null) {
            if (section) {
                const sectionNames = {
                    'suppliers': '供应商',
                    'products': '产品',
                    'categories': '分类',
                    'news': '资讯',
                    'cases': '案例',
                    'applications': '应用领域'
                };
                showSuccess(`正在刷新${sectionNames[section] || section}数据...`);

                switch(section) {
                    case 'suppliers':
                        initializeSuppliersFromProducts();
                        updateSupplierList();
                        break;
                    case 'products':
                        updateProductList();
                        break;
                    case 'categories':
                        initializeCategoriesFromProducts();
                        updateCategoryList();
                        break;
                    case 'news':
                        initializeNewsData();
                        updateNewsList();
                        break;
                    case 'cases':
                        initializeCasesData();
                        updateCaseList();
                        break;
                    case 'applications':
                        initializeApplicationsData();
                        updateApplicationList();
                        break;
                    default:
                        loadProjectData();
                }
            } else {
                showSuccess('正在刷新数据...');
                loadProjectData();
            }
        }

        // 产品高级过滤
        function filterProducts() {
            const searchTerm = document.getElementById('productSearch').value.toLowerCase();
            const supplierFilter = document.getElementById('supplierFilter').value;
            const categoryFilter = document.getElementById('categoryFilter').value;
            const seriesFilter = document.getElementById('seriesFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;

            const rows = document.querySelectorAll('#productList tr[data-product-id]');
            let visibleCount = 0;

            rows.forEach(row => {
                const productId = row.getAttribute('data-product-id');
                const product = projectData.products.find(p => p.id === productId);

                if (!product) {
                    row.style.display = 'none';
                    return;
                }

                let visible = true;

                // 文本搜索
                if (searchTerm) {
                    const searchText = `${product.title} ${product.model} ${product.summary}`.toLowerCase();
                    if (!searchText.includes(searchTerm)) {
                        visible = false;
                    }
                }

                // 供应商过滤
                if (supplierFilter && product.supplier !== supplierFilter) {
                    visible = false;
                }

                // 分类过滤
                if (categoryFilter && product.category !== categoryFilter) {
                    visible = false;
                }

                // 系列过滤
                if (seriesFilter && (product.series || '未分类') !== seriesFilter) {
                    visible = false;
                }

                // 状态过滤
                if (statusFilter && product.status !== statusFilter) {
                    visible = false;
                }

                row.style.display = visible ? '' : 'none';
                if (visible) visibleCount++;
            });

            // 更新结果计数
            updateFilterResultCount('products', visibleCount, projectData.products.length);
        }

        // 清除所有过滤器
        function clearFilters() {
            document.getElementById('productSearch').value = '';
            document.getElementById('supplierFilter').value = '';
            document.getElementById('categoryFilter').value = '';
            document.getElementById('seriesFilter').value = '';
            document.getElementById('statusFilter').value = '';
            filterProducts();
        }

        // 更新过滤结果计数
        function updateFilterResultCount(type, visible, total) {
            // 可以在这里添加结果计数显示
            console.log(`${type}: 显示 ${visible}/${total} 项`);
        }

        // 产品管理功能
        // 全局变量存储当前编辑的产品ID
        let currentEditingProductId = null;

        function addProduct() {
            currentEditingProductId = null;
            clearProductForm();
            document.getElementById('productModalTitle').textContent = '添加产品';
            const modal = new bootstrap.Modal(document.getElementById('productModal'));
            modal.show();

            // 初始化编辑器和相关选项
            setTimeout(() => {
                initializeEditors();
                initializeRelatedSuppliers();
            }, 300);
        }

        // 初始化相关产品供应商选项
        function initializeRelatedSuppliers() {
            const supplierSelect = document.getElementById('relatedSupplier');
            if (!supplierSelect) {
                console.log('❌ 未找到相关产品供应商选择框');
                return;
            }

            console.log('🔄 初始化相关产品供应商选项');
            console.log('当前产品数据数量:', projectData.products ? projectData.products.length : 0);

            supplierSelect.innerHTML = '<option value="">选择供应商</option>';

            // 获取所有唯一的供应商（从实际数据中提取）
            const suppliers = [];

            // 从产品数据中提取供应商
            if (projectData.products && projectData.products.length > 0) {
                console.log('📦 从产品数据中提取供应商...');
                const productSuppliers = [...new Set(projectData.products.map(p => p.supplier).filter(s => s))];
                console.log('产品中的供应商:', productSuppliers);
                suppliers.push(...productSuppliers);

                // 显示每个供应商的产品数量
                productSuppliers.forEach(supplier => {
                    const count = projectData.products.filter(p => p.supplier === supplier).length;
                    console.log(`  - ${supplier}: ${count}个产品`);
                });
            } else {
                console.log('⚠️ 产品数据为空或未加载');
            }

            // 从供应商数据中提取
            if (projectData.suppliers && projectData.suppliers.length > 0) {
                console.log('🏢 从供应商数据中提取...');
                const supplierNames = projectData.suppliers.map(s => s.title).filter(s => s);
                console.log('供应商数据中的供应商:', supplierNames);
                suppliers.push(...supplierNames);
            }

            // 添加默认供应商（如果没有数据）
            if (suppliers.length === 0) {
                console.log('⚠️ 未找到供应商数据，使用默认供应商');
                suppliers.push(
                    '深圳市微视光电科技有限公司',
                    '天津维森科技有限公司',
                    '北京智博检测设备有限公司'
                );
            }

            // 去重并添加到选择框
            const uniqueSuppliers = [...new Set(suppliers)];
            console.log('📋 最终供应商列表:', uniqueSuppliers);

            uniqueSuppliers.forEach(supplier => {
                const option = document.createElement('option');
                option.value = supplier;
                option.textContent = supplier;
                supplierSelect.appendChild(option);
            });

            console.log('✅ 相关产品供应商初始化完成，共', uniqueSuppliers.length, '个供应商');

            // 如果只有一个供应商，自动选择它
            if (uniqueSuppliers.length === 1) {
                supplierSelect.value = uniqueSuppliers[0];
                console.log('🎯 自动选择唯一供应商:', uniqueSuppliers[0]);
                // 自动触发产品更新
                setTimeout(() => {
                    updateRelatedProducts();
                }, 100);
            }
        }

        function editProduct(id) {
            const product = projectData.products.find(p => p.id === id);
            if (!product) {
                showError('产品不存在');
                return;
            }

            currentEditingProductId = id;
            document.getElementById('productModalTitle').textContent = '编辑产品';

            // 填充基本信息
            document.getElementById('productTitle').value = product.title || '';
            document.getElementById('productModel').value = product.model || '';
            document.getElementById('productSummary').value = product.summary || '';
            document.getElementById('productPrimaryCategory').value = product.primary_category || '';
            document.getElementById('productSupplier').value = product.supplier || '';

            // 更新次要分类和产品系列选项
            updateSecondaryCategories();
            updateSeriesOptions();

            // 设置次要分类和产品系列
            setTimeout(() => {
                document.getElementById('productSecondaryCategory').value = product.secondary_category || '';
                document.getElementById('productSeries').value = product.series || '';
            }, 100);

            // 清空并加载参数
            const container = document.getElementById('parametersContainer');
            container.innerHTML = '';
            parametersCount = 0;

            if (product.parameters && Array.isArray(product.parameters)) {
                product.parameters.forEach(param => {
                    addParameter(param.name, param.value);
                });
            }

            // 加载图片库
            const galleryContainer = document.getElementById('galleryContainer');
            galleryContainer.innerHTML = '';
            productGallery = [];
            galleryCount = 0;

            if (product.gallery && Array.isArray(product.gallery)) {
                product.gallery.forEach(img => {
                    addImageToGallery(img.image, img.alt || '');
                });
            }

            // 加载富文本编辑器内容
            setTimeout(() => {
                if (productContentEditor && product.content) {
                    productContentEditor.root.innerHTML = product.content;
                }
                if (applicationScenariosEditor && product.application_scenarios) {
                    applicationScenariosEditor.root.innerHTML = product.application_scenarios;
                }
            }, 200);

            // 加载相关产品
            selectedRelatedProducts = product.related_products || [];
            initializeRelatedSuppliers();
            updateSelectedRelatedProductsDisplay();

            // 加载下载文件
            const downloadContainer = document.getElementById('downloadFilesContainer');
            downloadContainer.innerHTML = '';
            downloadCount = 0;

            if (product.data_download && Array.isArray(product.data_download)) {
                product.data_download.forEach(file => {
                    addDownloadFile();
                    const lastRow = downloadContainer.lastElementChild;
                    const inputs = lastRow.querySelectorAll('input');
                    if (inputs.length >= 2) {
                        inputs[0].value = file.file_title || '';
                        inputs[1].value = file.file_path || '';
                    }
                });
            }

            const modal = new bootstrap.Modal(document.getElementById('productModal'));
            modal.show();

            // 初始化编辑器（如果还没有初始化）
            setTimeout(() => {
                if (!productContentEditor || !applicationScenariosEditor) {
                    initializeEditors();
                }
            }, 300);
        }

        function viewProduct(id) {
            const product = projectData.products.find(p => p.id === id);
            if (product) {
                window.open(product.uri, '_blank');
            }
        }

        function deleteProduct(id) {
            const product = projectData.products.find(p => p.id === id);
            if (!product) {
                showError('产品不存在');
                return;
            }

            if (confirm(`确定要删除产品"${product.title}"吗？此操作不可撤销！`)) {
                projectData.products = projectData.products.filter(p => p.id !== id);
                updateProductList();
                updateDashboard();
                showSuccess('产品删除成功！');
            }
        }

        // 保存产品
        function saveProduct() {
            const title = document.getElementById('productTitle').value.trim();
            const model = document.getElementById('productModel').value.trim();
            const summary = document.getElementById('productSummary').value.trim();

            if (!title || !model || !summary) {
                showError('请填写所有必填字段');
                return;
            }

            // 收集产品参数
            const parameters = [];
            document.querySelectorAll('.parameter-row').forEach(row => {
                const inputs = row.querySelectorAll('input');
                if (inputs.length >= 2 && inputs[0].value && inputs[1].value) {
                    parameters.push({
                        name: inputs[0].value,
                        value: inputs[1].value
                    });
                }
            });

            // 收集图片库数据
            const gallery = [];
            document.querySelectorAll('#galleryContainer .gallery-item').forEach((item, index) => {
                const img = item.querySelector('img');
                const altInput = item.querySelector('input[type="text"]');
                const isMainRadio = item.querySelector('input[type="radio"]');

                if (img && img.src) {
                    gallery.push({
                        image: img.src,
                        alt: altInput ? altInput.value : `图片${index + 1}`,
                        is_main: isMainRadio ? isMainRadio.checked : false
                    });
                }
            });

            // 收集下载文件
            const dataDownload = [];
            document.querySelectorAll('.download-file-row').forEach(row => {
                const inputs = row.querySelectorAll('input');
                if (inputs.length >= 2 && inputs[0].value && inputs[1].value) {
                    dataDownload.push({
                        file_title: inputs[0].value,
                        file_path: inputs[1].value
                    });
                }
            });

            // 获取富文本编辑器内容
            const content = productContentEditor ? productContentEditor.root.innerHTML : '';
            const applicationScenarios = applicationScenariosEditor ? applicationScenariosEditor.root.innerHTML : '';

            const productData = {
                title: title,
                model: model,
                summary: summary,
                primary_category: document.getElementById('productPrimaryCategory').value,
                secondary_category: document.getElementById('productSecondaryCategory').value,
                supplier: document.getElementById('productSupplier').value,
                series: document.getElementById('productSeries').value,
                parameters: parameters,
                gallery: gallery,
                content: content,
                application_scenarios: applicationScenarios,
                data_download: dataDownload,
                related_products: selectedRelatedProducts,
                published: new Date().toISOString(),
                status: 'published',
                weight: 1,
                date: new Date().toISOString().split('T')[0]
            };

            if (currentEditingProductId) {
                // 更新现有产品
                const index = projectData.products.findIndex(p => p.id === currentEditingProductId);
                if (index !== -1) {
                    projectData.products[index] = { ...projectData.products[index], ...productData };
                    showSuccess('产品更新成功！');
                }
            } else {
                // 添加新产品
                const newId = model || 'product-' + Date.now();
                projectData.products.push({
                    id: newId,
                    uri: `/products/${newId}/`,
                    ...productData
                });
                showSuccess('产品添加成功！');
            }

            // 生成并保存MD文件
            generateAndSaveMarkdown(productData);

            updateProductList();
            updateDashboard();
            bootstrap.Modal.getInstance(document.getElementById('productModal')).hide();
        }

        // 生成并保存Markdown文件
        async function generateAndSaveMarkdown(productData) {
            try {
                const markdownContent = generateProductMarkdown(productData);
                const fileName = `${productData.model || productData.id}.md`;

                console.log('🔄 开始保存MD文件:', fileName);

                // 优先尝试自动保存
                const success = await autoSaveMarkdownFile(fileName, markdownContent);

                if (!success) {
                    // 如果自动保存失败，提供手动保存选项
                    showSaveOptions(fileName, markdownContent);
                }

            } catch (error) {
                console.error('生成MD文件失败:', error);
                showError('生成MD文件失败: ' + error.message);
            }
        }

        // 自动保存MD文件
        async function autoSaveMarkdownFile(fileName, content) {
            try {
                // 方法1: 尝试使用PHP API
                const response = await fetch('/admin/save-product.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        fileName: fileName,
                        content: content,
                        path: 'content/products/'
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        showSuccess(`✅ 产品MD文件已自动保存到: content/products/${fileName}`);
                        return true;
                    }
                }

                // 方法2: 尝试使用现代浏览器API自动保存
                if ('showSaveFilePicker' in window) {
                    const fileHandle = await window.showSaveFilePicker({
                        suggestedName: fileName,
                        startIn: 'documents',
                        types: [{
                            description: 'Markdown files',
                            accept: { 'text/markdown': ['.md'] }
                        }]
                    });

                    const writable = await fileHandle.createWritable();
                    await writable.write(content);
                    await writable.close();

                    showSuccess(`✅ 产品MD文件已保存: ${fileName}`);
                    showInfo('💡 请将文件移动到项目的 content/products/ 目录');
                    return true;
                }

                return false;

            } catch (error) {
                console.log('自动保存失败:', error);
                return false;
            }
        }

        // 显示保存选项
        function showSaveOptions(fileName, content) {
            const modalHtml = `
                <div class="modal fade" id="saveOptionsModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">保存产品MD文件</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <p>文件名: <strong>${fileName}</strong></p>
                                <p>请选择保存方式:</p>
                                <div class="d-grid gap-2">
                                    <button class="btn btn-primary" onclick="downloadMarkdownFile('${fileName}', \`${content.replace(/`/g, '\\`')}\`)">
                                        <i class="fas fa-download me-2"></i>下载到本地
                                    </button>
                                    <button class="btn btn-outline-primary" onclick="copyToClipboard(\`${content.replace(/`/g, '\\`')}\`)">
                                        <i class="fas fa-copy me-2"></i>复制内容到剪贴板
                                    </button>
                                </div>
                                <div class="mt-3">
                                    <small class="text-muted">
                                        💡 下载后请将文件放入项目的 <code>content/products/</code> 目录
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', modalHtml);
            const modal = new bootstrap.Modal(document.getElementById('saveOptionsModal'));
            modal.show();

            // 模态框关闭时移除
            document.getElementById('saveOptionsModal').addEventListener('hidden.bs.modal', function() {
                this.remove();
            });
        }

        // 复制到剪贴板
        async function copyToClipboard(text) {
            try {
                await navigator.clipboard.writeText(text);
                showSuccess('✅ 内容已复制到剪贴板');
                bootstrap.Modal.getInstance(document.getElementById('saveOptionsModal')).hide();
            } catch (error) {
                showError('复制失败: ' + error.message);
            }
        }

        // 调试相关产品功能
        function debugRelatedProducts() {
            console.log('🐛 相关产品调试信息');
            console.log('='.repeat(50));

            // 检查产品数据
            console.log('📦 产品数据状态:');
            console.log('  - 产品总数:', projectData.products ? projectData.products.length : 0);
            console.log('  - 产品数据样本:', projectData.products ? projectData.products.slice(0, 3) : []);

            if (projectData.products && projectData.products.length > 0) {
                // 按供应商分组
                const supplierGroups = projectData.products.reduce((groups, product) => {
                    const supplier = product.supplier || '未知供应商';
                    if (!groups[supplier]) groups[supplier] = [];
                    groups[supplier].push(product.model || product.id);
                    return groups;
                }, {});

                console.log('🏢 按供应商分组:');
                Object.entries(supplierGroups).forEach(([supplier, products]) => {
                    console.log(`  - ${supplier}: ${products.length}个产品`);
                    console.log(`    产品: ${products.join(', ')}`);
                });

                // 测试供应商匹配
                console.log('🔍 测试供应商匹配:');
                const testSupplier = '深圳市微视光电科技有限公司';
                const matchedProducts = projectData.products.filter(p => {
                    const exactMatch = p.supplier === testSupplier;
                    const includesMatch = p.supplier && (p.supplier.includes('微视') || testSupplier.includes('微视'));
                    console.log(`  产品 ${p.model}: supplier="${p.supplier}", exactMatch=${exactMatch}, includesMatch=${includesMatch}`);
                    return exactMatch || includesMatch;
                });
                console.log(`  匹配结果: ${matchedProducts.length}个产品`);
            }

            // 检查DOM元素
            console.log('🎯 DOM元素状态:');
            const supplierSelect = document.getElementById('relatedSupplier');
            const productSelect = document.getElementById('relatedProduct');

            console.log('  - 供应商选择框:', supplierSelect ? '存在' : '不存在');
            console.log('  - 产品选择框:', productSelect ? '存在' : '不存在');

            if (supplierSelect) {
                console.log('  - 供应商选项数量:', supplierSelect.options.length);
                console.log('  - 当前选择的供应商:', supplierSelect.value);
                for (let i = 0; i < supplierSelect.options.length; i++) {
                    console.log(`    选项${i}: "${supplierSelect.options[i].value}" - ${supplierSelect.options[i].text}`);
                }
            }

            if (productSelect) {
                console.log('  - 产品选项数量:', productSelect.options.length);
                console.log('  - 当前选择的产品:', productSelect.value);
                for (let i = 0; i < productSelect.options.length; i++) {
                    console.log(`    选项${i}: "${productSelect.options[i].value}" - ${productSelect.options[i].text}`);
                }
            }

            console.log('='.repeat(50));

            // 手动测试更新相关产品
            if (supplierSelect && supplierSelect.value) {
                console.log('🧪 手动测试更新相关产品...');
                updateRelatedProducts();
            }

            // 重新初始化
            console.log('🔄 重新初始化相关产品功能...');
            initializeRelatedSuppliers();

            // 显示调试信息给用户
            const debugInfo = `
调试信息：
- 产品总数: ${projectData.products ? projectData.products.length : 0}
- 供应商选择框: ${supplierSelect ? '正常' : '异常'}
- 产品选择框: ${productSelect ? '正常' : '异常'}
- 当前选择的供应商: ${supplierSelect ? supplierSelect.value : '无'}
- 详细信息请查看浏览器控制台
            `;

            alert(debugInfo);
        }

        // 强制刷新相关产品数据
        async function forceRefreshRelatedProducts() {
            try {
                showLoading();
                console.log('🔄 强制刷新相关产品数据...');

                // 重新加载项目数据
                await loadProjectData();

                // 重新初始化相关产品功能
                initializeRelatedSuppliers();

                // 清空产品选择
                const productSelect = document.getElementById('relatedProduct');
                if (productSelect) {
                    productSelect.innerHTML = '<option value="">选择产品</option>';
                }

                hideLoading();
                showSuccess(`相关产品数据已刷新！当前产品数量: ${projectData.products ? projectData.products.length : 0}`);

            } catch (error) {
                console.error('刷新相关产品数据失败:', error);
                hideLoading();
                showError('刷新失败: ' + error.message);
            }
        }

        // 初始化产品表单选项
        function initializeProductFormOptions() {
            console.log('🔄 初始化产品表单选项...');

            // 生成基于实际数据的分类和系列映射
            generateCategoryHierarchy();
            generateSupplierSeriesMap();

            // 初始化主要分类选项
            initializePrimaryCategories();

            // 初始化供应商选项
            initializeSupplierOptions();

            console.log('✅ 产品表单选项初始化完成');
        }

        // 初始化主要分类选项
        function initializePrimaryCategories() {
            const categorySelect = document.getElementById('productPrimaryCategory');
            if (!categorySelect) return;

            console.log('📋 初始化主要分类选项...');

            // 保留默认选项
            categorySelect.innerHTML = '<option value="">选择主要分类</option>';

            // 从实际产品数据中提取分类
            const categories = new Set();
            if (projectData.products && projectData.products.length > 0) {
                projectData.products.forEach(product => {
                    if (product.primary_category) {
                        categories.add(product.primary_category);
                    }
                });
            }

            // 如果没有数据，添加默认分类
            if (categories.size === 0) {
                categories.add('电子内窥镜');
            }

            // 添加分类选项
            const sortedCategories = Array.from(categories).sort();
            sortedCategories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });

            console.log('📋 主要分类选项:', sortedCategories);
        }

        // 初始化供应商选项
        function initializeSupplierOptions() {
            const supplierSelect = document.getElementById('productSupplier');
            if (!supplierSelect) return;

            console.log('🏢 初始化供应商选项...');

            // 保留默认选项
            supplierSelect.innerHTML = '<option value="">选择供应商</option>';

            // 从实际产品数据中提取供应商
            const suppliers = new Set();
            if (projectData.products && projectData.products.length > 0) {
                projectData.products.forEach(product => {
                    if (product.supplier) {
                        suppliers.add(product.supplier);
                    }
                });
            }

            // 如果没有数据，添加默认供应商
            if (suppliers.size === 0) {
                suppliers.add('深圳市微视光电科技有限公司');
            }

            // 添加供应商选项
            const sortedSuppliers = Array.from(suppliers).sort();
            sortedSuppliers.forEach(supplier => {
                const option = document.createElement('option');
                option.value = supplier;
                option.textContent = supplier;
                supplierSelect.appendChild(option);
            });

            console.log('🏢 供应商选项:', sortedSuppliers);
        }

        // 自动保存到项目目录
        async function saveToProjectDirectory(fileName, content) {
            try {
                // 方法1: 尝试使用PHP保存API
                const phpResponse = await fetch('/admin/save-product.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        fileName: fileName,
                        content: content,
                        path: 'content/products/'
                    })
                });

                if (phpResponse.ok) {
                    const result = await phpResponse.json();
                    if (result.success) {
                        showSuccess(`✅ 产品MD文件已自动保存到: content/products/${fileName}`);
                        return true;
                    }
                }

                // 方法2: 尝试使用File System Access API
                if ('showDirectoryPicker' in window) {
                    try {
                        // 自动选择项目根目录
                        const dirHandle = await window.showDirectoryPicker({
                            mode: 'readwrite',
                            startIn: 'documents'
                        });

                        // 自动导航到content/products目录
                        let targetHandle = dirHandle;

                        // 尝试找到content目录
                        try {
                            targetHandle = await dirHandle.getDirectoryHandle('content');
                            console.log('✅ 找到content目录');
                        } catch (e) {
                            // 如果当前目录就是content，继续
                            if (dirHandle.name === 'content') {
                                targetHandle = dirHandle;
                            } else {
                                throw new Error('请选择项目根目录或content目录');
                            }
                        }

                        // 尝试找到products目录
                        try {
                            const productsHandle = await targetHandle.getDirectoryHandle('products');
                            console.log('✅ 找到products目录');

                            // 保存文件
                            const fileHandle = await productsHandle.getFileHandle(fileName, { create: true });
                            const writable = await fileHandle.createWritable();
                            await writable.write(content);
                            await writable.close();

                            showSuccess(`✅ 产品MD文件已保存到: content/products/${fileName}`);
                            return true;

                        } catch (e) {
                            console.log('❌ 未找到products目录:', e);
                            throw new Error('未找到content/products目录，请确保选择了正确的项目目录');
                        }

                    } catch (e) {
                        console.log('File System Access API失败:', e);
                        showError('自动保存失败: ' + e.message);
                    }
                }

                // 方法3: 尝试使用简单的文件写入API
                const simpleResponse = await fetch('/save-file', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        path: `content/products/${fileName}`,
                        content: content
                    })
                });

                if (simpleResponse.ok) {
                    showSuccess(`✅ 产品MD文件已保存到: content/products/${fileName}`);
                    return true;
                }

                return false;

            } catch (error) {
                console.log('所有自动保存方法都失败，将下载文件:', error);
                return false;
            }
        }

        // 下载Markdown文件
        function downloadMarkdownFile(fileName, content) {
            const blob = new Blob([content], { type: 'text/markdown;charset=utf-8' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = fileName;
            link.style.display = 'none';

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);

            showSuccess(`产品MD文件已下载: ${fileName}，请将文件放入 content/products/ 目录`);
        }

        // 生成产品Markdown内容
        function generateProductMarkdown(productData) {
            const now = new Date().toISOString();

            let markdown = `---
title: "${productData.title}"
summary: ${productData.summary}
primary_category: "${productData.primary_category}"
secondary_category: "${productData.secondary_category}"
model: "${productData.model}"
series: "${productData.series}"
supplier: "${productData.supplier}"
published: ${now}
`;

            // 添加图片库
            if (productData.gallery && productData.gallery.length > 0) {
                markdown += `gallery:\n`;
                productData.gallery.forEach(img => {
                    markdown += `  - image: "${img.image}"\n`;
                    markdown += `    alt: "${img.alt || ''}"\n`;
                    markdown += `    is_main: ${img.is_main || false}\n`;
                });
            }

            // 添加参数
            if (productData.parameters && productData.parameters.length > 0) {
                markdown += `parameters:\n`;
                productData.parameters.forEach(param => {
                    markdown += `  - name: "${param.name}"\n`;
                    markdown += `    value: "${param.value}"\n`;
                });
            }

            // 添加应用场景
            if (productData.application_scenarios) {
                markdown += `application_scenarios: |\n`;
                const scenarios = productData.application_scenarios.replace(/\n/g, '\n  ');
                markdown += `  ${scenarios}\n`;
            }

            // 添加下载文件
            if (productData.data_download && productData.data_download.length > 0) {
                markdown += `data_download:\n`;
                productData.data_download.forEach(file => {
                    markdown += `  - file_title: "${file.file_title}"\n`;
                    markdown += `    file_path: "${file.file_path}"\n`;
                });
            }

            // 添加相关产品
            if (productData.related_products && productData.related_products.length > 0) {
                markdown += `related_products:\n`;
                productData.related_products.forEach(productId => {
                    markdown += `  - "${productId}"\n`;
                });
            }

            markdown += `---\n\n`;

            // 添加产品详细内容
            if (productData.content) {
                // 将HTML转换为Markdown并处理图片路径
                let content = productData.content;

                // 处理图片标签，转换路径
                content = content.replace(/<img[^>]*src="([^"]*)"[^>]*>/g, (match, src) => {
                    // 转换图片路径为相对路径
                    let imagePath = src;
                    if (src.startsWith('data:')) {
                        // 如果是base64图片，保持原样或提示需要上传
                        return `![图片](${src})`;
                    } else if (src.startsWith('/')) {
                        // 绝对路径转换为相对路径
                        imagePath = src.replace(/^\//, '');
                    }
                    return `![图片](/${imagePath})`;
                });

                // 将HTML转换为Markdown
                content = content.replace(/<h1>/g, '# ').replace(/<\/h1>/g, '\n\n');
                content = content.replace(/<h2>/g, '## ').replace(/<\/h2>/g, '\n\n');
                content = content.replace(/<h3>/g, '### ').replace(/<\/h3>/g, '\n\n');
                content = content.replace(/<p>/g, '').replace(/<\/p>/g, '\n\n');
                content = content.replace(/<strong>/g, '**').replace(/<\/strong>/g, '**');
                content = content.replace(/<em>/g, '*').replace(/<\/em>/g, '*');
                content = content.replace(/<br>/g, '\n');
                content = content.replace(/<ul>/g, '').replace(/<\/ul>/g, '\n');
                content = content.replace(/<ol>/g, '').replace(/<\/ol>/g, '\n');
                content = content.replace(/<li>/g, '- ').replace(/<\/li>/g, '\n');
                content = content.replace(/<[^>]*>/g, ''); // 移除其他HTML标签

                // 清理多余的空行
                content = content.replace(/\n{3,}/g, '\n\n');

                markdown += content;
            } else {
                markdown += `**${productData.title}以${productData.model}型号，专为工业检测打造，具备专业的检测能力和可靠的性能表现。**\n\n`;
            }

            return markdown;
        }

        // 数据提取辅助函数
        function extractModelFromTitle(title) {
            // 从标题中提取型号，支持多种格式
            // WS-K08510, WS-P-08510, ZB-K3920, product-p08510, product-dz60

            // 匹配 WS-K08510, WS-P-08510, ZB-K3920 格式
            let modelMatch = title.match(/([A-Z]{1,3}-[A-Z]?\d{4,6}[A-Za-z]?)/);
            if (modelMatch) {
                return modelMatch[1];
            }

            // 匹配 WS-P08510 格式（无中间横线）
            modelMatch = title.match(/([A-Z]{2,3}[A-Z]?\d{4,6})/);
            if (modelMatch) {
                return modelMatch[1];
            }

            // 从文件名提取，如 product-p08510 -> P08510
            if (title.includes('product-')) {
                const fileMatch = title.match(/product-([a-z]+\d+)/i);
                if (fileMatch) {
                    return fileMatch[1].toUpperCase();
                }
            }

            return title.split(' ')[0] || title.substring(0, 10);
        }

        function extractSeriesFromTitle(title) {
            const upperTitle = title.toUpperCase();
            if (upperTitle.includes('WS-K') || upperTitle.includes('ZB-K')) return 'K系列';
            if (upperTitle.includes('WS-P') || upperTitle.includes('P-') || upperTitle.includes('PRODUCT-P')) return 'P系列';
            if (upperTitle.includes('DZ') || upperTitle.includes('PRODUCT-DZ')) return 'DZ系列';
            if (upperTitle.includes('VIS-P')) return 'VIS-P系列';
            if (upperTitle.includes('VIS-T')) return 'VIS-T系列';
            return 'K系列'; // 默认
        }

        function extractSupplierFromContent(content) {
            const lowerContent = content.toLowerCase();
            if (lowerContent.includes('微视') || lowerContent.includes('深圳')) {
                return '深圳市微视光电科技有限公司';
            }
            if (lowerContent.includes('维森') || lowerContent.includes('天津')) {
                return '天津维森科技有限公司';
            }
            if (lowerContent.includes('智博') || lowerContent.includes('北京')) {
                return '北京智博检测设备有限公司';
            }
            return null; // 返回null让其他函数处理
        }

        function extractSupplierFromTitle(title) {
            const upperTitle = title.toUpperCase();
            // 根据产品型号前缀判断供应商
            if (upperTitle.includes('WS-') || upperTitle.includes('微视')) {
                return '深圳市微视光电科技有限公司';
            }
            if (upperTitle.includes('ZB-') || upperTitle.includes('圳本')) {
                return '深圳市微视光电科技有限公司'; // ZB系列也属于微视
            }
            if (upperTitle.includes('VIS-') || upperTitle.includes('维森')) {
                return '天津维森科技有限公司';
            }
            return '深圳市微视光电科技有限公司'; // 默认
        }

        function extractSummaryFromTitle(title) {
            if (title.includes('超细')) return '超细直径，高清成像，适用于极小空间检测';
            if (title.includes('便携')) return '便携式设计，适合现场检测';
            if (title.includes('高清')) return '高清成像，专业工业检测';
            return title + ' 专业检测设备';
        }

        function extractSecondaryCategory(title) {
            if (title.includes('超细')) return '超细内窥镜';
            if (title.includes('便携')) return '便携式内窥镜';
            if (title.includes('高清')) return '高清内窥镜';
            return '工业视频内窥镜';
        }

        function extractCategoryFromContent(content) {
            return '电子内窥镜';
        }

        function extractNewsCategoryFromContent(content) {
            return '行业资讯';
        }

        function extractCaseCategoryFromContent(content) {
            return '应用案例';
        }

        function extractIndustryFromContent(content) {
            return '工业检测';
        }

        // 清空产品表单
        function clearProductForm() {
            document.getElementById('productTitle').value = '';
            document.getElementById('productModel').value = '';
            document.getElementById('productSummary').value = '';
            document.getElementById('productPrimaryCategory').value = '';
            document.getElementById('productSecondaryCategory').value = '';
            document.getElementById('productSupplier').value = '';
            document.getElementById('productSeries').value = '';

            // 清空参数容器
            const container = document.getElementById('parametersContainer');
            container.innerHTML = '';
            parametersCount = 0;

            // 清空图片库
            const galleryContainer = document.getElementById('galleryContainer');
            galleryContainer.innerHTML = '';
            productGallery = [];
            galleryCount = 0;

            // 清空富文本编辑器
            if (productContentEditor) {
                productContentEditor.setContents([]);
            }
            if (applicationScenariosEditor) {
                applicationScenariosEditor.setContents([]);
            }

            // 清空相关产品
            selectedRelatedProducts = [];
            updateSelectedRelatedProductsDisplay();

            // 清空下载文件
            const downloadContainer = document.getElementById('downloadFilesContainer');
            downloadContainer.innerHTML = '';
            downloadFiles = [];
            downloadCount = 0;

            // 重置次要分类和产品系列选项
            updateSecondaryCategories();
            updateSeriesOptions();

            // 初始化相关产品供应商选项
            initializeRelatedSuppliers();
        }

        // 通用编辑和删除功能
        function editItem(type, id) {
            showSuccess(`编辑${type}: ${id}`);
        }

        function deleteItem(type, id) {
            if (confirm(`确定要删除这个${type}吗？`)) {
                showSuccess(`删除${type}功能开发中...`);
            }
        }



        // 其他过滤函数
        function filterSuppliers() {
            const searchTerm = document.getElementById('supplierSearch').value.toLowerCase();
            const rows = document.querySelectorAll('#supplierList tr');

            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        }

        function filterCategories() {
            const searchTerm = document.getElementById('categorySearch').value.toLowerCase();
            const rows = document.querySelectorAll('#categoryList tr');

            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        }

        function filterNews() {
            const searchTerm = document.getElementById('newsSearch').value.toLowerCase();
            const rows = document.querySelectorAll('#newsList tr');

            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        }

        function filterCases() {
            const searchTerm = document.getElementById('caseSearch').value.toLowerCase();
            const rows = document.querySelectorAll('#caseList tr');

            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        }

        function filterApplications() {
            const searchTerm = document.getElementById('applicationSearch').value.toLowerCase();
            const rows = document.querySelectorAll('#applicationList tr');

            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        }

        // 媒体库相关函数
        function filterMedia() {
            console.log('过滤媒体文件');
        }

        function setMediaView(viewType) {
            const buttons = document.querySelectorAll('.btn-group button');
            buttons.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            console.log('设置媒体视图:', viewType);
        }

        // 媒体库数据
        let mediaLibrary = [
            {
                id: 'media-1',
                name: 'news-1.jpeg',
                type: 'image',
                category: '资讯图片',
                size: '245KB',
                url: '/images/news/news-1.jpeg',
                uploadDate: '2024-01-15'
            },
            {
                id: 'media-2',
                name: '展会.webp',
                type: 'image',
                category: '资讯图片',
                size: '189KB',
                url: '/images/news/展会.webp',
                uploadDate: '2024-01-14'
            },
            {
                id: 'media-3',
                name: 'case-2.jpg',
                type: 'image',
                category: '案例图片',
                size: '312KB',
                url: '/images/cases/case-2.jpg',
                uploadDate: '2024-01-13'
            },
            {
                id: 'media-4',
                name: 'K-main.jpg',
                type: 'image',
                category: '产品图片',
                size: '456KB',
                url: '/images/products/K-series/K-main.jpg',
                uploadDate: '2024-01-12'
            },
            {
                id: 'media-5',
                name: 'P-main.jpg',
                type: 'image',
                category: '产品图片',
                size: '398KB',
                url: '/images/products/P-series/P-main.jpg',
                uploadDate: '2024-01-12'
            },
            {
                id: 'doc-1',
                name: '产品规格书.pdf',
                type: 'document',
                category: '产品文档',
                size: '2.3MB',
                url: '/uploads/产品规格书.pdf',
                uploadDate: '2024-01-10'
            },
            {
                id: 'doc-2',
                name: '使用说明书.pdf',
                type: 'document',
                category: '产品文档',
                size: '1.8MB',
                url: '/uploads/使用说明书.pdf',
                uploadDate: '2024-01-10'
            },
            {
                id: 'doc-3',
                name: '技术参数表.xlsx',
                type: 'document',
                category: '技术文档',
                size: '156KB',
                url: '/uploads/技术参数表.xlsx',
                uploadDate: '2024-01-09'
            }
        ];

        // 动态生成的产品分类层级数据
        let categoryHierarchy = {};

        // 动态生成的供应商产品系列映射
        let supplierSeriesMap = {};

        // 根据实际产品数据生成分类层级
        function generateCategoryHierarchy() {
            categoryHierarchy = {};

            if (projectData.products && projectData.products.length > 0) {
                projectData.products.forEach(product => {
                    const primary = product.primary_category;
                    const secondary = product.secondary_category;

                    if (primary) {
                        if (!categoryHierarchy[primary]) {
                            categoryHierarchy[primary] = new Set();
                        }
                        if (secondary) {
                            categoryHierarchy[primary].add(secondary);
                        }
                    }
                });

                // 转换Set为Array
                Object.keys(categoryHierarchy).forEach(key => {
                    categoryHierarchy[key] = Array.from(categoryHierarchy[key]).sort();
                });
            }

            // 如果没有数据，使用默认分类
            if (Object.keys(categoryHierarchy).length === 0) {
                categoryHierarchy = {
                    '电子内窥镜': ['工业视频内窥镜', '便携式内窥镜', '高清内窥镜', '超细内窥镜']
                };
            }

            console.log('📋 生成的分类层级:', categoryHierarchy);
        }

        // 根据实际产品数据生成供应商系列映射
        function generateSupplierSeriesMap() {
            supplierSeriesMap = {};

            if (projectData.products && projectData.products.length > 0) {
                projectData.products.forEach(product => {
                    const supplier = product.supplier;
                    const series = product.series;

                    if (supplier) {
                        if (!supplierSeriesMap[supplier]) {
                            supplierSeriesMap[supplier] = new Set();
                        }
                        if (series) {
                            supplierSeriesMap[supplier].add(series);
                        }
                    }
                });

                // 转换Set为Array
                Object.keys(supplierSeriesMap).forEach(key => {
                    supplierSeriesMap[key] = Array.from(supplierSeriesMap[key]).sort();
                });
            }

            // 如果没有数据，使用默认系列
            if (Object.keys(supplierSeriesMap).length === 0) {
                supplierSeriesMap = {
                    '深圳市微视光电科技有限公司': ['K系列', 'P系列', 'DZ系列']
                };
            }

            console.log('🏢 生成的供应商系列映射:', supplierSeriesMap);
        }

        // 供应商管理功能
        let currentEditingSupplier = null;
        let suppliersData = projectData.suppliers || [];

        // 显示供应商模态框
        function showSupplierModal(supplierId = null) {
            currentEditingSupplier = supplierId;
            clearSupplierForm();

            if (supplierId) {
                const supplier = suppliersData.find(s => s.id === supplierId);
                if (supplier) {
                    fillSupplierForm(supplier);
                    document.getElementById('supplierModalTitle').innerHTML = '<i class="fas fa-truck me-2"></i>编辑供应商';
                } else {
                    showError('未找到指定的供应商');
                    return;
                }
            } else {
                document.getElementById('supplierModalTitle').innerHTML = '<i class="fas fa-truck me-2"></i>添加供应商';
            }

            const modal = new bootstrap.Modal(document.getElementById('supplierModal'));
            modal.show();
        }

        // 清空供应商表单
        function clearSupplierForm() {
            document.getElementById('supplierForm').reset();
        }

        // 填充供应商表单
        function fillSupplierForm(supplier) {
            document.getElementById('supplierName').value = supplier.name || '';
            document.getElementById('supplierContact').value = supplier.contact || '';
            document.getElementById('supplierPhone').value = supplier.phone || '';
            document.getElementById('supplierEmail').value = supplier.email || '';
            document.getElementById('supplierAddress').value = supplier.address || '';
            document.getElementById('supplierWebsite').value = supplier.website || '';
            document.getElementById('supplierStatus').value = supplier.status || 'active';
            document.getElementById('supplierDescription').value = supplier.description || '';
        }

        // 保存供应商
        function saveSupplier() {
            const form = document.getElementById('supplierForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const supplierData = {
                id: currentEditingSupplier || generateId(),
                name: document.getElementById('supplierName').value.trim(),
                contact: document.getElementById('supplierContact').value.trim(),
                phone: document.getElementById('supplierPhone').value.trim(),
                email: document.getElementById('supplierEmail').value.trim(),
                address: document.getElementById('supplierAddress').value.trim(),
                website: document.getElementById('supplierWebsite').value.trim(),
                status: document.getElementById('supplierStatus').value,
                description: document.getElementById('supplierDescription').value.trim(),
                created_date: currentEditingSupplier ?
                    suppliersData.find(s => s.id === currentEditingSupplier)?.created_date :
                    new Date().toISOString().split('T')[0],
                updated_date: new Date().toISOString().split('T')[0]
            };

            if (currentEditingSupplier) {
                // 更新现有供应商
                const index = suppliersData.findIndex(s => s.id === currentEditingSupplier);
                if (index !== -1) {
                    suppliersData[index] = supplierData;
                    showSuccess('供应商更新成功！');
                }
            } else {
                // 添加新供应商
                suppliersData.push(supplierData);
                showSuccess('供应商添加成功！');
            }

            updateSupplierList();
            updateDashboard();
            bootstrap.Modal.getInstance(document.getElementById('supplierModal')).hide();
        }

        // 删除供应商
        function deleteSupplier(id) {
            const supplier = suppliersData.find(s => s.id === id);
            if (!supplier) {
                showError('未找到指定的供应商');
                return;
            }

            // 检查是否有产品关联此供应商
            const relatedProducts = projectData.products ?
                projectData.products.filter(p => p.supplier === supplier.name) : [];

            if (relatedProducts.length > 0) {
                if (!confirm(`供应商"${supplier.name}"有 ${relatedProducts.length} 个关联产品，确定要删除吗？删除后相关产品的供应商信息将被清空。`)) {
                    return;
                }

                // 清空相关产品的供应商信息
                relatedProducts.forEach(product => {
                    product.supplier = '';
                    product.series = '';
                });
            } else {
                if (!confirm(`确定要删除供应商"${supplier.name}"吗？此操作不可撤销！`)) {
                    return;
                }
            }

            suppliersData = suppliersData.filter(s => s.id !== id);
            updateSupplierList();
            updateDashboard();
            showSuccess('供应商删除成功！');
        }

        // 更新供应商列表
        function updateSupplierList() {
            const tbody = document.getElementById('supplierList');

            console.log('🔍 更新供应商列表，当前供应商数量:', suppliersData.length);

            if (!suppliersData || suppliersData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9" class="text-center text-muted">暂无供应商数据</td></tr>';
                document.getElementById('supplierPaginationInfo').textContent = '显示 0 个供应商';
                return;
            }

            // 应用过滤器
            let filteredSuppliers = [...suppliersData];

            const searchTerm = document.getElementById('supplierSearch')?.value.toLowerCase() || '';
            const statusFilter = document.getElementById('supplierStatusFilter')?.value || '';

            if (searchTerm) {
                filteredSuppliers = filteredSuppliers.filter(supplier =>
                    supplier.name.toLowerCase().includes(searchTerm) ||
                    supplier.contact.toLowerCase().includes(searchTerm)
                );
            }

            if (statusFilter) {
                filteredSuppliers = filteredSuppliers.filter(supplier => supplier.status === statusFilter);
            }

            // 获取当前页的数据
            const paginatedSuppliers = getPaginatedData(filteredSuppliers, currentPages.suppliers || 1);

            tbody.innerHTML = paginatedSuppliers.map(supplier => {
                const productCount = projectData.products ?
                    projectData.products.filter(p => p.supplier === supplier.name).length : 0;

                return `
                    <tr data-supplier-id="${supplier.id}">
                        <td>
                            <strong>${supplier.name}</strong>
                            ${supplier.description ? `<br><small class="text-muted">${supplier.description.substring(0, 50)}${supplier.description.length > 50 ? '...' : ''}</small>` : ''}
                        </td>
                        <td>${supplier.contact}</td>
                        <td>${supplier.phone}</td>
                        <td>${supplier.email || '-'}</td>
                        <td>
                            ${supplier.address ? `<small>${supplier.address.substring(0, 30)}${supplier.address.length > 30 ? '...' : ''}</small>` : '-'}
                        </td>
                        <td><span class="badge bg-info">${productCount}</span></td>
                        <td><span class="status-badge status-${supplier.status}">${supplier.status === 'active' ? '活跃' : '停用'}</span></td>
                        <td>${supplier.created_date}</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary" onclick="showSupplierModal('${supplier.id}')" title="编辑">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-outline-danger" onclick="deleteSupplier('${supplier.id}')" title="删除">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');

            // 更新分页信息
            document.getElementById('supplierPaginationInfo').textContent =
                `显示 ${filteredSuppliers.length} 个供应商`;

            // 创建分页
            createPagination('suppliers', filteredSuppliers.length, currentPages.suppliers || 1);
        }

        // 过滤供应商
        function filterSuppliers() {
            currentPages.suppliers = 1; // 重置到第一页
            updateSupplierList();
        }

        // 清除供应商过滤器
        function clearSupplierFilters() {
            document.getElementById('supplierSearch').value = '';
            document.getElementById('supplierStatusFilter').value = '';
            filterSuppliers();
        }

        // 从产品数据中初始化供应商
        function initializeSuppliersFromProducts() {
            console.log('🏢 从产品数据中初始化供应商...');

            if (!projectData.products || projectData.products.length === 0) {
                console.log('⚠️ 没有产品数据，跳过供应商初始化');
                return;
            }

            const supplierMap = new Map();

            projectData.products.forEach(product => {
                if (product.supplier) {
                    if (!supplierMap.has(product.supplier)) {
                        supplierMap.set(product.supplier, {
                            id: generateId(),
                            name: product.supplier,
                            contact: '待完善',
                            phone: '待完善',
                            email: '',
                            address: '',
                            website: '',
                            status: 'active',
                            description: `${product.supplier}是我们的合作供应商`,
                            created_date: '2025-01-01',
                            updated_date: new Date().toISOString().split('T')[0]
                        });
                    }
                }
            });

            suppliersData = Array.from(supplierMap.values());
            console.log(`✅ 成功初始化 ${suppliersData.length} 个供应商:`, suppliersData.map(s => s.name));
        }

        // 分类管理功能
        let currentEditingCategory = null;
        let categoriesData = projectData.categories || [];

        // 显示分类模态框
        function showCategoryModal(categoryId = null) {
            currentEditingCategory = categoryId;
            clearCategoryForm();

            if (categoryId) {
                const category = categoriesData.find(c => c.id === categoryId);
                if (category) {
                    fillCategoryForm(category);
                    document.getElementById('categoryModalTitle').innerHTML = '<i class="fas fa-tags me-2"></i>编辑分类';
                } else {
                    showError('未找到指定的分类');
                    return;
                }
            } else {
                document.getElementById('categoryModalTitle').innerHTML = '<i class="fas fa-tags me-2"></i>添加分类';
            }

            updateParentCategoryOptions();
            const modal = new bootstrap.Modal(document.getElementById('categoryModal'));
            modal.show();
        }

        // 清空分类表单
        function clearCategoryForm() {
            document.getElementById('categoryForm').reset();
            document.getElementById('parentCategoryGroup').style.display = 'none';
        }

        // 填充分类表单
        function fillCategoryForm(category) {
            document.getElementById('categoryName').value = category.name || '';
            document.getElementById('categoryType').value = category.type || '';
            document.getElementById('categoryParent').value = category.parent || '';
            document.getElementById('categoryIcon').value = category.icon || '';
            document.getElementById('categoryWeight').value = category.weight || 1;
            document.getElementById('categoryStatus').value = category.status || 'active';
            document.getElementById('categoryDescription').value = category.description || '';

            if (category.type === 'secondary') {
                document.getElementById('parentCategoryGroup').style.display = 'block';
            }
        }

        // 更新父级分类选项
        function updateParentCategoryOptions() {
            const typeSelect = document.getElementById('categoryType');
            const parentGroup = document.getElementById('parentCategoryGroup');
            const parentSelect = document.getElementById('categoryParent');

            if (typeSelect.value === 'secondary') {
                parentGroup.style.display = 'block';

                // 填充主要分类选项
                parentSelect.innerHTML = '<option value="">选择父级分类</option>';
                const primaryCategories = categoriesData.filter(c => c.type === 'primary');
                primaryCategories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.name;
                    option.textContent = category.name;
                    parentSelect.appendChild(option);
                });
            } else {
                parentGroup.style.display = 'none';
                parentSelect.value = '';
            }
        }

        // 保存分类
        function saveCategory() {
            const form = document.getElementById('categoryForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const categoryData = {
                id: currentEditingCategory || generateId(),
                name: document.getElementById('categoryName').value.trim(),
                type: document.getElementById('categoryType').value,
                parent: document.getElementById('categoryParent').value,
                icon: document.getElementById('categoryIcon').value.trim(),
                weight: parseInt(document.getElementById('categoryWeight').value) || 1,
                status: document.getElementById('categoryStatus').value,
                description: document.getElementById('categoryDescription').value.trim(),
                created_date: currentEditingCategory ?
                    categoriesData.find(c => c.id === currentEditingCategory)?.created_date :
                    new Date().toISOString().split('T')[0],
                updated_date: new Date().toISOString().split('T')[0]
            };

            // 验证分类名称唯一性
            const existingCategory = categoriesData.find(c =>
                c.name === categoryData.name && c.id !== currentEditingCategory
            );
            if (existingCategory) {
                showError('分类名称已存在，请使用其他名称');
                return;
            }

            if (currentEditingCategory) {
                // 更新现有分类
                const index = categoriesData.findIndex(c => c.id === currentEditingCategory);
                if (index !== -1) {
                    categoriesData[index] = categoryData;
                    showSuccess('分类更新成功！');
                }
            } else {
                // 添加新分类
                categoriesData.push(categoryData);
                showSuccess('分类添加成功！');
            }

            updateCategoryList();
            updateDashboard();
            bootstrap.Modal.getInstance(document.getElementById('categoryModal')).hide();
        }

        // 删除分类
        function deleteCategory(id) {
            const category = categoriesData.find(c => c.id === id);
            if (!category) {
                showError('未找到指定的分类');
                return;
            }

            // 检查是否有产品使用此分类
            const relatedProducts = projectData.products ?
                projectData.products.filter(p =>
                    p.primary_category === category.name ||
                    p.secondary_category === category.name
                ) : [];

            if (relatedProducts.length > 0) {
                if (!confirm(`分类"${category.name}"有 ${relatedProducts.length} 个关联产品，确定要删除吗？删除后相关产品的分类信息将被清空。`)) {
                    return;
                }

                // 清空相关产品的分类信息
                relatedProducts.forEach(product => {
                    if (product.primary_category === category.name) {
                        product.primary_category = '';
                    }
                    if (product.secondary_category === category.name) {
                        product.secondary_category = '';
                    }
                });
            } else {
                if (!confirm(`确定要删除分类"${category.name}"吗？此操作不可撤销！`)) {
                    return;
                }
            }

            // 检查是否有子分类
            const childCategories = categoriesData.filter(c => c.parent === category.name);
            if (childCategories.length > 0) {
                if (!confirm(`分类"${category.name}"有 ${childCategories.length} 个子分类，删除后子分类将变为主要分类，确定继续吗？`)) {
                    return;
                }

                // 将子分类转换为主要分类
                childCategories.forEach(child => {
                    child.type = 'primary';
                    child.parent = '';
                });
            }

            categoriesData = categoriesData.filter(c => c.id !== id);
            updateCategoryList();
            updateDashboard();
            showSuccess('分类删除成功！');
        }

        // 更新分类列表
        function updateCategoryList() {
            const tbody = document.getElementById('categoryList');

            console.log('🔍 更新分类列表，当前分类数量:', categoriesData.length);

            if (!categoriesData || categoriesData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="8" class="text-center text-muted">暂无分类数据</td></tr>';
                document.getElementById('categoryPaginationInfo').textContent = '显示 0 个分类';
                return;
            }

            // 应用过滤器
            let filteredCategories = [...categoriesData];

            const searchTerm = document.getElementById('categorySearch')?.value.toLowerCase() || '';
            const typeFilter = document.getElementById('categoryTypeFilter')?.value || '';

            if (searchTerm) {
                filteredCategories = filteredCategories.filter(category =>
                    category.name.toLowerCase().includes(searchTerm) ||
                    (category.description && category.description.toLowerCase().includes(searchTerm))
                );
            }

            if (typeFilter) {
                filteredCategories = filteredCategories.filter(category => category.type === typeFilter);
            }

            // 按权重和名称排序
            filteredCategories.sort((a, b) => {
                if (a.weight !== b.weight) {
                    return a.weight - b.weight;
                }
                return a.name.localeCompare(b.name);
            });

            // 获取当前页的数据
            const paginatedCategories = getPaginatedData(filteredCategories, currentPages.categories || 1);

            tbody.innerHTML = paginatedCategories.map(category => {
                const productCount = projectData.products ?
                    projectData.products.filter(p =>
                        p.primary_category === category.name ||
                        p.secondary_category === category.name
                    ).length : 0;

                return `
                    <tr data-category-id="${category.id}">
                        <td>
                            ${category.icon ? `<i class="${category.icon} me-2"></i>` : ''}
                            <strong>${category.name}</strong>
                        </td>
                        <td>
                            <span class="badge ${category.type === 'primary' ? 'bg-primary' : 'bg-secondary'}">
                                ${category.type === 'primary' ? '主要分类' : '次要分类'}
                            </span>
                        </td>
                        <td>${category.parent || '-'}</td>
                        <td><span class="badge bg-info">${productCount}</span></td>
                        <td>
                            ${category.description ?
                                `<small>${category.description.substring(0, 50)}${category.description.length > 50 ? '...' : ''}</small>` :
                                '-'
                            }
                        </td>
                        <td><span class="status-badge status-${category.status}">${category.status === 'active' ? '启用' : '禁用'}</span></td>
                        <td>${category.created_date}</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary" onclick="showCategoryModal('${category.id}')" title="编辑">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-outline-danger" onclick="deleteCategory('${category.id}')" title="删除">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');

            // 更新分页信息
            document.getElementById('categoryPaginationInfo').textContent =
                `显示 ${filteredCategories.length} 个分类`;

            // 创建分页
            createPagination('categories', filteredCategories.length, currentPages.categories || 1);
        }

        // 过滤分类
        function filterCategories() {
            currentPages.categories = 1; // 重置到第一页
            updateCategoryList();
        }

        // 清除分类过滤器
        function clearCategoryFilters() {
            document.getElementById('categorySearch').value = '';
            document.getElementById('categoryTypeFilter').value = '';
            filterCategories();
        }

        // 从产品数据中初始化分类
        function initializeCategoriesFromProducts() {
            console.log('📋 从产品数据中初始化分类...');

            if (!projectData.products || projectData.products.length === 0) {
                console.log('⚠️ 没有产品数据，跳过分类初始化');
                return;
            }

            const categoryMap = new Map();

            // 收集主要分类
            projectData.products.forEach(product => {
                if (product.primary_category) {
                    if (!categoryMap.has(product.primary_category)) {
                        categoryMap.set(product.primary_category, {
                            id: generateId(),
                            name: product.primary_category,
                            type: 'primary',
                            parent: '',
                            icon: 'fas fa-box',
                            weight: 1,
                            status: 'active',
                            description: `${product.primary_category}相关产品分类`,
                            created_date: '2025-01-01',
                            updated_date: new Date().toISOString().split('T')[0]
                        });
                    }
                }
            });

            // 收集次要分类
            projectData.products.forEach(product => {
                if (product.secondary_category && product.primary_category) {
                    const key = `${product.primary_category}-${product.secondary_category}`;
                    if (!categoryMap.has(key)) {
                        categoryMap.set(key, {
                            id: generateId(),
                            name: product.secondary_category,
                            type: 'secondary',
                            parent: product.primary_category,
                            icon: 'fas fa-tag',
                            weight: 2,
                            status: 'active',
                            description: `${product.secondary_category}相关产品分类`,
                            created_date: '2025-01-01',
                            updated_date: new Date().toISOString().split('T')[0]
                        });
                    }
                }
            });

            categoriesData = Array.from(categoryMap.values());
            console.log(`✅ 成功初始化 ${categoriesData.length} 个分类:`, categoriesData.map(c => `${c.name}(${c.type})`));
        }

        // 资讯管理功能
        let currentEditingNews = null;
        let newsData = projectData.news || [];
        let newsContentEditor = null;

        // 显示资讯模态框
        function showNewsModal(newsId = null) {
            currentEditingNews = newsId;
            clearNewsForm();

            if (newsId) {
                const news = newsData.find(n => n.id === newsId);
                if (news) {
                    fillNewsForm(news);
                    document.getElementById('newsModalTitle').innerHTML = '<i class="fas fa-newspaper me-2"></i>编辑资讯';
                } else {
                    showError('未找到指定的资讯');
                    return;
                }
            } else {
                document.getElementById('newsModalTitle').innerHTML = '<i class="fas fa-newspaper me-2"></i>添加资讯';
                // 设置默认发布日期为今天
                document.getElementById('newsDate').value = new Date().toISOString().split('T')[0];
            }

            const modal = new bootstrap.Modal(document.getElementById('newsModal'));
            modal.show();

            // 初始化富文本编辑器
            setTimeout(() => {
                initializeNewsEditor();
            }, 300);
        }

        // 初始化资讯编辑器
        function initializeNewsEditor() {
            if (newsContentEditor) {
                return; // 已经初始化过了
            }

            const editorContainer = document.getElementById('newsContentEditor');
            if (editorContainer && typeof Quill !== 'undefined') {
                newsContentEditor = new Quill('#newsContentEditor', {
                    theme: 'snow',
                    modules: {
                        toolbar: [
                            [{ 'header': [1, 2, 3, false] }],
                            ['bold', 'italic', 'underline', 'strike'],
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                            ['blockquote', 'code-block'],
                            ['link', 'image'],
                            ['clean']
                        ]
                    }
                });
            }
        }

        // 清空资讯表单
        function clearNewsForm() {
            document.getElementById('newsForm').reset();
            if (newsContentEditor) {
                newsContentEditor.setContents([]);
            }
        }

        // 填充资讯表单
        function fillNewsForm(news) {
            document.getElementById('newsTitle').value = news.title || '';
            document.getElementById('newsSummary').value = news.summary || '';
            document.getElementById('newsCategory').value = news.category || '';
            document.getElementById('newsAuthor').value = news.author || '编辑部';
            document.getElementById('newsFeaturedImage').value = news.featured_image || '';
            document.getElementById('newsTags').value = news.tags ? news.tags.join(', ') : '';
            document.getElementById('newsStatus').value = news.status || 'draft';
            document.getElementById('newsDate').value = news.date || '';

            // 设置编辑器内容
            if (newsContentEditor && news.content) {
                newsContentEditor.root.innerHTML = news.content;
            }
        }

        // 保存资讯
        function saveNews() {
            const form = document.getElementById('newsForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const content = newsContentEditor ? newsContentEditor.root.innerHTML : '';
            if (!content.trim() || content === '<p><br></p>') {
                showError('请输入资讯内容');
                return;
            }

            const tagsInput = document.getElementById('newsTags').value.trim();
            const tags = tagsInput ? tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag) : [];

            const newsItem = {
                id: currentEditingNews || generateId(),
                title: document.getElementById('newsTitle').value.trim(),
                summary: document.getElementById('newsSummary').value.trim(),
                content: content,
                category: document.getElementById('newsCategory').value,
                author: document.getElementById('newsAuthor').value.trim(),
                featured_image: document.getElementById('newsFeaturedImage').value.trim(),
                tags: tags,
                status: document.getElementById('newsStatus').value,
                date: document.getElementById('newsDate').value,
                views: currentEditingNews ?
                    newsData.find(n => n.id === currentEditingNews)?.views || 0 : 0,
                created_date: currentEditingNews ?
                    newsData.find(n => n.id === currentEditingNews)?.created_date :
                    new Date().toISOString().split('T')[0],
                updated_date: new Date().toISOString().split('T')[0]
            };

            if (currentEditingNews) {
                // 更新现有资讯
                const index = newsData.findIndex(n => n.id === currentEditingNews);
                if (index !== -1) {
                    newsData[index] = newsItem;
                    showSuccess('资讯更新成功！');
                }
            } else {
                // 添加新资讯
                newsData.push(newsItem);
                showSuccess('资讯添加成功！');
            }

            updateNewsList();
            updateDashboard();
            bootstrap.Modal.getInstance(document.getElementById('newsModal')).hide();
        }

        // 删除资讯
        function deleteNews(id) {
            const news = newsData.find(n => n.id === id);
            if (!news) {
                showError('未找到指定的资讯');
                return;
            }

            if (!confirm(`确定要删除资讯"${news.title}"吗？此操作不可撤销！`)) {
                return;
            }

            newsData = newsData.filter(n => n.id !== id);
            updateNewsList();
            updateDashboard();
            showSuccess('资讯删除成功！');
        }

        // 更新资讯列表
        function updateNewsList() {
            const tbody = document.getElementById('newsList');

            console.log('🔍 更新资讯列表，当前资讯数量:', newsData.length);

            if (!newsData || newsData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9" class="text-center text-muted">暂无资讯数据</td></tr>';
                document.getElementById('newsPaginationInfo').textContent = '显示 0 篇资讯';
                return;
            }

            // 应用过滤器
            let filteredNews = [...newsData];

            const searchTerm = document.getElementById('newsSearch')?.value.toLowerCase() || '';
            const categoryFilter = document.getElementById('newsCategoryFilter')?.value || '';
            const statusFilter = document.getElementById('newsStatusFilter')?.value || '';

            if (searchTerm) {
                filteredNews = filteredNews.filter(news =>
                    news.title.toLowerCase().includes(searchTerm) ||
                    news.summary.toLowerCase().includes(searchTerm) ||
                    news.content.toLowerCase().includes(searchTerm)
                );
            }

            if (categoryFilter) {
                filteredNews = filteredNews.filter(news => news.category === categoryFilter);
            }

            if (statusFilter) {
                filteredNews = filteredNews.filter(news => news.status === statusFilter);
            }

            // 按日期排序（最新的在前）
            filteredNews.sort((a, b) => new Date(b.date) - new Date(a.date));

            // 获取当前页的数据
            const paginatedNews = getPaginatedData(filteredNews, currentPages.news || 1);

            tbody.innerHTML = paginatedNews.map(news => `
                <tr data-news-id="${news.id}">
                    <td>
                        <strong>${news.title}</strong>
                        <br><small class="text-muted">${news.summary.substring(0, 80)}${news.summary.length > 80 ? '...' : ''}</small>
                    </td>
                    <td><span class="badge bg-info">${news.category}</span></td>
                    <td>${news.author}</td>
                    <td>
                        ${news.summary ? `<small>${news.summary.substring(0, 50)}${news.summary.length > 50 ? '...' : ''}</small>` : '-'}
                    </td>
                    <td>
                        ${news.featured_image ?
                            `<img src="${news.featured_image}" alt="特色图片" style="width: 40px; height: 30px; object-fit: cover; border-radius: 4px;">` :
                            '<span class="text-muted">无</span>'
                        }
                    </td>
                    <td><span class="badge bg-secondary">${news.views || 0}</span></td>
                    <td><span class="status-badge status-${news.status}">${news.status === 'published' ? '已发布' : '草稿'}</span></td>
                    <td>${news.date}</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" onclick="showNewsModal('${news.id}')" title="编辑">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-info" onclick="previewNews('${news.id}')" title="预览">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-outline-danger" onclick="deleteNews('${news.id}')" title="删除">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');

            // 更新分页信息
            document.getElementById('newsPaginationInfo').textContent =
                `显示 ${filteredNews.length} 篇资讯`;

            // 创建分页
            createPagination('news', filteredNews.length, currentPages.news || 1);
        }

        // 过滤资讯
        function filterNews() {
            currentPages.news = 1; // 重置到第一页
            updateNewsList();
        }

        // 清除资讯过滤器
        function clearNewsFilters() {
            document.getElementById('newsSearch').value = '';
            document.getElementById('newsCategoryFilter').value = '';
            document.getElementById('newsStatusFilter').value = '';
            filterNews();
        }

        // 预览资讯
        function previewNews(newsId = null) {
            let newsItem;

            if (newsId) {
                newsItem = newsData.find(n => n.id === newsId);
                if (!newsItem) {
                    showError('未找到指定的资讯');
                    return;
                }
            } else {
                // 从表单获取当前编辑的资讯数据
                const form = document.getElementById('newsForm');
                if (!form.checkValidity()) {
                    showError('请先完善资讯信息');
                    return;
                }

                const content = newsContentEditor ? newsContentEditor.root.innerHTML : '';
                const tagsInput = document.getElementById('newsTags').value.trim();
                const tags = tagsInput ? tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag) : [];

                newsItem = {
                    title: document.getElementById('newsTitle').value.trim(),
                    summary: document.getElementById('newsSummary').value.trim(),
                    content: content,
                    category: document.getElementById('newsCategory').value,
                    author: document.getElementById('newsAuthor').value.trim(),
                    featured_image: document.getElementById('newsFeaturedImage').value.trim(),
                    tags: tags,
                    status: document.getElementById('newsStatus').value,
                    date: document.getElementById('newsDate').value
                };
            }

            // 在新窗口中显示预览
            const previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>${newsItem.title} - 预览</title>
                    <meta charset="utf-8">
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
                    <style>
                        body { padding: 20px; }
                        .preview-header { border-bottom: 2px solid #dee2e6; padding-bottom: 20px; margin-bottom: 20px; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="preview-header">
                            <h1>${newsItem.title}</h1>
                            <div class="text-muted mb-3">
                                <span class="badge bg-info">${newsItem.category}</span>
                                <span class="ms-2">作者: ${newsItem.author}</span>
                                <span class="ms-2">日期: ${newsItem.date}</span>
                                <span class="ms-2">状态: ${newsItem.status === 'published' ? '已发布' : '草稿'}</span>
                            </div>
                            ${newsItem.featured_image ? `<img src="${newsItem.featured_image}" class="img-fluid mb-3" alt="特色图片">` : ''}
                            <div class="lead">${newsItem.summary}</div>
                        </div>
                        <div class="content">${newsItem.content}</div>
                        ${newsItem.tags.length > 0 ? `
                            <hr>
                            <div>
                                <strong>标签: </strong>
                                ${newsItem.tags.map(tag => `<span class="badge bg-secondary me-1">${tag}</span>`).join('')}
                            </div>
                        ` : ''}
                    </div>
                </body>
                </html>
            `);
        }

        // 案例管理功能
        let currentEditingCase = null;
        let casesData = projectData.cases || [];
        let caseContentEditor = null;

        // 显示案例模态框
        function showCaseModal(caseId = null) {
            currentEditingCase = caseId;
            clearCaseForm();

            if (caseId) {
                const caseItem = casesData.find(c => c.id === caseId);
                if (caseItem) {
                    fillCaseForm(caseItem);
                    document.getElementById('caseModalTitle').innerHTML = '<i class="fas fa-briefcase me-2"></i>编辑案例';
                } else {
                    showError('未找到指定的案例');
                    return;
                }
            } else {
                document.getElementById('caseModalTitle').innerHTML = '<i class="fas fa-briefcase me-2"></i>添加案例';
            }

            const modal = new bootstrap.Modal(document.getElementById('caseModal'));
            modal.show();

            // 初始化富文本编辑器
            setTimeout(() => {
                initializeCaseEditor();
            }, 300);
        }

        // 初始化案例编辑器
        function initializeCaseEditor() {
            if (caseContentEditor) {
                return; // 已经初始化过了
            }

            const editorContainer = document.getElementById('caseContentEditor');
            if (editorContainer && typeof Quill !== 'undefined') {
                caseContentEditor = new Quill('#caseContentEditor', {
                    theme: 'snow',
                    modules: {
                        toolbar: [
                            [{ 'header': [1, 2, 3, false] }],
                            ['bold', 'italic', 'underline', 'strike'],
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                            ['blockquote', 'code-block'],
                            ['link', 'image'],
                            ['clean']
                        ]
                    }
                });
            }
        }

        // 清空案例表单
        function clearCaseForm() {
            document.getElementById('caseForm').reset();
            if (caseContentEditor) {
                caseContentEditor.setContents([]);
            }
        }

        // 填充案例表单
        function fillCaseForm(caseItem) {
            document.getElementById('caseTitle').value = caseItem.title || '';
            document.getElementById('caseSummary').value = caseItem.summary || '';
            document.getElementById('casePrimaryCategory').value = caseItem.primary_category || '';
            document.getElementById('caseApplicationField').value = caseItem.application_field || '';
            document.getElementById('caseApplicationScenario').value = caseItem.application_scenario || '';
            document.getElementById('caseClient').value = caseItem.client || '';
            document.getElementById('caseIndustry').value = caseItem.industry || '';
            document.getElementById('caseDetectionObject').value = caseItem.detection_object || '';
            document.getElementById('caseEquipmentUsed').value = caseItem.equipment_used || '';
            document.getElementById('caseFeaturedImage').value = caseItem.featured_image || '';
            document.getElementById('caseStatus').value = caseItem.status || 'draft';

            // 设置编辑器内容
            if (caseContentEditor && caseItem.content) {
                caseContentEditor.root.innerHTML = caseItem.content;
            }
        }

        // 保存案例
        function saveCase() {
            const form = document.getElementById('caseForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const content = caseContentEditor ? caseContentEditor.root.innerHTML : '';
            if (!content.trim() || content === '<p><br></p>') {
                showError('请输入案例详情');
                return;
            }

            const caseItem = {
                id: currentEditingCase || generateId(),
                title: document.getElementById('caseTitle').value.trim(),
                summary: document.getElementById('caseSummary').value.trim(),
                content: content,
                primary_category: document.getElementById('casePrimaryCategory').value,
                application_field: document.getElementById('caseApplicationField').value.trim(),
                application_scenario: document.getElementById('caseApplicationScenario').value.trim(),
                client: document.getElementById('caseClient').value.trim(),
                industry: document.getElementById('caseIndustry').value,
                detection_object: document.getElementById('caseDetectionObject').value.trim(),
                equipment_used: document.getElementById('caseEquipmentUsed').value.trim(),
                featured_image: document.getElementById('caseFeaturedImage').value.trim(),
                status: document.getElementById('caseStatus').value,
                created_date: currentEditingCase ?
                    casesData.find(c => c.id === currentEditingCase)?.created_date :
                    new Date().toISOString().split('T')[0],
                updated_date: new Date().toISOString().split('T')[0]
            };

            if (currentEditingCase) {
                // 更新现有案例
                const index = casesData.findIndex(c => c.id === currentEditingCase);
                if (index !== -1) {
                    casesData[index] = caseItem;
                    showSuccess('案例更新成功！');
                }
            } else {
                // 添加新案例
                casesData.push(caseItem);
                showSuccess('案例添加成功！');
            }

            updateCaseList();
            updateDashboard();
            bootstrap.Modal.getInstance(document.getElementById('caseModal')).hide();
        }

        // 删除案例
        function deleteCase(id) {
            const caseItem = casesData.find(c => c.id === id);
            if (!caseItem) {
                showError('未找到指定的案例');
                return;
            }

            if (!confirm(`确定要删除案例"${caseItem.title}"吗？此操作不可撤销！`)) {
                return;
            }

            casesData = casesData.filter(c => c.id !== id);
            updateCaseList();
            updateDashboard();
            showSuccess('案例删除成功！');
        }

        // 更新案例列表
        function updateCaseList() {
            const tbody = document.getElementById('caseList');

            console.log('🔍 更新案例列表，当前案例数量:', casesData.length);

            if (!casesData || casesData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9" class="text-center text-muted">暂无案例数据</td></tr>';
                document.getElementById('casePaginationInfo').textContent = '显示 0 个案例';
                return;
            }

            // 应用过滤器
            let filteredCases = [...casesData];

            const searchTerm = document.getElementById('caseSearch')?.value.toLowerCase() || '';
            const industryFilter = document.getElementById('caseIndustryFilter')?.value || '';
            const statusFilter = document.getElementById('caseStatusFilter')?.value || '';

            if (searchTerm) {
                filteredCases = filteredCases.filter(caseItem =>
                    caseItem.title.toLowerCase().includes(searchTerm) ||
                    caseItem.client.toLowerCase().includes(searchTerm) ||
                    caseItem.summary.toLowerCase().includes(searchTerm)
                );
            }

            if (industryFilter) {
                filteredCases = filteredCases.filter(caseItem => caseItem.industry === industryFilter);
            }

            if (statusFilter) {
                filteredCases = filteredCases.filter(caseItem => caseItem.status === statusFilter);
            }

            // 按创建日期排序（最新的在前）
            filteredCases.sort((a, b) => new Date(b.created_date) - new Date(a.created_date));

            // 获取当前页的数据
            const paginatedCases = getPaginatedData(filteredCases, currentPages.cases || 1);

            tbody.innerHTML = paginatedCases.map(caseItem => `
                <tr data-case-id="${caseItem.id}">
                    <td>
                        <strong>${caseItem.title}</strong>
                        <br><small class="text-muted">${caseItem.summary.substring(0, 60)}${caseItem.summary.length > 60 ? '...' : ''}</small>
                    </td>
                    <td>${caseItem.client || '-'}</td>
                    <td><span class="badge bg-info">${caseItem.industry || '-'}</span></td>
                    <td>${caseItem.application_field || '-'}</td>
                    <td>${caseItem.detection_object || '-'}</td>
                    <td>${caseItem.equipment_used || '-'}</td>
                    <td><span class="status-badge status-${caseItem.status}">${caseItem.status === 'published' ? '已发布' : '草稿'}</span></td>
                    <td>${caseItem.created_date}</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" onclick="showCaseModal('${caseItem.id}')" title="编辑">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-info" onclick="previewCase('${caseItem.id}')" title="预览">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-outline-danger" onclick="deleteCase('${caseItem.id}')" title="删除">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');

            // 更新分页信息
            document.getElementById('casePaginationInfo').textContent =
                `显示 ${filteredCases.length} 个案例`;

            // 创建分页
            createPagination('cases', filteredCases.length, currentPages.cases || 1);
        }

        // 过滤案例
        function filterCases() {
            currentPages.cases = 1; // 重置到第一页
            updateCaseList();
        }

        // 清除案例过滤器
        function clearCaseFilters() {
            document.getElementById('caseSearch').value = '';
            document.getElementById('caseIndustryFilter').value = '';
            document.getElementById('caseStatusFilter').value = '';
            filterCases();
        }

        // 预览案例
        function previewCase(caseId = null) {
            let caseItem;

            if (caseId) {
                caseItem = casesData.find(c => c.id === caseId);
                if (!caseItem) {
                    showError('未找到指定的案例');
                    return;
                }
            } else {
                // 从表单获取当前编辑的案例数据
                const form = document.getElementById('caseForm');
                if (!form.checkValidity()) {
                    showError('请先完善案例信息');
                    return;
                }

                const content = caseContentEditor ? caseContentEditor.root.innerHTML : '';

                caseItem = {
                    title: document.getElementById('caseTitle').value.trim(),
                    summary: document.getElementById('caseSummary').value.trim(),
                    content: content,
                    primary_category: document.getElementById('casePrimaryCategory').value,
                    application_field: document.getElementById('caseApplicationField').value.trim(),
                    application_scenario: document.getElementById('caseApplicationScenario').value.trim(),
                    client: document.getElementById('caseClient').value.trim(),
                    industry: document.getElementById('caseIndustry').value,
                    detection_object: document.getElementById('caseDetectionObject').value.trim(),
                    equipment_used: document.getElementById('caseEquipmentUsed').value.trim(),
                    featured_image: document.getElementById('caseFeaturedImage').value.trim(),
                    status: document.getElementById('caseStatus').value
                };
            }

            // 在新窗口中显示预览
            const previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>${caseItem.title} - 案例预览</title>
                    <meta charset="utf-8">
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
                    <style>
                        body { padding: 20px; }
                        .preview-header { border-bottom: 2px solid #dee2e6; padding-bottom: 20px; margin-bottom: 20px; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="preview-header">
                            <h1>${caseItem.title}</h1>
                            <div class="row mt-3">
                                <div class="col-md-6">
                                    ${caseItem.primary_category ? `<p><strong>主要分类:</strong> ${caseItem.primary_category}</p>` : ''}
                                    ${caseItem.application_field ? `<p><strong>应用领域:</strong> ${caseItem.application_field}</p>` : ''}
                                    ${caseItem.application_scenario ? `<p><strong>应用场景:</strong> ${caseItem.application_scenario}</p>` : ''}
                                    ${caseItem.client ? `<p><strong>客户:</strong> ${caseItem.client}</p>` : ''}
                                </div>
                                <div class="col-md-6">
                                    ${caseItem.industry ? `<p><strong>行业:</strong> ${caseItem.industry}</p>` : ''}
                                    ${caseItem.detection_object ? `<p><strong>检测对象:</strong> ${caseItem.detection_object}</p>` : ''}
                                    ${caseItem.equipment_used ? `<p><strong>使用设备:</strong> ${caseItem.equipment_used}</p>` : ''}
                                </div>
                            </div>
                            ${caseItem.featured_image ? `<img src="${caseItem.featured_image}" class="img-fluid mb-3" alt="案例图片">` : ''}
                            <div class="lead">${caseItem.summary}</div>
                        </div>
                        <div class="content">${caseItem.content}</div>
                    </div>
                </body>
                </html>
            `);
        }

        // 应用领域管理功能
        let currentEditingApplication = null;
        let applicationsData = projectData.applications || [];
        let applicationContentEditor = null;

        // 显示应用领域模态框
        function showApplicationModal(applicationId = null) {
            currentEditingApplication = applicationId;
            clearApplicationForm();

            if (applicationId) {
                const application = applicationsData.find(a => a.id === applicationId);
                if (application) {
                    fillApplicationForm(application);
                    document.getElementById('applicationModalTitle').innerHTML = '<i class="fas fa-puzzle-piece me-2"></i>编辑应用领域';
                } else {
                    showError('未找到指定的应用领域');
                    return;
                }
            } else {
                document.getElementById('applicationModalTitle').innerHTML = '<i class="fas fa-puzzle-piece me-2"></i>添加应用领域';
            }

            const modal = new bootstrap.Modal(document.getElementById('applicationModal'));
            modal.show();

            // 初始化富文本编辑器
            setTimeout(() => {
                initializeApplicationEditor();
            }, 300);
        }

        // 初始化应用领域编辑器
        function initializeApplicationEditor() {
            if (applicationContentEditor) {
                return; // 已经初始化过了
            }

            const editorContainer = document.getElementById('applicationContentEditor');
            if (editorContainer && typeof Quill !== 'undefined') {
                applicationContentEditor = new Quill('#applicationContentEditor', {
                    theme: 'snow',
                    modules: {
                        toolbar: [
                            [{ 'header': [1, 2, 3, false] }],
                            ['bold', 'italic', 'underline', 'strike'],
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                            ['blockquote', 'code-block'],
                            ['link', 'image'],
                            ['clean']
                        ]
                    }
                });
            }
        }

        // 清空应用领域表单
        function clearApplicationForm() {
            document.getElementById('applicationForm').reset();
            if (applicationContentEditor) {
                applicationContentEditor.setContents([]);
            }
        }

        // 填充应用领域表单
        function fillApplicationForm(application) {
            document.getElementById('applicationName').value = application.name || '';
            document.getElementById('applicationDescription').value = application.description || '';
            document.getElementById('applicationCategory').value = application.category || '';
            document.getElementById('applicationFeatures').value = application.features ? application.features.join('\n') : '';
            document.getElementById('applicationKeyTechnologies').value = application.key_technologies ? application.key_technologies.join('\n') : '';
            document.getElementById('applicationWeight').value = application.weight || 1;
            document.getElementById('applicationImage').value = application.image || '';
            document.getElementById('applicationStatus').value = application.status || 'draft';

            // 设置编辑器内容
            if (applicationContentEditor && application.content) {
                applicationContentEditor.root.innerHTML = application.content;
            }
        }

        // 保存应用领域
        function saveApplication() {
            const form = document.getElementById('applicationForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const content = applicationContentEditor ? applicationContentEditor.root.innerHTML : '';
            if (!content.trim() || content === '<p><br></p>') {
                showError('请输入应用领域详细内容');
                return;
            }

            const featuresText = document.getElementById('applicationFeatures').value.trim();
            const features = featuresText ? featuresText.split('\n').map(f => f.trim()).filter(f => f) : [];

            const technologiesText = document.getElementById('applicationKeyTechnologies').value.trim();
            const keyTechnologies = technologiesText ? technologiesText.split('\n').map(t => t.trim()).filter(t => t) : [];

            const application = {
                id: currentEditingApplication || generateId(),
                name: document.getElementById('applicationName').value.trim(),
                description: document.getElementById('applicationDescription').value.trim(),
                content: content,
                category: document.getElementById('applicationCategory').value,
                features: features,
                key_technologies: keyTechnologies,
                weight: parseInt(document.getElementById('applicationWeight').value) || 1,
                image: document.getElementById('applicationImage').value.trim(),
                status: document.getElementById('applicationStatus').value,
                created_date: currentEditingApplication ?
                    applicationsData.find(a => a.id === currentEditingApplication)?.created_date :
                    new Date().toISOString().split('T')[0],
                updated_date: new Date().toISOString().split('T')[0]
            };

            if (currentEditingApplication) {
                // 更新现有应用领域
                const index = applicationsData.findIndex(a => a.id === currentEditingApplication);
                if (index !== -1) {
                    applicationsData[index] = application;
                    showSuccess('应用领域更新成功！');
                }
            } else {
                // 添加新应用领域
                applicationsData.push(application);
                showSuccess('应用领域添加成功！');
            }

            updateApplicationList();
            updateDashboard();
            bootstrap.Modal.getInstance(document.getElementById('applicationModal')).hide();
        }

        // 删除应用领域
        function deleteApplication(id) {
            const application = applicationsData.find(a => a.id === id);
            if (!application) {
                showError('未找到指定的应用领域');
                return;
            }

            if (!confirm(`确定要删除应用领域"${application.name}"吗？此操作不可撤销！`)) {
                return;
            }

            applicationsData = applicationsData.filter(a => a.id !== id);
            updateApplicationList();
            updateDashboard();
            showSuccess('应用领域删除成功！');
        }

        // 更新应用领域列表
        function updateApplicationList() {
            const tbody = document.getElementById('applicationList');

            console.log('🔍 更新应用领域列表，当前应用领域数量:', applicationsData.length);

            if (!applicationsData || applicationsData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9" class="text-center text-muted">暂无应用领域数据</td></tr>';
                document.getElementById('applicationPaginationInfo').textContent = '显示 0 个应用领域';
                return;
            }

            // 应用过滤器
            let filteredApplications = [...applicationsData];

            const searchTerm = document.getElementById('applicationSearch')?.value.toLowerCase() || '';
            const categoryFilter = document.getElementById('applicationCategoryFilter')?.value || '';
            const statusFilter = document.getElementById('applicationStatusFilter')?.value || '';

            if (searchTerm) {
                filteredApplications = filteredApplications.filter(application =>
                    application.name.toLowerCase().includes(searchTerm) ||
                    application.description.toLowerCase().includes(searchTerm)
                );
            }

            if (categoryFilter) {
                filteredApplications = filteredApplications.filter(application => application.category === categoryFilter);
            }

            if (statusFilter) {
                filteredApplications = filteredApplications.filter(application => application.status === statusFilter);
            }

            // 按权重和名称排序
            filteredApplications.sort((a, b) => {
                if (a.weight !== b.weight) {
                    return a.weight - b.weight;
                }
                return a.name.localeCompare(b.name);
            });

            // 获取当前页的数据
            const paginatedApplications = getPaginatedData(filteredApplications, currentPages.applications || 1);

            tbody.innerHTML = paginatedApplications.map(application => `
                <tr data-application-id="${application.id}">
                    <td>
                        <strong>${application.name}</strong>
                        <br><small class="text-muted">${application.description.substring(0, 60)}${application.description.length > 60 ? '...' : ''}</small>
                    </td>
                    <td><span class="badge bg-info">${application.category}</span></td>
                    <td>
                        ${application.description ?
                            `<small>${application.description.substring(0, 50)}${application.description.length > 50 ? '...' : ''}</small>` :
                            '-'
                        }
                    </td>
                    <td><span class="badge bg-secondary">${application.features ? application.features.length : 0}</span></td>
                    <td><span class="badge bg-secondary">${application.key_technologies ? application.key_technologies.length : 0}</span></td>
                    <td><span class="badge bg-primary">${application.weight}</span></td>
                    <td><span class="status-badge status-${application.status}">${application.status === 'published' ? '已发布' : '草稿'}</span></td>
                    <td>${application.created_date}</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" onclick="showApplicationModal('${application.id}')" title="编辑">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-info" onclick="previewApplication('${application.id}')" title="预览">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-outline-danger" onclick="deleteApplication('${application.id}')" title="删除">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');

            // 更新分页信息
            document.getElementById('applicationPaginationInfo').textContent =
                `显示 ${filteredApplications.length} 个应用领域`;

            // 创建分页
            createPagination('applications', filteredApplications.length, currentPages.applications || 1);
        }

        // 过滤应用领域
        function filterApplications() {
            currentPages.applications = 1; // 重置到第一页
            updateApplicationList();
        }

        // 清除应用领域过滤器
        function clearApplicationFilters() {
            document.getElementById('applicationSearch').value = '';
            document.getElementById('applicationCategoryFilter').value = '';
            document.getElementById('applicationStatusFilter').value = '';
            filterApplications();
        }

        // 预览应用领域
        function previewApplication(applicationId = null) {
            let application;

            if (applicationId) {
                application = applicationsData.find(a => a.id === applicationId);
                if (!application) {
                    showError('未找到指定的应用领域');
                    return;
                }
            } else {
                // 从表单获取当前编辑的应用领域数据
                const form = document.getElementById('applicationForm');
                if (!form.checkValidity()) {
                    showError('请先完善应用领域信息');
                    return;
                }

                const content = applicationContentEditor ? applicationContentEditor.root.innerHTML : '';
                const featuresText = document.getElementById('applicationFeatures').value.trim();
                const features = featuresText ? featuresText.split('\n').map(f => f.trim()).filter(f => f) : [];
                const technologiesText = document.getElementById('applicationKeyTechnologies').value.trim();
                const keyTechnologies = technologiesText ? technologiesText.split('\n').map(t => t.trim()).filter(t => t) : [];

                application = {
                    name: document.getElementById('applicationName').value.trim(),
                    description: document.getElementById('applicationDescription').value.trim(),
                    content: content,
                    category: document.getElementById('applicationCategory').value,
                    features: features,
                    key_technologies: keyTechnologies,
                    weight: parseInt(document.getElementById('applicationWeight').value) || 1,
                    image: document.getElementById('applicationImage').value.trim(),
                    status: document.getElementById('applicationStatus').value
                };
            }

            // 在新窗口中显示预览
            const previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>${application.name} - 应用领域预览</title>
                    <meta charset="utf-8">
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
                    <style>
                        body { padding: 20px; }
                        .preview-header { border-bottom: 2px solid #dee2e6; padding-bottom: 20px; margin-bottom: 20px; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="preview-header">
                            <h1>${application.name}</h1>
                            <div class="text-muted mb-3">
                                <span class="badge bg-info">${application.category}</span>
                                <span class="ms-2">权重: ${application.weight}</span>
                                <span class="ms-2">状态: ${application.status === 'published' ? '已发布' : '草稿'}</span>
                            </div>
                            ${application.image ? `<img src="${application.image}" class="img-fluid mb-3" alt="应用领域图片">` : ''}
                            <div class="lead">${application.description}</div>
                        </div>
                        ${application.features.length > 0 ? `
                            <div class="mb-4">
                                <h3>应用特点</h3>
                                <ul>
                                    ${application.features.map(f => `<li>${f}</li>`).join('')}
                                </ul>
                            </div>
                        ` : ''}
                        ${application.key_technologies.length > 0 ? `
                            <div class="mb-4">
                                <h3>关键技术</h3>
                                <ul>
                                    ${application.key_technologies.map(t => `<li>${t}</li>`).join('')}
                                </ul>
                            </div>
                        ` : ''}
                        <div class="content">${application.content}</div>
                    </div>
                </body>
                </html>
            `);
        }

        // 初始化其他模块数据
        function initializeNewsData() {
            console.log('📰 初始化资讯数据...');
            // 这里可以从实际数据源加载资讯数据
            // 目前使用空数组，用户可以手动添加
            if (!newsData || newsData.length === 0) {
                newsData = [];
                console.log('📰 资讯数据为空，等待用户添加');
            }
        }

        function initializeCasesData() {
            console.log('💼 初始化案例数据...');
            // 这里可以从实际数据源加载案例数据
            // 目前使用空数组，用户可以手动添加
            if (!casesData || casesData.length === 0) {
                casesData = [];
                console.log('💼 案例数据为空，等待用户添加');
            }
        }

        function initializeApplicationsData() {
            console.log('🧩 初始化应用领域数据...');
            // 这里可以从实际数据源加载应用领域数据
            // 目前使用空数组，用户可以手动添加
            if (!applicationsData || applicationsData.length === 0) {
                applicationsData = [];
                console.log('🧩 应用领域数据为空，等待用户添加');
            }
        }

        // 同步数据到前台
        async function syncToFrontend() {
            // 检查是否有数据需要同步
            const hasData =
                (projectData.products && projectData.products.length > 0) ||
                (suppliersData && suppliersData.length > 0) ||
                (categoriesData && categoriesData.length > 0) ||
                (newsData && newsData.length > 0) ||
                (casesData && casesData.length > 0) ||
                (applicationsData && applicationsData.length > 0);

            if (!hasData) {
                showError('⚠️ 没有数据需要同步！请先加载或添加一些数据。');
                return;
            }

            // 显示数据统计
            const dataStats = `
当前数据统计：
- 产品: ${projectData.products?.length || 0} 个
- 供应商: ${suppliersData?.length || 0} 个
- 分类: ${categoriesData?.length || 0} 个
- 资讯: ${newsData?.length || 0} 篇
- 案例: ${casesData?.length || 0} 个
- 应用领域: ${applicationsData?.length || 0} 个

⚠️ 重要提示：
1. 同步操作只会保存数据到后台存储
2. 不会删除或覆盖前台现有内容
3. 数据将在下次页面刷新时生效

确定要继续同步吗？`;

            if (!confirm(dataStats)) {
                return;
            }

            try {
                const success = await dataSyncManager.syncToFrontend();
                if (success) {
                    // 同步成功后，显示同步状态
                    updateSyncStatus();
                    showSuccess(`✅ 数据同步成功！已保存 ${projectData.products?.length || 0} 个产品和相关数据到后台存储。`);
                }
            } catch (error) {
                console.error('同步失败:', error);
                showError('❌ 同步失败: ' + error.message);
            }
        }

        // 更新同步状态显示
        function updateSyncStatus() {
            const statusElement = document.getElementById('syncStatus');
            if (statusElement) {
                const lastSyncTime = localStorage.getItem('cms_last_sync_time');
                if (lastSyncTime) {
                    const syncDate = new Date(lastSyncTime);
                    statusElement.innerHTML = `
                        <small class="text-success">
                            <i class="fas fa-check-circle me-1"></i>
                            最后同步: ${syncDate.toLocaleString()}
                        </small>
                    `;
                } else {
                    statusElement.innerHTML = `
                        <small class="text-warning">
                            <i class="fas fa-exclamation-triangle me-1"></i>
                            尚未同步，建议点击"同步到前台"
                        </small>
                    `;
                }
            }
        }

        // 检查数据同步状态
        function checkSyncStatus() {
            const lastSyncTime = localStorage.getItem('cms_last_sync_time');
            const hasLocalData =
                localStorage.getItem('cms_products_data') ||
                localStorage.getItem('cms_suppliers_data') ||
                localStorage.getItem('cms_categories_data') ||
                localStorage.getItem('cms_news_data') ||
                localStorage.getItem('cms_cases_data') ||
                localStorage.getItem('cms_applications_data');

            return {
                hasBeenSynced: !!lastSyncTime,
                hasLocalData: !!hasLocalData,
                lastSyncTime: lastSyncTime ? new Date(lastSyncTime) : null
            };
        }

        // 检查数据是否有变更
        function checkDataChanges() {
            // 检查是否有未同步的变更
            const hasChanges =
                (projectData.products && projectData.products.length > 0) ||
                (suppliersData && suppliersData.length > 0) ||
                (categoriesData && categoriesData.length > 0) ||
                (newsData && newsData.length > 0) ||
                (casesData && casesData.length > 0) ||
                (applicationsData && applicationsData.length > 0);

            const syncButton = document.querySelector('button[onclick="syncToFrontend()"]');
            if (syncButton) {
                if (hasChanges) {
                    syncButton.classList.remove('btn-success');
                    syncButton.classList.add('btn-warning');
                    syncButton.innerHTML = '<i class="fas fa-exclamation-triangle me-1"></i>有变更需同步';
                } else {
                    syncButton.classList.remove('btn-warning');
                    syncButton.classList.add('btn-success');
                    syncButton.innerHTML = '<i class="fas fa-cloud-upload-alt me-1"></i>同步到前台';
                }
            }
        }

        // 自动检查数据变更
        function startDataChangeMonitoring() {
            // 每30秒检查一次数据变更
            setInterval(checkDataChanges, 30000);

            // 立即检查一次
            checkDataChanges();
        }

        // 强制重新加载产品数据
        async function forceReloadProductData() {
            try {
                showLoading();
                console.log('🚨 强制重新加载产品数据...');

                // 清空现有数据
                projectData.products = [];

                // 显示加载状态
                const tbody = document.getElementById('productList');
                if (tbody) {
                    tbody.innerHTML = '<tr><td colspan="7" class="text-center text-info">🔄 正在强制重新加载产品数据...</td></tr>';
                }

                // 重新加载数据
                await loadProjectData();

                // 强制更新产品列表
                updateProductList();

                hideLoading();

                const productCount = projectData.products ? projectData.products.length : 0;
                if (productCount > 0) {
                    showSuccess(`✅ 强制重载完成！成功加载 ${productCount} 个产品`);
                } else {
                    showError('❌ 强制重载失败，未找到产品数据');
                }

            } catch (error) {
                console.error('强制重载产品数据失败:', error);
                hideLoading();
                showError('强制重载失败: ' + error.message);
            }
        }

        // 实际产品参数模板（基于WS-K08510）
        const defaultParameterTemplate = [
            { name: '主机屏幕', value: '6英寸' },
            { name: '待机时长', value: '8小时' },
            { name: '探头直径', value: '0.85mm' },
            { name: '像素', value: '16万' },
            { name: '景深', value: '3mm~70mm' },
            { name: '视场角', value: '120度' },
            { name: '视向', value: '直视' },
            { name: '光源', value: '光纤光源' },
            { name: '导向', value: '无导向' },
            { name: '管线材质', value: '合金弹簧软管' },
            { name: '防护等级', value: 'IP67' },
            { name: '工作温度', value: '-20℃~70℃' }
        ];

        // 参数计数器
        let parametersCount = 0;

        // 富文本编辑器实例
        let productContentEditor = null;
        let applicationScenariosEditor = null;

        // 图片库和相关产品
        let productGallery = [];
        let selectedRelatedProducts = [];
        let downloadFiles = [];

        // 计数器
        let galleryCount = 0;
        let downloadCount = 0;

        function uploadMedia() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*,video/*,audio/*,.pdf,.doc,.docx';
            input.multiple = true;
            input.onchange = function(e) {
                const files = Array.from(e.target.files);
                if (files.length === 0) return;

                files.forEach(file => {
                    // 模拟上传过程
                    const newMedia = {
                        id: 'media-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9),
                        name: file.name,
                        type: file.type.startsWith('image/') ? 'image' :
                              file.type.startsWith('video/') ? 'video' :
                              file.type.startsWith('audio/') ? 'audio' : 'document',
                        category: '未分类',
                        size: formatFileSize(file.size),
                        url: URL.createObjectURL(file), // 实际项目中应该是服务器返回的URL
                        uploadDate: new Date().toISOString().split('T')[0]
                    };

                    mediaLibrary.push(newMedia);
                });

                updateMediaList();
                showSuccess(`成功上传 ${files.length} 个文件！`);
            };
            input.click();
        }

        function createFolder() {
            const folderName = prompt('请输入文件夹名称:');
            if (folderName && folderName.trim()) {
                showSuccess(`文件夹"${folderName}"创建成功！`);
            }
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function getFileIcon(type) {
            switch(type) {
                case 'image': return 'image';
                case 'video': return 'video';
                case 'audio': return 'music';
                case 'document': return 'file-alt';
                default: return 'file';
            }
        }

        function updateMediaList() {
            const tbody = document.getElementById('mediaList');

            if (mediaLibrary.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">暂无媒体文件</td></tr>';
                return;
            }

            tbody.innerHTML = mediaLibrary.map(media => `
                <tr>
                    <td>
                        ${media.type === 'image' ?
                            `<img src="${media.url}" alt="${media.name}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;">` :
                            `<i class="fas fa-${getFileIcon(media.type)} fa-2x text-muted"></i>`
                        }
                    </td>
                    <td>
                        <strong>${media.name}</strong>
                        <br><small class="text-muted">${media.type}</small>
                    </td>
                    <td><span class="badge bg-info">${media.category}</span></td>
                    <td>${media.size}</td>
                    <td>${media.uploadDate}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary btn-action" onclick="copyMediaUrl('${media.url}')" title="复制链接">
                            <i class="fas fa-copy"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success btn-action" onclick="previewMedia('${media.id}')" title="预览">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger btn-action" onclick="deleteMedia('${media.id}')" title="删除">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function copyMediaUrl(url) {
            navigator.clipboard.writeText(url).then(() => {
                showSuccess('链接已复制到剪贴板！');
            }).catch(() => {
                showError('复制失败，请手动复制');
            });
        }

        function previewMedia(id) {
            const media = mediaLibrary.find(m => m.id === id);
            if (!media) {
                showError('媒体文件不存在');
                return;
            }

            const previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <html>
                <head>
                    <title>媒体预览 - ${media.name}</title>
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
                </head>
                <body>
                    <div class="container py-4">
                        <h3>${media.name}</h3>
                        <div class="mb-3">
                            <span class="badge bg-info me-2">${media.category}</span>
                            <span class="badge bg-secondary me-2">${media.type}</span>
                            <span class="badge bg-success">${media.size}</span>
                        </div>
                        ${media.type === 'image' ?
                            `<img src="${media.url}" class="img-fluid" alt="${media.name}">` :
                            media.type === 'video' ?
                            `<video controls class="w-100"><source src="${media.url}" type="video/mp4"></video>` :
                            media.type === 'audio' ?
                            `<audio controls class="w-100"><source src="${media.url}" type="audio/mpeg"></audio>` :
                            `<p>无法预览此类型的文件</p>`
                        }
                        <div class="mt-3">
                            <p><strong>文件链接:</strong> <code>${media.url}</code></p>
                            <p><strong>上传日期:</strong> ${media.uploadDate}</p>
                        </div>
                    </div>
                </body>
                </html>
            `);
        }

        function deleteMedia(id) {
            const media = mediaLibrary.find(m => m.id === id);
            if (!media) {
                showError('媒体文件不存在');
                return;
            }

            if (confirm(`确定要删除媒体文件"${media.name}"吗？此操作不可撤销！`)) {
                mediaLibrary = mediaLibrary.filter(m => m.id !== id);
                updateMediaList();
                showSuccess('媒体文件删除成功！');
            }
        }

        // 更新次要分类选项
        function updateSecondaryCategories() {
            const primarySelect = document.getElementById('productPrimaryCategory');
            const secondarySelect = document.getElementById('productSecondaryCategory');
            const selectedPrimary = primarySelect.value;

            secondarySelect.innerHTML = '<option value="">选择次要分类</option>';

            if (selectedPrimary && categoryHierarchy[selectedPrimary]) {
                categoryHierarchy[selectedPrimary].forEach(category => {
                    const option = document.createElement('option');
                    option.value = category;
                    option.textContent = category;
                    secondarySelect.appendChild(option);
                });
            }
        }

        // 更新产品系列选项
        function updateSeriesOptions() {
            const supplierSelect = document.getElementById('productSupplier');
            const seriesSelect = document.getElementById('productSeries');
            const selectedSupplier = supplierSelect.value;

            seriesSelect.innerHTML = '<option value="">选择产品系列</option>';

            if (selectedSupplier && supplierSeriesMap[selectedSupplier]) {
                supplierSeriesMap[selectedSupplier].forEach(series => {
                    const option = document.createElement('option');
                    option.value = series;
                    option.textContent = series;
                    seriesSelect.appendChild(option);
                });
            }
        }

        // 加载默认参数模板
        function loadDefaultParameters() {
            const container = document.getElementById('parametersContainer');
            container.innerHTML = '';
            parametersCount = 0;

            defaultParameterTemplate.forEach(param => {
                addParameter(param.name, param.value);
            });

            showSuccess('已加载默认参数模板！');
        }

        // 添加参数
        function addParameter(name = '', value = '') {
            parametersCount++;
            const container = document.getElementById('parametersContainer');
            const parameterDiv = document.createElement('div');
            parameterDiv.className = 'parameter-row';
            parameterDiv.id = `parameter-${parametersCount}`;

            parameterDiv.innerHTML = `
                <div class="row align-items-center">
                    <div class="col-md-4">
                        <input type="text" class="form-control" placeholder="参数名称" value="${name}">
                    </div>
                    <div class="col-md-6">
                        <input type="text" class="form-control" placeholder="参数值" value="${value}">
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeParameter(${parametersCount})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;

            container.appendChild(parameterDiv);
        }

        // 删除参数
        function removeParameter(id) {
            const parameterDiv = document.getElementById(`parameter-${id}`);
            if (parameterDiv) {
                parameterDiv.remove();
            }
        }

        // 初始化富文本编辑器
        function initializeEditors() {
            // 产品详细描述编辑器
            if (document.getElementById('productContentEditor')) {
                productContentEditor = new Quill('#productContentEditor', {
                    theme: 'snow',
                    modules: {
                        toolbar: {
                            container: [
                                [{ 'header': [1, 2, 3, false] }],
                                ['bold', 'italic', 'underline', 'strike'],
                                [{ 'color': [] }, { 'background': [] }],
                                [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                                [{ 'align': [] }],
                                ['link', 'image'],
                                ['clean']
                            ],
                            handlers: {
                                'image': function() {
                                    selectImageForEditor(productContentEditor);
                                }
                            }
                        }
                    }
                });
            }

            // 应用场景编辑器
            if (document.getElementById('applicationScenariosEditor')) {
                applicationScenariosEditor = new Quill('#applicationScenariosEditor', {
                    theme: 'snow',
                    modules: {
                        toolbar: {
                            container: [
                                [{ 'header': [1, 2, 3, false] }],
                                ['bold', 'italic', 'underline'],
                                [{ 'color': [] }],
                                [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                                ['link', 'image'],
                                ['clean']
                            ],
                            handlers: {
                                'image': function() {
                                    selectImageForEditor(applicationScenariosEditor);
                                }
                            }
                        }
                    }
                });
            }
        }

        // 为编辑器选择图片
        function selectImageForEditor(editor) {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.onchange = async function(e) {
                const file = e.target.files[0];
                if (file) {
                    try {
                        showLoading();

                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('type', 'image');

                        const response = await fetch('/admin/upload-handler.php', {
                            method: 'POST',
                            body: formData
                        });

                        if (response.ok) {
                            const result = await response.json();
                            if (result.success) {
                                // 插入图片到编辑器
                                const range = editor.getSelection();
                                editor.insertEmbed(range.index, 'image', result.url);

                                // 添加到媒体库
                                addToMediaLibrary({
                                    id: 'media-' + Date.now(),
                                    name: result.originalName,
                                    type: 'image',
                                    category: '编辑器图片',
                                    size: result.size,
                                    url: result.url,
                                    uploadDate: new Date().toISOString().split('T')[0]
                                });

                                showSuccess(`图片插入成功: ${result.originalName}`);
                            } else {
                                showError('图片上传失败: ' + result.error);
                            }
                        } else {
                            // 降级到本地预览
                            const reader = new FileReader();
                            reader.onload = function(e) {
                                const range = editor.getSelection();
                                editor.insertEmbed(range.index, 'image', e.target.result);
                                showInfo('图片已插入，但未上传到服务器');
                            };
                            reader.readAsDataURL(file);
                        }

                        hideLoading();

                    } catch (error) {
                        console.error('图片上传失败:', error);
                        hideLoading();

                        // 降级到本地预览
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            const range = editor.getSelection();
                            editor.insertEmbed(range.index, 'image', e.target.result);
                            showInfo('图片已插入，但未上传到服务器');
                        };
                        reader.readAsDataURL(file);
                    }
                }
            };
            input.click();
        }

        // 上传本地图片
        function uploadLocalImage() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.multiple = true;
            input.onchange = function(e) {
                const files = Array.from(e.target.files);
                files.forEach(file => {
                    uploadImageToServer(file);
                });
            };
            input.click();
        }

        // 上传图片到服务器
        async function uploadImageToServer(file) {
            try {
                showLoading();

                const formData = new FormData();
                formData.append('file', file);
                formData.append('type', 'image');

                const response = await fetch('/admin/upload-handler.php', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        // 添加到图片库
                        addImageToGallery(result.url, result.originalName);

                        // 添加到媒体库
                        addToMediaLibrary({
                            id: 'media-' + Date.now(),
                            name: result.originalName,
                            type: 'image',
                            category: '产品图片',
                            size: result.size,
                            url: result.url,
                            uploadDate: new Date().toISOString().split('T')[0]
                        });

                        showSuccess(`图片上传成功: ${result.originalName}`);
                    } else {
                        showError('图片上传失败: ' + result.error);
                    }
                } else {
                    // 降级到本地预览
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        addImageToGallery(e.target.result, file.name);
                        showInfo('图片已添加到预览，但未上传到服务器');
                    };
                    reader.readAsDataURL(file);
                }

                hideLoading();

            } catch (error) {
                console.error('图片上传失败:', error);
                hideLoading();

                // 降级到本地预览
                const reader = new FileReader();
                reader.onload = function(e) {
                    addImageToGallery(e.target.result, file.name);
                    showInfo('图片已添加到预览，但未上传到服务器');
                };
                reader.readAsDataURL(file);
            }
        }

        // 添加到媒体库
        function addToMediaLibrary(mediaItem) {
            mediaLibrary.push(mediaItem);
            updateMediaList();
        }

        // 从媒体库选择图片
        function selectFromMediaLibrary() {
            // 创建媒体库选择模态框
            const modalHtml = `
                <div class="modal fade" id="mediaLibraryModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">选择媒体文件</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row" id="mediaLibraryGrid">
                                    ${mediaLibrary.filter(m => m.type === 'image').map(media => `
                                        <div class="col-md-4 mb-3">
                                            <div class="card media-item" onclick="selectMediaItem('${media.url}', '${media.name}')">
                                                <img src="${media.url}" class="card-img-top" style="height: 150px; object-fit: cover;">
                                                <div class="card-body p-2">
                                                    <small class="text-muted">${media.name}</small>
                                                </div>
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', modalHtml);
            const modal = new bootstrap.Modal(document.getElementById('mediaLibraryModal'));
            modal.show();

            // 模态框关闭时移除
            document.getElementById('mediaLibraryModal').addEventListener('hidden.bs.modal', function() {
                this.remove();
            });
        }

        // 选择媒体项
        function selectMediaItem(url, name) {
            addImageToGallery(url, name);
            bootstrap.Modal.getInstance(document.getElementById('mediaLibraryModal')).hide();
        }

        // 添加图片到图片库
        function addImageToGallery(url, alt) {
            galleryCount++;
            const container = document.getElementById('galleryContainer');
            const isMain = productGallery.length === 0; // 第一张图片设为主图

            const imageDiv = document.createElement('div');
            imageDiv.className = 'col-md-3 mb-3';
            imageDiv.id = `gallery-${galleryCount}`;

            imageDiv.innerHTML = `
                <div class="gallery-item position-relative">
                    <img src="${url}" class="gallery-preview w-100" alt="${alt}">
                    <div class="position-absolute top-0 end-0 p-2">
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeGalleryImage(${galleryCount})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="p-2">
                        <input type="text" class="form-control form-control-sm" placeholder="图片描述" value="${alt}">
                        <div class="form-check mt-1">
                            <input class="form-check-input" type="radio" name="mainImage" value="${galleryCount}" ${isMain ? 'checked' : ''}>
                            <label class="form-check-label">主图</label>
                        </div>
                    </div>
                </div>
            `;

            container.appendChild(imageDiv);

            productGallery.push({
                id: galleryCount,
                image: url,
                alt: alt,
                is_main: isMain
            });
        }

        // 删除图片库图片
        function removeGalleryImage(id) {
            const imageDiv = document.getElementById(`gallery-${id}`);
            if (imageDiv) {
                imageDiv.remove();
                productGallery = productGallery.filter(img => img.id !== id);
            }
        }

        // 更新相关产品选项
        function updateRelatedProducts() {
            const supplierSelect = document.getElementById('relatedSupplier');
            const productSelect = document.getElementById('relatedProduct');
            const selectedSupplier = supplierSelect.value;

            console.log('🔍 更新相关产品选项');
            console.log('选择的供应商:', selectedSupplier);
            console.log('当前产品数据数量:', projectData.products ? projectData.products.length : 0);
            console.log('产品数据样本:', projectData.products ? projectData.products.slice(0, 3) : []);

            productSelect.innerHTML = '<option value="">选择产品</option>';

            if (!selectedSupplier) {
                console.log('❌ 未选择供应商');
                return;
            }

            if (!projectData.products || projectData.products.length === 0) {
                console.log('❌ 产品数据为空，尝试重新加载');
                const option = document.createElement('option');
                option.value = '';
                option.textContent = '正在加载产品数据...';
                option.disabled = true;
                productSelect.appendChild(option);

                // 强制重新加载数据
                loadProjectData().then(() => {
                    console.log('🔄 数据重新加载完成，产品数量:', projectData.products ? projectData.products.length : 0);
                    if (projectData.products && projectData.products.length > 0) {
                        // 清除加载提示
                        productSelect.innerHTML = '<option value="">选择产品</option>';
                        // 重新调用更新函数
                        updateRelatedProducts();
                    } else {
                        productSelect.innerHTML = '<option value="" disabled>数据加载失败</option>';
                    }
                }).catch(error => {
                    console.error('数据加载失败:', error);
                    productSelect.innerHTML = '<option value="" disabled>数据加载失败</option>';
                });
                return;
            }

            // 过滤该供应商的产品
            const supplierProducts = projectData.products.filter(p => {
                if (!p.supplier) {
                    console.log('⚠️ 产品缺少供应商信息:', p);
                    return false;
                }

                // 精确匹配
                const exactMatch = p.supplier === selectedSupplier;

                // 包含匹配
                const includesMatch = p.supplier.includes(selectedSupplier) || selectedSupplier.includes(p.supplier);

                // 关键词匹配
                const keywordMatch =
                    (selectedSupplier.includes('微视') && p.supplier.includes('微视')) ||
                    (selectedSupplier.includes('维森') && p.supplier.includes('维森')) ||
                    (selectedSupplier.includes('智博') && p.supplier.includes('智博'));

                const isMatch = exactMatch || includesMatch || keywordMatch;

                if (isMatch) {
                    console.log('✅ 匹配的产品:', p.model, '-', p.title);
                }

                return isMatch;
            });

            console.log(`📊 供应商"${selectedSupplier}"的产品数量:`, supplierProducts.length);
            console.log('📦 产品列表:', supplierProducts.map(p => `${p.model} - ${p.title}`));

            if (supplierProducts.length > 0) {
                supplierProducts.forEach(product => {
                    const option = document.createElement('option');
                    option.value = product.id;
                    option.textContent = `${product.model || product.id} - ${product.title}`;
                    productSelect.appendChild(option);
                });

                console.log('✅ 已添加产品选项到下拉列表');
            } else {
                const option = document.createElement('option');
                option.value = '';
                option.textContent = '该供应商暂无产品';
                option.disabled = true;
                productSelect.appendChild(option);

                console.log('❌ 未找到匹配的产品');
                console.log('所有产品的供应商:', projectData.products.map(p => p.supplier));
            }
        }

        // 添加相关产品
        function addRelatedProduct() {
            const productSelect = document.getElementById('relatedProduct');
            const selectedProductId = productSelect.value;

            if (!selectedProductId) return;

            // 检查是否已经添加
            if (selectedRelatedProducts.includes(selectedProductId)) {
                showError('该产品已经添加过了');
                return;
            }

            const product = projectData.products.find(p => p.id === selectedProductId);
            if (!product) return;

            selectedRelatedProducts.push(selectedProductId);
            updateSelectedRelatedProductsDisplay();

            // 重置选择
            productSelect.value = '';
        }

        // 更新已选择相关产品显示
        function updateSelectedRelatedProductsDisplay() {
            const container = document.getElementById('selectedRelatedProducts');

            if (selectedRelatedProducts.length === 0) {
                container.innerHTML = '<p class="text-muted">暂无相关产品</p>';
                return;
            }

            container.innerHTML = selectedRelatedProducts.map(productId => {
                const product = projectData.products.find(p => p.id === productId);
                if (!product) return '';

                return `
                    <div class="badge bg-primary me-2 mb-2 p-2">
                        ${product.model} - ${product.title}
                        <button type="button" class="btn-close btn-close-white ms-2" onclick="removeRelatedProduct('${productId}')"></button>
                    </div>
                `;
            }).join('');
        }

        // 删除相关产品
        function removeRelatedProduct(productId) {
            selectedRelatedProducts = selectedRelatedProducts.filter(id => id !== productId);
            updateSelectedRelatedProductsDisplay();
        }

        // 添加下载文件
        function addDownloadFile() {
            downloadCount++;
            const container = document.getElementById('downloadFilesContainer');

            const fileDiv = document.createElement('div');
            fileDiv.className = 'download-file-row mb-3 p-3 border rounded';
            fileDiv.id = `download-${downloadCount}`;

            fileDiv.innerHTML = `
                <div class="row align-items-center">
                    <div class="col-md-3">
                        <label class="form-label">文件标题</label>
                        <input type="text" class="form-control" placeholder="如：产品说明书" value="">
                    </div>
                    <div class="col-md-5">
                        <label class="form-label">文件路径</label>
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="/uploads/filename.pdf" value="" readonly>
                            <button type="button" class="btn btn-outline-primary" onclick="uploadDownloadFile(${downloadCount})">
                                <i class="fas fa-upload"></i> 上传
                            </button>
                            <button type="button" class="btn btn-outline-info" onclick="selectDownloadFromMedia(${downloadCount})">
                                <i class="fas fa-folder"></i> 媒体库
                            </button>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">文件大小</label>
                        <input type="text" class="form-control form-control-sm" placeholder="自动检测" readonly>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">操作</label>
                        <div>
                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeDownloadFile(${downloadCount})">
                                <i class="fas fa-trash"></i> 删除
                            </button>
                        </div>
                    </div>
                </div>
            `;

            container.appendChild(fileDiv);
        }

        // 上传下载文件
        async function uploadDownloadFile(id) {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.pdf,.doc,.docx,.xls,.xlsx,.zip,.rar';
            input.onchange = async function(e) {
                const file = e.target.files[0];
                if (file) {
                    try {
                        showLoading();

                        const formData = new FormData();
                        formData.append('file', file);
                        formData.append('type', 'document');

                        const response = await fetch('/admin/upload-handler.php', {
                            method: 'POST',
                            body: formData
                        });

                        if (response.ok) {
                            const result = await response.json();
                            if (result.success) {
                                // 更新文件信息
                                const fileRow = document.getElementById(`download-${id}`);
                                const pathInput = fileRow.querySelector('input[placeholder*="uploads"]');
                                const sizeInput = fileRow.querySelector('input[placeholder="自动检测"]');
                                const titleInput = fileRow.querySelector('input[placeholder*="说明书"]');

                                pathInput.value = result.url;
                                sizeInput.value = result.size;

                                // 如果标题为空，自动设置标题
                                if (!titleInput.value) {
                                    titleInput.value = result.originalName.replace(/\.[^/.]+$/, "");
                                }

                                // 添加到媒体库
                                addToMediaLibrary({
                                    id: 'media-' + Date.now(),
                                    name: result.originalName,
                                    type: 'document',
                                    category: '产品文档',
                                    size: result.size,
                                    url: result.url,
                                    uploadDate: new Date().toISOString().split('T')[0]
                                });

                                showSuccess(`文件上传成功: ${result.originalName}`);
                            } else {
                                showError('文件上传失败: ' + result.error);
                            }
                        } else {
                            // 降级到本地路径
                            const fileName = file.name;
                            const fileSize = formatFileSize(file.size);
                            const filePath = `/uploads/${fileName}`;

                            const fileRow = document.getElementById(`download-${id}`);
                            const pathInput = fileRow.querySelector('input[placeholder*="uploads"]');
                            const sizeInput = fileRow.querySelector('input[placeholder="自动检测"]');
                            const titleInput = fileRow.querySelector('input[placeholder*="说明书"]');

                            pathInput.value = filePath;
                            sizeInput.value = fileSize;

                            if (!titleInput.value) {
                                titleInput.value = fileName.replace(/\.[^/.]+$/, "");
                            }

                            showInfo(`文件信息已设置，但未上传到服务器: ${fileName}`);
                        }

                        hideLoading();

                    } catch (error) {
                        console.error('文件上传失败:', error);
                        hideLoading();

                        // 降级到本地路径
                        const fileName = file.name;
                        const fileSize = formatFileSize(file.size);
                        const filePath = `/uploads/${fileName}`;

                        const fileRow = document.getElementById(`download-${id}`);
                        const pathInput = fileRow.querySelector('input[placeholder*="uploads"]');
                        const sizeInput = fileRow.querySelector('input[placeholder="自动检测"]');
                        const titleInput = fileRow.querySelector('input[placeholder*="说明书"]');

                        pathInput.value = filePath;
                        sizeInput.value = fileSize;

                        if (!titleInput.value) {
                            titleInput.value = fileName.replace(/\.[^/.]+$/, "");
                        }

                        showInfo(`文件信息已设置，但未上传到服务器: ${fileName}`);
                    }
                }
            };
            input.click();
        }

        // 从媒体库选择下载文件
        function selectDownloadFromMedia(id) {
            // 创建媒体库选择模态框（文档类型）
            const modalHtml = `
                <div class="modal fade" id="downloadMediaModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">选择下载文件</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row" id="downloadMediaGrid">
                                    ${mediaLibrary.filter(m => m.type === 'document').map(media => `
                                        <div class="col-md-6 mb-3">
                                            <div class="card media-item" onclick="selectDownloadMedia('${media.url}', '${media.name}', '${media.size}', ${id})">
                                                <div class="card-body">
                                                    <div class="d-flex align-items-center">
                                                        <i class="fas fa-file-alt fa-2x text-primary me-3"></i>
                                                        <div>
                                                            <h6 class="card-title mb-1">${media.name}</h6>
                                                            <small class="text-muted">${media.size}</small>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    `).join('')}
                                    ${mediaLibrary.filter(m => m.type === 'document').length === 0 ?
                                        '<div class="col-12 text-center text-muted">暂无文档文件</div>' : ''}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', modalHtml);
            const modal = new bootstrap.Modal(document.getElementById('downloadMediaModal'));
            modal.show();

            // 模态框关闭时移除
            document.getElementById('downloadMediaModal').addEventListener('hidden.bs.modal', function() {
                this.remove();
            });
        }

        // 选择下载媒体文件
        function selectDownloadMedia(url, name, size, id) {
            const fileRow = document.getElementById(`download-${id}`);
            const pathInput = fileRow.querySelector('input[placeholder*="uploads"]');
            const sizeInput = fileRow.querySelector('input[placeholder="自动检测"]');
            const titleInput = fileRow.querySelector('input[placeholder*="说明书"]');

            pathInput.value = url;
            sizeInput.value = size;

            if (!titleInput.value) {
                titleInput.value = name.replace(/\.[^/.]+$/, "");
            }

            bootstrap.Modal.getInstance(document.getElementById('downloadMediaModal')).hide();
            showSuccess(`已选择文件: ${name}`);
        }

        // 删除下载文件
        function removeDownloadFile(id) {
            const fileDiv = document.getElementById(`download-${id}`);
            if (fileDiv) {
                fileDiv.remove();
            }
        }

        // 格式化文件大小
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // 添加功能
        function addSupplier() {
            showSuccess('添加供应商功能开发中...');
        }

        function addCategory() {
            showSuccess('添加分类功能开发中...');
        }

        // 全局变量存储当前编辑的项目ID
        let currentEditingNewsId = null;
        let currentEditingCaseId = null;
        let currentEditingApplicationId = null;

        function addNews() {
            currentEditingNewsId = null;
            clearNewsForm();
            document.getElementById('newsModalTitle').textContent = '添加资讯';
            document.getElementById('newsDate').value = new Date().toISOString().split('T')[0];
            const modal = new bootstrap.Modal(document.getElementById('newsModal'));
            modal.show();
        }

        function addCase() {
            currentEditingCaseId = null;
            clearCaseForm();
            document.getElementById('caseModalTitle').textContent = '添加案例';
            const modal = new bootstrap.Modal(document.getElementById('caseModal'));
            modal.show();
        }

        function addApplication() {
            currentEditingApplicationId = null;
            clearApplicationForm();
            document.getElementById('applicationModalTitle').textContent = '添加应用领域';
            const modal = new bootstrap.Modal(document.getElementById('applicationModal'));
            modal.show();
        }

        // 编辑功能
        function editSupplier(id) {
            showSuccess(`编辑供应商: ${id}`);
        }

        function editCategory(id) {
            showSuccess(`编辑分类: ${id}`);
        }

        function editNews(id) {
            const news = projectData.news.find(n => n.id === id);
            if (!news) {
                showError('资讯不存在');
                return;
            }

            currentEditingNewsId = id;
            document.getElementById('newsModalTitle').textContent = '编辑资讯';

            // 填充表单
            document.getElementById('newsTitle').value = news.title;
            document.getElementById('newsSummary').value = news.summary;
            document.getElementById('newsContent').value = news.content;
            document.getElementById('newsCategory').value = news.category || '行业动态';
            document.getElementById('newsAuthor').value = news.author || '编辑部';
            document.getElementById('newsDate').value = news.date;
            document.getElementById('newsStatus').value = news.status || 'draft';
            document.getElementById('newsTags').value = news.tags ? news.tags.join(', ') : '';
            document.getElementById('newsFeaturedImage').value = news.featured_image || '';

            const modal = new bootstrap.Modal(document.getElementById('newsModal'));
            modal.show();
        }

        function editCase(id) {
            const caseItem = projectData.cases.find(c => c.id === id);
            if (!caseItem) {
                showError('案例不存在');
                return;
            }

            currentEditingCaseId = id;
            document.getElementById('caseModalTitle').textContent = '编辑案例';

            // 填充表单
            document.getElementById('caseTitle').value = caseItem.title;
            document.getElementById('caseSummary').value = caseItem.summary;
            document.getElementById('caseContent').value = caseItem.content;
            document.getElementById('casePrimaryCategory').value = caseItem.primary_category || '';
            document.getElementById('caseApplicationField').value = caseItem.application_field || '';
            document.getElementById('caseApplicationScenario').value = caseItem.application_scenario || '';
            document.getElementById('caseClient').value = caseItem.client || '';
            document.getElementById('caseIndustry').value = caseItem.industry || '';
            document.getElementById('caseDetectionObject').value = caseItem.detection_object || '';
            document.getElementById('caseEquipmentUsed').value = caseItem.equipment_used || '';
            document.getElementById('caseFeaturedImage').value = caseItem.featured_image || '';
            document.getElementById('caseStatus').value = caseItem.status || 'draft';

            const modal = new bootstrap.Modal(document.getElementById('caseModal'));
            modal.show();
        }

        function editApplication(id) {
            const app = projectData.applications.find(a => a.id === id);
            if (!app) {
                showError('应用领域不存在');
                return;
            }

            currentEditingApplicationId = id;
            document.getElementById('applicationModalTitle').textContent = '编辑应用领域';

            // 填充表单
            document.getElementById('applicationTitle').value = app.title;
            document.getElementById('applicationSummary').value = app.summary;
            document.getElementById('applicationContent').value = app.content;
            document.getElementById('applicationIcon').value = app.icon || '';
            document.getElementById('applicationFeatures').value = app.features ? app.features.join('\n') : '';
            document.getElementById('applicationKeyTechnologies').value = app.key_technologies ? app.key_technologies.join('\n') : '';
            document.getElementById('applicationWeight').value = app.weight || 1;
            document.getElementById('applicationImage').value = app.image || '';
            document.getElementById('applicationStatus').value = app.status || 'draft';

            const modal = new bootstrap.Modal(document.getElementById('applicationModal'));
            modal.show();
        }

        // 查看功能
        function viewSupplierProducts(supplierName) {
            // 切换到产品页面并过滤该供应商的产品
            showSection('products');
            setTimeout(() => {
                const supplierFilter = document.getElementById('supplierFilter');
                if (supplierFilter) {
                    supplierFilter.value = supplierName;
                    filterProducts();
                }
            }, 100);
            showSuccess(`显示供应商"${supplierName}"的产品`);
        }

        function viewCategoryProducts(categoryName) {
            // 切换到产品页面并过滤该分类的产品
            showSection('products');
            setTimeout(() => {
                const categoryFilter = document.getElementById('categoryFilter');
                if (categoryFilter) {
                    categoryFilter.value = categoryName;
                    filterProducts();
                }
            }, 100);
            showSuccess(`显示分类"${categoryName}"的产品`);
        }

        function viewNews(id) {
            const news = projectData.news.find(n => n.id === id);
            if (news) {
                window.open(news.uri, '_blank');
            }
        }

        function viewCase(id) {
            const caseItem = projectData.cases.find(c => c.id === id);
            if (caseItem) {
                window.open(caseItem.uri, '_blank');
            }
        }

        function viewApplication(id) {
            const app = projectData.applications.find(a => a.id === id);
            if (app) {
                window.open(app.uri, '_blank');
            }
        }

        // 删除功能
        function deleteSupplier(id) {
            if (confirm('确定要删除这个供应商吗？')) {
                showSuccess('删除供应商功能开发中...');
            }
        }

        function deleteCategory(id) {
            if (confirm('确定要删除这个分类吗？')) {
                showSuccess('删除分类功能开发中...');
            }
        }

        function deleteNews(id) {
            const news = projectData.news.find(n => n.id === id);
            if (!news) {
                showError('资讯不存在');
                return;
            }

            if (confirm(`确定要删除资讯"${news.title}"吗？此操作不可撤销！`)) {
                projectData.news = projectData.news.filter(n => n.id !== id);
                updateNewsList();
                updateDashboard();
                showSuccess('资讯删除成功！');
            }
        }

        function deleteCase(id) {
            const caseItem = projectData.cases.find(c => c.id === id);
            if (!caseItem) {
                showError('案例不存在');
                return;
            }

            if (confirm(`确定要删除案例"${caseItem.title}"吗？此操作不可撤销！`)) {
                projectData.cases = projectData.cases.filter(c => c.id !== id);
                updateCaseList();
                updateDashboard();
                showSuccess('案例删除成功！');
            }
        }

        function deleteApplication(id) {
            const app = projectData.applications.find(a => a.id === id);
            if (!app) {
                showError('应用领域不存在');
                return;
            }

            if (confirm(`确定要删除应用领域"${app.title}"吗？此操作不可撤销！`)) {
                projectData.applications = projectData.applications.filter(a => a.id !== id);
                updateApplicationList();
                updateDashboard();
                showSuccess('应用领域删除成功！');
            }
        }

        // 系统设置功能
        function exportData() {
            const data = {
                products: projectData.products,
                suppliers: projectData.suppliers,
                news: projectData.news,
                cases: projectData.cases,
                applications: projectData.applications,
                categories: projectData.categories,
                exportTime: new Date().toISOString()
            };

            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `content-data-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);

            showSuccess('数据导出完成！');
        }

        function importData() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        try {
                            const data = JSON.parse(e.target.result);
                            // 这里可以添加数据验证和导入逻辑
                            showSuccess('数据导入功能开发中...');
                        } catch (error) {
                            showError('数据格式错误: ' + error.message);
                        }
                    };
                    reader.readAsText(file);
                }
            };
            input.click();
        }

        // 保存资讯
        function saveNews() {
            const title = document.getElementById('newsTitle').value.trim();
            const summary = document.getElementById('newsSummary').value.trim();
            const content = document.getElementById('newsContent').value.trim();

            if (!title || !summary || !content) {
                showError('请填写所有必填字段');
                return;
            }

            const newsData = {
                title: title,
                summary: summary,
                content: content,
                category: document.getElementById('newsCategory').value,
                author: document.getElementById('newsAuthor').value,
                date: document.getElementById('newsDate').value,
                status: document.getElementById('newsStatus').value,
                tags: document.getElementById('newsTags').value.split(',').map(tag => tag.trim()).filter(tag => tag),
                featured_image: document.getElementById('newsFeaturedImage').value,
                views: Math.floor(Math.random() * 200) + 50
            };

            if (currentEditingNewsId) {
                // 更新现有资讯
                const index = projectData.news.findIndex(n => n.id === currentEditingNewsId);
                if (index !== -1) {
                    projectData.news[index] = { ...projectData.news[index], ...newsData };
                    showSuccess('资讯更新成功！');
                }
            } else {
                // 添加新资讯
                const newId = 'news-' + Date.now();
                projectData.news.push({
                    id: newId,
                    uri: `/news/${newId}/`,
                    ...newsData
                });
                showSuccess('资讯添加成功！');
            }

            updateNewsList();
            updateDashboard();
            bootstrap.Modal.getInstance(document.getElementById('newsModal')).hide();
        }

        // 保存案例
        function saveCase() {
            const title = document.getElementById('caseTitle').value.trim();
            const summary = document.getElementById('caseSummary').value.trim();
            const content = document.getElementById('caseContent').value.trim();

            if (!title || !summary || !content) {
                showError('请填写所有必填字段');
                return;
            }

            const caseData = {
                title: title,
                summary: summary,
                content: content,
                primary_category: document.getElementById('casePrimaryCategory').value,
                application_field: document.getElementById('caseApplicationField').value,
                application_scenario: document.getElementById('caseApplicationScenario').value,
                client: document.getElementById('caseClient').value,
                industry: document.getElementById('caseIndustry').value,
                detection_object: document.getElementById('caseDetectionObject').value,
                equipment_used: document.getElementById('caseEquipmentUsed').value,
                featured_image: document.getElementById('caseFeaturedImage').value,
                status: document.getElementById('caseStatus').value,
                date: new Date().toISOString().split('T')[0]
            };

            if (currentEditingCaseId) {
                // 更新现有案例
                const index = projectData.cases.findIndex(c => c.id === currentEditingCaseId);
                if (index !== -1) {
                    projectData.cases[index] = { ...projectData.cases[index], ...caseData };
                    showSuccess('案例更新成功！');
                }
            } else {
                // 添加新案例
                const newId = 'case-' + Date.now();
                projectData.cases.push({
                    id: newId,
                    uri: `/cases/${newId}/`,
                    ...caseData
                });
                showSuccess('案例添加成功！');
            }

            updateCaseList();
            updateDashboard();
            bootstrap.Modal.getInstance(document.getElementById('caseModal')).hide();
        }

        // 保存应用领域
        function saveApplication() {
            const title = document.getElementById('applicationTitle').value.trim();
            const summary = document.getElementById('applicationSummary').value.trim();
            const content = document.getElementById('applicationContent').value.trim();

            if (!title || !summary || !content) {
                showError('请填写所有必填字段');
                return;
            }

            const appData = {
                title: title,
                summary: summary,
                content: content,
                icon: document.getElementById('applicationIcon').value,
                features: document.getElementById('applicationFeatures').value.split('\n').map(f => f.trim()).filter(f => f),
                key_technologies: document.getElementById('applicationKeyTechnologies').value.split('\n').map(t => t.trim()).filter(t => t),
                weight: parseInt(document.getElementById('applicationWeight').value) || 1,
                image: document.getElementById('applicationImage').value,
                status: document.getElementById('applicationStatus').value,
                date: new Date().toISOString().split('T')[0],
                category: '应用领域'
            };

            if (currentEditingApplicationId) {
                // 更新现有应用领域
                const index = projectData.applications.findIndex(a => a.id === currentEditingApplicationId);
                if (index !== -1) {
                    projectData.applications[index] = { ...projectData.applications[index], ...appData };
                    showSuccess('应用领域更新成功！');
                }
            } else {
                // 添加新应用领域
                const newId = 'app-' + Date.now();
                projectData.applications.push({
                    id: newId,
                    uri: `/applications/${newId}/`,
                    ...appData
                });
                showSuccess('应用领域添加成功！');
            }

            updateApplicationList();
            updateDashboard();
            bootstrap.Modal.getInstance(document.getElementById('applicationModal')).hide();
        }

        // 清空表单函数
        function clearNewsForm() {
            document.getElementById('newsTitle').value = '';
            document.getElementById('newsSummary').value = '';
            document.getElementById('newsContent').value = '';
            document.getElementById('newsCategory').value = '行业动态';
            document.getElementById('newsAuthor').value = '编辑部';
            document.getElementById('newsDate').value = new Date().toISOString().split('T')[0];
            document.getElementById('newsStatus').value = 'draft';
            document.getElementById('newsTags').value = '';
            document.getElementById('newsFeaturedImage').value = '';
        }

        function clearCaseForm() {
            document.getElementById('caseTitle').value = '';
            document.getElementById('caseSummary').value = '';
            document.getElementById('caseContent').value = '';
            document.getElementById('casePrimaryCategory').value = '';
            document.getElementById('caseApplicationField').value = '';
            document.getElementById('caseApplicationScenario').value = '';
            document.getElementById('caseClient').value = '';
            document.getElementById('caseIndustry').value = '';
            document.getElementById('caseDetectionObject').value = '';
            document.getElementById('caseEquipmentUsed').value = '';
            document.getElementById('caseFeaturedImage').value = '';
            document.getElementById('caseStatus').value = 'draft';
        }

        function clearApplicationForm() {
            document.getElementById('applicationTitle').value = '';
            document.getElementById('applicationSummary').value = '';
            document.getElementById('applicationContent').value = '';
            document.getElementById('applicationIcon').value = '';
            document.getElementById('applicationFeatures').value = '';
            document.getElementById('applicationKeyTechnologies').value = '';
            document.getElementById('applicationWeight').value = '1';
            document.getElementById('applicationImage').value = '';
            document.getElementById('applicationStatus').value = 'draft';
        }

        // 生成Markdown内容的函数
        function generateNewsMarkdown(newsData) {
            const tags = newsData.tags && newsData.tags.length > 0 ?
                newsData.tags.map(tag => `- ${tag}`).join('\n') : '';

            return `---
title: ${newsData.title}
date: ${newsData.date}
summary: ${newsData.summary}
categories:
- ${newsData.category}
${tags ? `tags:\n${tags}` : ''}
author: ${newsData.author}
views: ${newsData.views || 0}
${newsData.featured_image ? `featured_image: "${newsData.featured_image}"` : ''}
---

${newsData.content}
`;
        }

        function generateCaseMarkdown(caseData) {
            return `---
title: "${caseData.title}"
${caseData.primary_category ? `primary_category: ["${caseData.primary_category}"]` : ''}
${caseData.application_field ? `application_field: ["${caseData.application_field}"]` : ''}
${caseData.application_scenario ? `application_scenario: ["${caseData.application_scenario}"]` : ''}
${caseData.featured_image ? `featured_image: "${caseData.featured_image}"` : ''}
summary: "${caseData.summary}"
date: ${caseData.date}
${caseData.client ? `client: "${caseData.client}"` : ''}
${caseData.industry ? `industry: "${caseData.industry}"` : ''}
${caseData.detection_object ? `detection_object: "${caseData.detection_object}"` : ''}
${caseData.equipment_used ? `equipment_used: "${caseData.equipment_used}"` : ''}
---

${caseData.content}
`;
        }

        function generateApplicationMarkdown(appData) {
            const features = appData.features && appData.features.length > 0 ?
                appData.features.map(f => `  - "${f}"`).join('\n') : '';
            const keyTech = appData.key_technologies && appData.key_technologies.length > 0 ?
                appData.key_technologies.map(t => `  - "${t}"`).join('\n') : '';

            return `---
title: "${appData.title}"
date: ${appData.date}
summary: "${appData.summary}"
${appData.icon ? `icon: "${appData.icon}"` : ''}
${appData.image ? `image: "${appData.image}"` : ''}
weight: ${appData.weight}

${features ? `# 应用特点\nfeatures:\n${features}\n` : ''}
${keyTech ? `# 关键技术\nkey_technologies:\n${keyTech}\n` : ''}
---

${appData.content}
`;
        }

        // 预览功能
        function previewNews() {
            const title = document.getElementById('newsTitle').value.trim();
            if (!title) {
                showError('请先输入资讯标题');
                return;
            }

            const newsData = {
                title: title,
                summary: document.getElementById('newsSummary').value.trim(),
                content: document.getElementById('newsContent').value.trim(),
                category: document.getElementById('newsCategory').value,
                author: document.getElementById('newsAuthor').value,
                date: document.getElementById('newsDate').value,
                status: document.getElementById('newsStatus').value,
                tags: document.getElementById('newsTags').value.split(',').map(tag => tag.trim()).filter(tag => tag),
                featured_image: document.getElementById('newsFeaturedImage').value
            };

            const previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <html>
                <head>
                    <title>资讯预览 - ${newsData.title}</title>
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
                </head>
                <body>
                    <div class="container py-4">
                        <h1>${newsData.title}</h1>
                        <div class="text-muted mb-3">
                            <span class="badge bg-info">${newsData.category}</span>
                            <span class="ms-2">作者: ${newsData.author}</span>
                            <span class="ms-2">日期: ${newsData.date}</span>
                            <span class="ms-2">状态: ${newsData.status === 'published' ? '已发布' : '草稿'}</span>
                        </div>
                        ${newsData.featured_image ? `<img src="${newsData.featured_image}" class="img-fluid mb-3" alt="特色图片">` : ''}
                        <div class="lead">${newsData.summary}</div>
                        <hr>
                        <div style="white-space: pre-wrap;">${newsData.content}</div>
                        ${newsData.tags.length > 0 ? `
                            <hr>
                            <div>
                                <strong>标签: </strong>
                                ${newsData.tags.map(tag => `<span class="badge bg-secondary me-1">${tag}</span>`).join('')}
                            </div>
                        ` : ''}
                    </div>
                </body>
                </html>
            `);
        }

        function previewCase() {
            const title = document.getElementById('caseTitle').value.trim();
            if (!title) {
                showError('请先输入案例标题');
                return;
            }

            const caseData = {
                title: title,
                summary: document.getElementById('caseSummary').value.trim(),
                content: document.getElementById('caseContent').value.trim(),
                primary_category: document.getElementById('casePrimaryCategory').value,
                application_field: document.getElementById('caseApplicationField').value,
                application_scenario: document.getElementById('caseApplicationScenario').value,
                client: document.getElementById('caseClient').value,
                industry: document.getElementById('caseIndustry').value,
                detection_object: document.getElementById('caseDetectionObject').value,
                equipment_used: document.getElementById('caseEquipmentUsed').value,
                featured_image: document.getElementById('caseFeaturedImage').value
            };

            const previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <html>
                <head>
                    <title>案例预览 - ${caseData.title}</title>
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
                </head>
                <body>
                    <div class="container py-4">
                        <h1>${caseData.title}</h1>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                ${caseData.primary_category ? `<p><strong>主要分类:</strong> ${caseData.primary_category}</p>` : ''}
                                ${caseData.application_field ? `<p><strong>应用领域:</strong> ${caseData.application_field}</p>` : ''}
                                ${caseData.application_scenario ? `<p><strong>应用场景:</strong> ${caseData.application_scenario}</p>` : ''}
                                ${caseData.client ? `<p><strong>客户:</strong> ${caseData.client}</p>` : ''}
                            </div>
                            <div class="col-md-6">
                                ${caseData.industry ? `<p><strong>行业:</strong> ${caseData.industry}</p>` : ''}
                                ${caseData.detection_object ? `<p><strong>检测对象:</strong> ${caseData.detection_object}</p>` : ''}
                                ${caseData.equipment_used ? `<p><strong>使用设备:</strong> ${caseData.equipment_used}</p>` : ''}
                            </div>
                        </div>
                        ${caseData.featured_image ? `<img src="${caseData.featured_image}" class="img-fluid mb-3" alt="案例图片">` : ''}
                        <div class="lead">${caseData.summary}</div>
                        <hr>
                        <div style="white-space: pre-wrap;">${caseData.content}</div>
                    </div>
                </body>
                </html>
            `);
        }

        function previewApplication() {
            const title = document.getElementById('applicationTitle').value.trim();
            if (!title) {
                showError('请先输入应用领域标题');
                return;
            }

            const appData = {
                title: title,
                summary: document.getElementById('applicationSummary').value.trim(),
                content: document.getElementById('applicationContent').value.trim(),
                icon: document.getElementById('applicationIcon').value,
                features: document.getElementById('applicationFeatures').value.split('\n').map(f => f.trim()).filter(f => f),
                key_technologies: document.getElementById('applicationKeyTechnologies').value.split('\n').map(t => t.trim()).filter(t => t),
                weight: document.getElementById('applicationWeight').value,
                image: document.getElementById('applicationImage').value
            };

            const previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <html>
                <head>
                    <title>应用领域预览 - ${appData.title}</title>
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
                    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
                </head>
                <body>
                    <div class="container py-4">
                        <h1>
                            ${appData.icon ? `<i class="${appData.icon} me-2"></i>` : ''}
                            ${appData.title}
                        </h1>
                        <p><strong>权重:</strong> ${appData.weight}</p>
                        ${appData.image ? `<img src="${appData.image}" class="img-fluid mb-3" alt="应用领域图片">` : ''}
                        <div class="lead">${appData.summary}</div>
                        <hr>
                        ${appData.features.length > 0 ? `
                            <h3>应用特点</h3>
                            <ul>
                                ${appData.features.map(f => `<li>${f}</li>`).join('')}
                            </ul>
                        ` : ''}
                        ${appData.key_technologies.length > 0 ? `
                            <h3>关键技术</h3>
                            <ul>
                                ${appData.key_technologies.map(t => `<li>${t}</li>`).join('')}
                            </ul>
                        ` : ''}
                        <hr>
                        <div style="white-space: pre-wrap;">${appData.content}</div>
                    </div>
                </body>
                </html>
            `);
        }

        // 导出Markdown功能
        function exportNewsMarkdown() {
            const title = document.getElementById('newsTitle').value.trim();
            if (!title) {
                showError('请先输入资讯标题');
                return;
            }

            const newsData = {
                title: title,
                summary: document.getElementById('newsSummary').value.trim(),
                content: document.getElementById('newsContent').value.trim(),
                category: document.getElementById('newsCategory').value,
                author: document.getElementById('newsAuthor').value,
                date: document.getElementById('newsDate').value,
                status: document.getElementById('newsStatus').value,
                tags: document.getElementById('newsTags').value.split(',').map(tag => tag.trim()).filter(tag => tag),
                featured_image: document.getElementById('newsFeaturedImage').value,
                views: Math.floor(Math.random() * 200) + 50
            };

            const markdown = generateNewsMarkdown(newsData);
            downloadMarkdown(markdown, `${title.replace(/[^a-zA-Z0-9\u4e00-\u9fa5]/g, '-')}.md`);
        }

        function exportCaseMarkdown() {
            const title = document.getElementById('caseTitle').value.trim();
            if (!title) {
                showError('请先输入案例标题');
                return;
            }

            const caseData = {
                title: title,
                summary: document.getElementById('caseSummary').value.trim(),
                content: document.getElementById('caseContent').value.trim(),
                primary_category: document.getElementById('casePrimaryCategory').value,
                application_field: document.getElementById('caseApplicationField').value,
                application_scenario: document.getElementById('caseApplicationScenario').value,
                client: document.getElementById('caseClient').value,
                industry: document.getElementById('caseIndustry').value,
                detection_object: document.getElementById('caseDetectionObject').value,
                equipment_used: document.getElementById('caseEquipmentUsed').value,
                featured_image: document.getElementById('caseFeaturedImage').value,
                date: new Date().toISOString().split('T')[0]
            };

            const markdown = generateCaseMarkdown(caseData);
            downloadMarkdown(markdown, `${title.replace(/[^a-zA-Z0-9\u4e00-\u9fa5]/g, '-')}.md`);
        }

        function exportApplicationMarkdown() {
            const title = document.getElementById('applicationTitle').value.trim();
            if (!title) {
                showError('请先输入应用领域标题');
                return;
            }

            const appData = {
                title: title,
                summary: document.getElementById('applicationSummary').value.trim(),
                content: document.getElementById('applicationContent').value.trim(),
                icon: document.getElementById('applicationIcon').value,
                features: document.getElementById('applicationFeatures').value.split('\n').map(f => f.trim()).filter(f => f),
                key_technologies: document.getElementById('applicationKeyTechnologies').value.split('\n').map(t => t.trim()).filter(t => t),
                weight: parseInt(document.getElementById('applicationWeight').value) || 1,
                image: document.getElementById('applicationImage').value,
                date: new Date().toISOString().split('T')[0]
            };

            const markdown = generateApplicationMarkdown(appData);
            downloadMarkdown(markdown, `${title.replace(/[^a-zA-Z0-9\u4e00-\u9fa5]/g, '-')}.md`);
        }

        function downloadMarkdown(content, filename) {
            const blob = new Blob([content], { type: 'text/markdown' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.click();
            URL.revokeObjectURL(url);
            showSuccess('Markdown文件导出成功！');
        }

        // 产品预览功能
        function previewProduct() {
            const title = document.getElementById('productTitle').value.trim();
            if (!title) {
                showError('请先输入产品标题');
                return;
            }

            const productData = {
                title: title,
                model: document.getElementById('productModel').value.trim(),
                summary: document.getElementById('productSummary').value.trim(),
                content: document.getElementById('productContent').value.trim(),
                primary_category: document.getElementById('productPrimaryCategory').value,
                secondary_category: document.getElementById('productSecondaryCategory').value,
                supplier: document.getElementById('productSupplier').value,
                series: document.getElementById('productSeries').value,
                price: document.getElementById('productPrice').value,
                image: document.getElementById('productImage').value
            };

            const previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <html>
                <head>
                    <title>产品预览 - ${productData.title}</title>
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
                </head>
                <body>
                    <div class="container py-4">
                        <h1>${productData.title}</h1>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <p><strong>产品型号:</strong> ${productData.model}</p>
                                <p><strong>主要分类:</strong> ${productData.primary_category}</p>
                                ${productData.secondary_category ? `<p><strong>次要分类:</strong> ${productData.secondary_category}</p>` : ''}
                                <p><strong>供应商:</strong> ${productData.supplier}</p>
                            </div>
                            <div class="col-md-6">
                                ${productData.series ? `<p><strong>产品系列:</strong> ${productData.series}</p>` : ''}
                                ${productData.price ? `<p><strong>价格:</strong> ¥${productData.price}</p>` : ''}
                            </div>
                        </div>
                        ${productData.image ? `<img src="${productData.image}" class="img-fluid mb-3" alt="产品图片">` : ''}
                        <div class="lead">${productData.summary}</div>
                        <hr>
                        <div style="white-space: pre-wrap;">${productData.content}</div>
                    </div>
                </body>
                </html>
            `);
        }

        // 产品导出Markdown功能
        function exportProductMarkdown() {
            const title = document.getElementById('productTitle').value.trim();
            if (!title) {
                showError('请先输入产品标题');
                return;
            }

            const productData = {
                title: title,
                model: document.getElementById('productModel').value.trim(),
                summary: document.getElementById('productSummary').value.trim(),
                content: document.getElementById('productContent').value.trim(),
                primary_category: document.getElementById('productPrimaryCategory').value,
                secondary_category: document.getElementById('productSecondaryCategory').value,
                supplier: document.getElementById('productSupplier').value,
                series: document.getElementById('productSeries').value,
                price: document.getElementById('productPrice').value,
                image: document.getElementById('productImage').value,
                weight: parseInt(document.getElementById('productWeight').value) || 1,
                date: new Date().toISOString().split('T')[0]
            };

            const markdown = generateProductMarkdown(productData);
            downloadMarkdown(markdown, `${title.replace(/[^a-zA-Z0-9\u4e00-\u9fa5]/g, '-')}.md`);
        }

        // 生成产品Markdown内容
        function generateProductMarkdown(productData) {
            return `---
title: "${productData.title}"
model: "${productData.model}"
date: ${productData.date}
summary: "${productData.summary}"
primary_category: ["${productData.primary_category}"]
${productData.secondary_category ? `secondary_category: ["${productData.secondary_category}"]` : ''}
supplier: "${productData.supplier}"
${productData.series ? `series: "${productData.series}"` : ''}
${productData.price ? `price: ${productData.price}` : ''}
${productData.image ? `image: "${productData.image}"` : ''}
weight: ${productData.weight}
---

${productData.content}
`;
        }

        // 更新供应商列表
        function updateSupplierList() {
            const tbody = document.getElementById('supplierList');

            if (suppliersData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">暂无供应商数据</td></tr>';
                createPagination('suppliers', 0, 1);
                return;
            }

            // 获取当前页的数据
            const paginatedSuppliers = getPaginatedData(projectData.suppliers, currentPages.suppliers);

            tbody.innerHTML = paginatedSuppliers.map(supplier => `
                <tr>
                    <td>
                        <strong>${supplier.name}</strong>
                    </td>
                    <td><span class="badge bg-secondary">${supplier.type}</span></td>
                    <td><span class="badge bg-primary">${supplier.products}</span></td>
                    <td><span class="status-badge status-${supplier.status}">${supplier.status === 'active' ? '活跃' : '停用'}</span></td>
                    <td>${supplier.date}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary btn-action" onclick="editSupplier('${supplier.id}')" title="编辑">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-info btn-action" onclick="viewSupplierProducts('${supplier.name}')" title="查看产品">
                            <i class="fas fa-box"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger btn-action" onclick="deleteSupplier('${supplier.id}')" title="删除">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');

            // 创建分页
            createPagination('suppliers', projectData.suppliers.length, currentPages.suppliers);
        }

        // 更新分类列表
        function updateCategoryList() {
            const tbody = document.getElementById('categoryList');

            if (categoriesData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">暂无分类数据</td></tr>';
                createPagination('categories', 0, 1);
                return;
            }

            // 获取当前页的数据
            const paginatedCategories = getPaginatedData(projectData.categories, currentPages.categories);

            tbody.innerHTML = paginatedCategories.map(category => `
                <tr>
                    <td>
                        <strong>${category.name}</strong>
                    </td>
                    <td><span class="badge bg-primary">${category.products}</span></td>
                    <td><span class="status-badge status-${category.status}">${category.status === 'active' ? '启用' : '禁用'}</span></td>
                    <td>${category.date}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary btn-action" onclick="editCategory('${category.id}')" title="编辑">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-info btn-action" onclick="viewCategoryProducts('${category.name}')" title="查看产品">
                            <i class="fas fa-box"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger btn-action" onclick="deleteCategory('${category.id}')" title="删除">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');

            // 创建分页
            createPagination('categories', projectData.categories.length, currentPages.categories);
        }

        // 更新资讯列表
        function updateNewsList() {
            const tbody = document.getElementById('newsList');

            if (newsData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">暂无资讯数据</td></tr>';
                createPagination('news', 0, 1);
                return;
            }

            // 获取当前页的数据
            const paginatedNews = getPaginatedData(projectData.news, currentPages.news);

            tbody.innerHTML = paginatedNews.map(news => `
                <tr>
                    <td>
                        <strong>${news.title}</strong>
                        <br><small class="text-muted">${news.summary}</small>
                    </td>
                    <td><span class="badge bg-info">${news.category}</span></td>
                    <td>${news.author}</td>
                    <td><span class="badge bg-success">${news.views || 0}</span></td>
                    <td><span class="status-badge status-${news.status}">${news.status === 'published' ? '已发布' : '草稿'}</span></td>
                    <td>${news.date}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary btn-action" onclick="editNews('${news.id}')" title="编辑">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success btn-action" onclick="viewNews('${news.id}')" title="查看">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger btn-action" onclick="deleteNews('${news.id}')" title="删除">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');

            // 创建分页
            createPagination('news', projectData.news.length, currentPages.news);
        }

        // 更新案例列表
        function updateCaseList() {
            const tbody = document.getElementById('caseList');

            if (casesData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">暂无案例数据</td></tr>';
                createPagination('cases', 0, 1);
                return;
            }

            // 获取当前页的数据
            const paginatedCases = getPaginatedData(projectData.cases, currentPages.cases);

            tbody.innerHTML = paginatedCases.map(caseItem => `
                <tr>
                    <td>
                        <strong>${caseItem.title}</strong>
                        <br><small class="text-muted">${caseItem.summary}</small>
                    </td>
                    <td><span class="badge bg-info">${caseItem.category}</span></td>
                    <td><span class="badge bg-secondary">${caseItem.industry}</span></td>
                    <td><span class="status-badge status-${caseItem.status}">${caseItem.status === 'published' ? '已发布' : '草稿'}</span></td>
                    <td>${caseItem.date}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary btn-action" onclick="editCase('${caseItem.id}')" title="编辑">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success btn-action" onclick="viewCase('${caseItem.id}')" title="查看">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger btn-action" onclick="deleteCase('${caseItem.id}')" title="删除">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');

            // 创建分页
            createPagination('cases', projectData.cases.length, currentPages.cases);
        }

        // 更新应用领域列表
        function updateApplicationList() {
            const tbody = document.getElementById('applicationList');

            if (applicationsData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">暂无应用领域数据</td></tr>';
                createPagination('applications', 0, 1);
                return;
            }

            // 获取当前页的数据
            const paginatedApplications = getPaginatedData(projectData.applications, currentPages.applications);

            tbody.innerHTML = paginatedApplications.map(app => `
                <tr>
                    <td>
                        <strong>${app.title}</strong>
                        <br><small class="text-muted">${app.summary}</small>
                    </td>
                    <td><span class="badge bg-info">${app.category}</span></td>
                    <td><span class="status-badge status-${app.status}">${app.status === 'published' ? '已发布' : '草稿'}</span></td>
                    <td>${app.date}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary btn-action" onclick="editApplication('${app.id}')" title="编辑">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success btn-action" onclick="viewApplication('${app.id}')" title="查看">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger btn-action" onclick="deleteApplication('${app.id}')" title="删除">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');

            // 创建分页
            createPagination('applications', projectData.applications.length, currentPages.applications);
        }
    </script>
</body>
</html>
